00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 2023-09-02 14:39:24

00000000                             1  *
00000000                             2  *
00000000                             3  *  File Name   :  MCL68 Opcode Tests
00000000                             4  *  Used on     :  
00000000                             5  *  Author      :  Ted Fried, MicroCore Labs
00000000                             6  *  Creation    :  7/14/2020
00000000                             7  *
00000000                             8  *   Description:
00000000                             9  *   ============
00000000                            10  *   
00000000                            11  *  Program to test all of the Motorola 68000's opcodes.
00000000                            12  *
00000000                            13  *  If failures are detected, the code will immediately loop on itself.
00000000                            14  *  All addressing modes, data sizes, and opcode combinations are tested.
00000000                            15  *
00000000                            16  *  This code was developed using the Easy68K simulator where all tests passed!
00000000                            17  *
00000000                            18  *------------------------------------------------------------------------
00000000                            19  *
00000000                            20  * Modification History:
00000000                            21  * =====================
00000000                            22  *
00000000                            23  * Revision 1 7/14/2020 
00000000                            24  * Initial revision
00000000                            25  *
00000000                            26  *
00000000                            27  *------------------------------------------------------------------------
00000000                            28  *
00000000                            29  * Copyright (c) 2020 Ted Fried
00000000                            30  * 
00000000                            31  * Permission is hereby granted, free of charge, to any person obtaining a copy
00000000                            32  * of this software and associated documentation files (the "Software"), to deal
00000000                            33  * in the Software without restriction, including without limitation the rights
00000000                            34  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
00000000                            35  * copies of the Software, and to permit persons to whom the Software is
00000000                            36  * furnished to do so, subject to the following conditions:
00000000                            37  * 
00000000                            38  * The above copyright notice and this permission notice shall be included in all
00000000                            39  * copies or substantial portions of the Software.
00000000                            40  * 
00000000                            41  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
00000000                            42  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
00000000                            43  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
00000000                            44  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
00000000                            45  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
00000000                            46  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
00000000                            47  * SOFTWARE.
00000000                            48  *
00000000                            49  
00000000                            50  
00000000                            51  * Populate Exception Vectors
00000000                            52  *
00000000                            53    ORG $00000   
00000000= 000003F0                  54    dc.l    $000003F0  * Vector = 0   Reset Supervisor Stack Pointer
00000004= 00000400                  55    dc.l    $00000400  * Vector = 1   Reset Initial PC
00000008= 22222222                  56    dc.l    $22222222  * Vector = 2   Bus Error
0000000C= 30303033                  57    dc.l    $30303033  * Vector = 3   Address Error
00000010= 44444444                  58    dc.l    $44444444  * Vector = 4   Illegal Instruction
00000014= 55555555                  59    dc.l    $55555555  * Vector = 5   Zero Divide
00000018= 0000F010                  60    dc.l    $0000F010  * Vector = 6   CHK Instruction
0000001C= 0000F020                  61    dc.l    $0000F020  * Vector = 7   TRAPV Instruction
00000020= 88888888                  62    dc.l    $88888888  * Vector = 8   Privilege Violation 
00000024= 99999999                  63    dc.l    $99999999  * Vector = 9   Trace
00000028= AAAAAAAA                  64    dc.l    $aaaaaaaa  * Vector = 10  Line A Emulator
0000002C= BBBBBBBB                  65    dc.l    $bbbbbbbb  * Vector = 11  Line F Emulator
00000030                            66    
00000060                            67    ORG $00060   
00000060= 12121212                  68    dc.l    $12121212  * Vector = 24  Spurrious Interrupt
00000064= 11111111                  69    dc.l    $11111111  * Vector = 25  Level 1 Interrupt Autovector
00000068= 22222222                  70    dc.l    $22222222  * Vector = 26  Level 2 Interrupt Autovector
0000006C= 33333333                  71    dc.l    $33333333  * Vector = 27  Level 3 Interrupt Autovector
00000070= 44444444                  72    dc.l    $44444444  * Vector = 28  Level 4 Interrupt Autovector
00000074= 55555555                  73    dc.l    $55555555  * Vector = 29  Level 5 Interrupt Autovector
00000078= 66666666                  74    dc.l    $66666666  * Vector = 30  Level 6 Interrupt Autovector
0000007C= 77777777                  75    dc.l    $77777777  * Vector = 31  Level 7 Interrupt Autovector
00000080                            76    
00000080                            77  
00000080                            78  * Loop here when all tests pass
00000080                            79  *
0000F000                            80    ORG $00F000 
0000F000  60FE                      81  ALL_DONE: bra ALL_DONE
0000F002                            82  
0000F002                            83   
0000F002                            84  * Exception Vector = 6   CHK Instruction
0000F002                            85  *
0000F010                            86    ORG $00F010 
0000F010                            87    
0000F010                            88  EXCEPTION_6:
0000F010  2C3C EEEE0006             89              move.l #$EEEE0006 , d6      * Set d6 to the exception vector 
0000F016  4E73                      90              rte
0000F018                            91            
0000F018                            92  
0000F018                            93   
0000F018                            94  * Exception Vector = 7   TRAPV Instruction
0000F018                            95  *
0000F020                            96    ORG $00F020 
0000F020                            97    
0000F020                            98  EXCEPTION_7:
0000F020  203C 12345678             99              move.l #$12345678 , d0      * Set d6 to the exception vector 
0000F026  4E73                     100              rte
0000F028                           101            
0000F028                           102  
0000F028                           103  
0000F028                           104  * Beginning of opcode tests
0000F028                           105  *
00000400                           106  START   ORG $000400 
00000400                           107  
00000400  2E7C 000003F0            108     move.l #$000003F0  , a7      * populate stack pointer
00000406                           109  
00000406                           110  
00000406  4EB9 00000564            111     jsr op_ORI_TO_CCR
0000040C  4EB9 00000598            112     jsr op_ORI_TO_SR
00000412  4EB9 000005CC            113     jsr op_EORI_TO_CCR
00000418  4EB9 00000604            114     jsr op_EORI_TO_SR
0000041E  4EB9 0000063C            115     jsr op_ANDI_TO_CCR
00000424  4EB9 00000674            116     jsr op_ANDI_TO_SR
0000042A  4EB9 000006AC            117     jsr op_BTST
00000430  4EB9 00000B5E            118     jsr op_BCHG
00000436  4EB9 00000FF0            119     jsr op_BCLR
0000043C  4EB9 000013A2            120     jsr op_BSET
00000442  4EB9 0000183E            121     jsr op_MOVEP
00000448  4EB9 000018D4            122     jsr op_BOOL_I
0000044E  4EB9 00001AF4            123     jsr op_CMP_I
00000454  4EB9 00001CF6            124     jsr op_ADD_I
0000045A  4EB9 00001E7C            125     jsr op_SUB_I
00000460  4EB9 00002002            126     jsr op_MOVE
00000466                           127  *   jsr op_MOVE_xxx_FLAGS ; Disabled, sets reserved flags
00000466  4EB9 00002422            128     jsr op_EXT
0000046C  4EB9 0000244C            129     jsr op_SWAP
00000472  4EB9 00002462            130     jsr op_LEAPEA 
00000478  4EB9 0000250E            131     jsr op_TAS 
0000047E  4EB9 00002538            132     jsr op_TST 
00000484  4EB9 00002580            133     jsr op_LINKS 
0000048A  4EB9 0000259E            134     jsr op_MOVE_USP
00000490  4EB9 000025AC            135     jsr op_CHK
00000496  4EB9 000025E6            136     jsr op_NEGS
0000049C  4EB9 0000299C            137     jsr op_MOVEM
000004A2                           138  *   jsr op_ABCD ; not implemented
000004A2                           139  *   jsr op_SBCD ; not implemented
000004A2                           140  *   jsr op_NBCD ; not implemented
000004A2  4EB9 00002FEA            141     jsr op_TRAPV
000004A8  4EB9 0000300A            142     jsr op_RTR
000004AE  4EB9 00001ABE            143     jsr op_BSR
000004B4  4EB9 0000302E            144     jsr op_BCC
000004BA  4EB9 000030AE            145     jsr op_DBCC
000004C0  4EB9 000030D4            146     jsr op_SCC
000004C6  4EB9 000030FE            147     jsr op_ADDQ
000004CC  4EB9 000031BA            148     jsr op_SUBQ
000004D2  4EB9 00003276            149     jsr op_MOVEQ
000004D8  4EB9 00003296            150     jsr op_DIVU
000004DE  4EB9 000032E8            151     jsr op_DIVS
000004E4  4EB9 0000333A            152     jsr op_OR
000004EA  4EB9 00003428            153     jsr op_AND
000004F0  4EB9 00003516            154     jsr op_EOR
000004F6  4EB9 0000358E            155     jsr op_CMP
000004FC  4EB9 00003606            156     jsr op_CMPA
00000502  4EB9 0000366E            157     jsr op_CMPM
00000508  4EB9 00003724            158     jsr op_ADD
0000050E  4EB9 00003812            159     jsr op_SUB
00000514  4EB9 00003900            160     jsr op_ADDA
0000051A  4EB9 0000394E            161     jsr op_SUBA
00000520  4EB9 0000399C            162     jsr op_ADDX
00000526  4EB9 00003ABA            163     jsr op_SUBX
0000052C  4EB9 00003BD8            164     jsr op_MULU
00000532  4EB9 00003C24            165     jsr op_MULS
00000538  4EB9 00003C70            166     jsr op_EXG
0000053E  4EB9 00003CDE            167     jsr op_ROx
00000544  4EB9 00003F1E            168     jsr op_ROXx
0000054A  4EB9 0000415E            169     jsr op_SHIFTS
00000550  4EB9 000043AA            170     jsr op_SHIFTS2
00000556                           171     
00000556  4EF9 0000F000            172     jmp ALL_DONE
0000055C                           173  
0000055C                           174     
0000055C                           175  
0000055C  263C 33333333            176  BSR_FAR1:       move.l #$33333333 , d3
00000562  4E75                     177                  rts
00000564                           178  
00000564                           179  *-----------------------------------------------------------
00000564                           180  *-----------------------------------------------------------
00000564                           181  * OPCODE : ORI_TO_CCR
00000564                           182  *-----------------------------------------------------------
00000564                           183  *-----------------------------------------------------------
00000564                           184  op_ORI_TO_CCR: 
00000564                           185  
00000564  003C 00FF                186      ori.b #$FF, CCR
00000568  6A00 002C                187      bpl ORI_TO_CCR_FAIL     * branch if Z clear  
0000056C  6600 0028                188      bne ORI_TO_CCR_FAIL     * branch if N clear
00000570  6800 0024                189      bvc ORI_TO_CCR_FAIL     * branch if V clear 
00000574  6400 0020                190      bcc ORI_TO_CCR_FAIL     * branch if C clear 
00000578                           191      
00000578  44FC 0000                192      move #$00, CCR
0000057C  003C 0000                193      ori.b #$00, CCR
00000580  6700 0014                194      beq ORI_TO_CCR_FAIL     * branch if Z set  
00000584  6B00 0010                195      bmi ORI_TO_CCR_FAIL     * branch if N set  
00000588  6900 000C                196      bvs ORI_TO_CCR_FAIL     * branch if V set  
0000058C  6500 0008                197      bcs ORI_TO_CCR_FAIL     * branch if C set  
00000590                           198     
00000590  46FC 2700                199      move #$2700, SR         * Put flags back to initial value
00000594                           200  
00000594  4E75                     201      rts
00000596                           202      
00000596  60FE                     203  ORI_TO_CCR_FAIL: bra ORI_TO_CCR_FAIL
00000598                           204     
00000598                           205  
00000598                           206  *-----------------------------------------------------------
00000598                           207  *-----------------------------------------------------------
00000598                           208  * OPCODE : ORI_TO_SR
00000598                           209  *-----------------------------------------------------------
00000598                           210  *-----------------------------------------------------------
00000598                           211  op_ORI_TO_SR: 
00000598                           212  
00000598  007C 2FFF                213      ori.w #$2FFF, SR
0000059C  6A00 002C                214      bpl ORI_TO_SR_FAIL     * branch if Z clear  
000005A0  6600 0028                215      bne ORI_TO_SR_FAIL     * branch if N clear
000005A4  6800 0024                216      bvc ORI_TO_SR_FAIL     * branch if V clear 
000005A8  6400 0020                217      bcc ORI_TO_SR_FAIL     * branch if C clear 
000005AC                           218      
000005AC  46FC 2000                219      move #$2000, SR
000005B0  007C 0000                220      ori.w #$0000, SR
000005B4  6700 0014                221      beq ORI_TO_SR_FAIL     * branch if Z set  
000005B8  6B00 0010                222      bmi ORI_TO_SR_FAIL     * branch if N set  
000005BC  6900 000C                223      bvs ORI_TO_SR_FAIL     * branch if V set  
000005C0  6500 0008                224      bcs ORI_TO_SR_FAIL     * branch if C set  
000005C4                           225     
000005C4  46FC 2700                226      move #$2700, SR        * Put flags back to initial value
000005C8                           227  
000005C8  4E75                     228      rts
000005CA                           229      
000005CA  60FE                     230  ORI_TO_SR_FAIL: bra ORI_TO_SR_FAIL
000005CC                           231     
000005CC                           232  
000005CC                           233  *-----------------------------------------------------------
000005CC                           234  *-----------------------------------------------------------
000005CC                           235  * OPCODE : EORI_TO_CCR
000005CC                           236  *-----------------------------------------------------------
000005CC                           237  *-----------------------------------------------------------
000005CC                           238  op_EORI_TO_CCR: 
000005CC                           239  
000005CC  44FC 0000                240      move #$00, CCR
000005D0  0A3C 00FF                241      eori.b #$FF, CCR
000005D4  6A00 002C                242      bpl EORI_TO_CCR_FAIL     * branch if Z clear  
000005D8  6600 0028                243      bne EORI_TO_CCR_FAIL     * branch if N clear
000005DC  6800 0024                244      bvc EORI_TO_CCR_FAIL     * branch if V clear 
000005E0  6400 0020                245      bcc EORI_TO_CCR_FAIL     * branch if C clear 
000005E4                           246      
000005E4  44FC 0000                247      move #$00, CCR
000005E8  0A3C 0000                248      eori.b #$00, CCR
000005EC  6700 0014                249      beq EORI_TO_CCR_FAIL     * branch if Z set  
000005F0  6B00 0010                250      bmi EORI_TO_CCR_FAIL     * branch if N set  
000005F4  6900 000C                251      bvs EORI_TO_CCR_FAIL     * branch if V set  
000005F8  6500 0008                252      bcs EORI_TO_CCR_FAIL     * branch if C set  
000005FC                           253     
000005FC  46FC 2700                254      move #$2700, SR         * Put flags back to initial value
00000600                           255  
00000600  4E75                     256      rts
00000602                           257      
00000602  60FE                     258  EORI_TO_CCR_FAIL: bra EORI_TO_CCR_FAIL
00000604                           259     
00000604                           260  
00000604                           261  *-----------------------------------------------------------
00000604                           262  *-----------------------------------------------------------
00000604                           263  * OPCODE : EORI_TO_SR
00000604                           264  *-----------------------------------------------------------
00000604                           265  *-----------------------------------------------------------
00000604                           266  op_EORI_TO_SR: 
00000604                           267  
00000604  46FC 2000                268      move #$2000, SR
00000608  0A7C 0FFF                269      eori.w #$0FFF, SR
0000060C  6A00 002C                270      bpl EORI_TO_SR_FAIL     * branch if Z clear  
00000610  6600 0028                271      bne EORI_TO_SR_FAIL     * branch if N clear
00000614  6800 0024                272      bvc EORI_TO_SR_FAIL     * branch if V clear 
00000618  6400 0020                273      bcc EORI_TO_SR_FAIL     * branch if C clear 
0000061C                           274      
0000061C  46FC 2000                275      move #$2000, SR
00000620  0A7C 0000                276      eori.w #$0000, SR
00000624  6700 0014                277      beq EORI_TO_SR_FAIL     * branch if Z set  
00000628  6B00 0010                278      bmi EORI_TO_SR_FAIL     * branch if N set  
0000062C  6900 000C                279      bvs EORI_TO_SR_FAIL     * branch if V set  
00000630  6500 0008                280      bcs EORI_TO_SR_FAIL     * branch if C set  
00000634                           281     
00000634  46FC 2700                282      move #$2700, SR        * Put flags back to initial value
00000638                           283  
00000638  4E75                     284      rts
0000063A                           285      
0000063A  60FE                     286  EORI_TO_SR_FAIL: bra EORI_TO_SR_FAIL
0000063C                           287     
0000063C                           288  
0000063C                           289  
0000063C                           290  *-----------------------------------------------------------
0000063C                           291  *-----------------------------------------------------------
0000063C                           292  * OPCODE : ANDI_TO_CCR
0000063C                           293  *-----------------------------------------------------------
0000063C                           294  *-----------------------------------------------------------
0000063C                           295  op_ANDI_TO_CCR: 
0000063C                           296  
0000063C  44FC 00FF                297      move #$FF, CCR
00000640  023C 00FF                298      andi.b #$FF, CCR
00000644  6A00 002C                299      bpl ANDI_TO_CCR_FAIL     * branch if Z clear  
00000648  6600 0028                300      bne ANDI_TO_CCR_FAIL     * branch if N clear
0000064C  6800 0024                301      bvc ANDI_TO_CCR_FAIL     * branch if V clear 
00000650  6400 0020                302      bcc ANDI_TO_CCR_FAIL     * branch if C clear 
00000654                           303      
00000654  44FC 00FF                304      move #$FF, CCR
00000658  023C 0000                305      andi.b #$00, CCR
0000065C  6700 0014                306      beq ANDI_TO_CCR_FAIL     * branch if Z set  
00000660  6B00 0010                307      bmi ANDI_TO_CCR_FAIL     * branch if N set  
00000664  6900 000C                308      bvs ANDI_TO_CCR_FAIL     * branch if V set  
00000668  6500 0008                309      bcs ANDI_TO_CCR_FAIL     * branch if C set  
0000066C                           310     
0000066C  46FC 2700                311      move #$2700, SR         * Put flags back to initial value
00000670                           312  
00000670  4E75                     313      rts
00000672                           314      
00000672  60FE                     315  ANDI_TO_CCR_FAIL: bra ANDI_TO_CCR_FAIL
00000674                           316     
00000674                           317  
00000674                           318  *-----------------------------------------------------------
00000674                           319  *-----------------------------------------------------------
00000674                           320  * OPCODE : ANDI_TO_SR
00000674                           321  *-----------------------------------------------------------
00000674                           322  *-----------------------------------------------------------
00000674                           323  op_ANDI_TO_SR: 
00000674  46FC 20FF                324      move #$20FF, SR
00000678  027C FFFF                325      andi.w #$FFFF, SR
0000067C  6A00 002C                326      bpl ANDI_TO_SR_FAIL     * branch if Z clear  
00000680  6600 0028                327      bne ANDI_TO_SR_FAIL     * branch if N clear
00000684  6800 0024                328      bvc ANDI_TO_SR_FAIL     * branch if V clear 
00000688  6400 0020                329      bcc ANDI_TO_SR_FAIL     * branch if C clear 
0000068C                           330      
0000068C  46FC 20FF                331      move #$20FF, SR
00000690  027C FF00                332      andi.w #$FF00, SR
00000694  6700 0014                333      beq ANDI_TO_SR_FAIL     * branch if Z set  
00000698  6B00 0010                334      bmi ANDI_TO_SR_FAIL     * branch if N set  
0000069C  6900 000C                335      bvs ANDI_TO_SR_FAIL     * branch if V set  
000006A0  6500 0008                336      bcs ANDI_TO_SR_FAIL     * branch if C set  
000006A4                           337     
000006A4  46FC 2700                338      move #$2700, SR         * Put flags back to initial value
000006A8                           339  
000006A8  4E75                     340      rts
000006AA                           341      
000006AA  60FE                     342  ANDI_TO_SR_FAIL: bra ANDI_TO_SR_FAIL
000006AC                           343    
000006AC                           344    
000006AC                           345  *-----------------------------------------------------------
000006AC                           346  *-----------------------------------------------------------
000006AC                           347  * OPCODE : BTST
000006AC                           348  *-----------------------------------------------------------
000006AC                           349  *-----------------------------------------------------------
000006AC                           350  op_BTST: 
000006AC                           351  
000006AC                           352  *  Bit Number Static 
000006AC                           353      
000006AC                           354              * EA = Dn  - LONG only
000006AC  203C 80000001            355              move.l #$80000001 , d0      * populate test data
000006B2  0800 0000                356              btst.l #0 , d0              
000006B6  6700 04A4                357              beq BTST_FAIL               * branch if Z set
000006BA  0800 0001                358              btst.l #1 , d0              * 
000006BE  6600 049C                359              bne BTST_FAIL               * branch if Z clear  
000006C2  0800 001F                360              btst.l #31 , d0             * 
000006C6  6700 0494                361              beq BTST_FAIL               * branch if Z set
000006CA                           362              
000006CA                           363              
000006CA                           364              * EA = (An)  - BYTE only
000006CA  207C 00000100            365              move.l #$00000100 , a0      * point to memory to address 0x100
000006D0  10BC 0081                366              move.b #$81 , (a0)          * populate test data
000006D4  1210                     367              move.b (a0) , d1            * Check to see if data in memory is 0x81
000006D6  0810 0000                368              btst.b #0 , (a0)            
000006DA  6700 0480                369              beq BTST_FAIL               * branch if Z set
000006DE  0810 0001                370              btst.b #1 , (a0)            * 
000006E2  6600 0478                371              bne BTST_FAIL               * branch if Z clear  
000006E6  0810 0007                372              btst.b #7 , (a0)            * 
000006EA  6700 0470                373              beq BTST_FAIL               * branch if Z set
000006EE                           374              
000006EE                           375              
000006EE                           376              * EA = (An)+  - BYTE only
000006EE  207C 00000100            377              move.l #$00000100 , a0      * point to memory to address 0x100 
000006F4  10FC 0001                378              move.b #$01 , (a0)+         * populate test data
000006F8  10FC 00FC                379              move.b #$FC , (a0)+         * populate test data
000006FC  10FC 0080                380              move.b #$80 , (a0)+         * populate test data
00000700  207C 00000100            381              move.l #$00000100 , a0      * point to memory to address 0x100 
00000706  0818 0000                382              btst.b #0 , (a0)+            
0000070A  6700 0450                383              beq BTST_FAIL               * branch if Z set
0000070E  0818 0001                384              btst.b #1 , (a0)+           * 
00000712  6600 0448                385              bne BTST_FAIL               * branch if Z clear  
00000716  0818 0007                386              btst.b #7 , (a0)+           * 
0000071A  6700 0440                387              beq BTST_FAIL               * branch if Z set
0000071E                           388          
0000071E                           389          
0000071E                           390              * EA = -(An)  - BYTE only
0000071E  207C 00000100            391              move.l #$00000100 , a0      * point to memory to address
00000724  10FC 0080                392              move.b #$80 , (a0)+         * populate test data
00000728  10FC 00FC                393              move.b #$FC , (a0)+         * populate test data
0000072C  10FC 0001                394              move.b #$01 , (a0)+         * populate test data
00000730  207C 00000103            395              move.l #$00000103 , a0      * point to memory to address 
00000736  0820 0000                396              btst.b #0 , -(a0)            
0000073A  6700 0420                397              beq BTST_FAIL               * branch if Z set
0000073E  0820 0001                398              btst.b #1 , -(a0)           * 
00000742  6600 0418                399              bne BTST_FAIL               * branch if Z clear  
00000746  0820 0007                400              btst.b #7 , -(a0)           * 
0000074A  6700 0410                401              beq BTST_FAIL               * branch if Z set
0000074E                           402          
0000074E                           403          
0000074E                           404              * EA = n(An)  - BYTE only
0000074E  207C 00000100            405              move.l #$00000100 , a0      * point to memory to address
00000754  10FC 0001                406              move.b #$01 , (a0)+         * populate test data
00000758  10FC 00FC                407              move.b #$FC , (a0)+         * populate test data
0000075C  10FC 0080                408              move.b #$80 , (a0)+         * populate test data
00000760  207C 00000100            409              move.l #$00000100 , a0      * point to memory to address
00000766  0828 0000 0000           410              btst.b #0 , 0(a0)            
0000076C  6700 03EE                411              beq BTST_FAIL               * branch if Z set
00000770  0828 0001 0001           412              btst.b #1 , 1(a0)           * 
00000776  6600 03E4                413              bne BTST_FAIL               * branch if Z clear  
0000077A  0828 0007 0002           414              btst.b #7 , 2(a0)           * 
00000780  6700 03DA                415              beq BTST_FAIL               * branch if Z set
00000784                           416          
00000784                           417          
00000784                           418              * EA = n(An,R.W)  - BYTE only
00000784  207C 00000100            419              move.l #$00000100 , a0      * point to memory to address
0000078A  227C 00000000            420              move.l #$00000000 , a1      * point to memory to address
00000790  247C 00000001            421              move.l #$00000001 , a2      * point to memory to address
00000796  7000                     422              move.l #$00000000 , d0      * point to memory to address
00000798  7201                     423              move.l #$00000001 , d1      * point to memory to address
0000079A  0830 0000 0000           424              btst.b #0 , 0(a0,d0.w)            
000007A0  6700 03BA                425              beq BTST_FAIL               * branch if Z set
000007A4  0830 0001 1000           426              btst.b #1 , 0(a0,d1.w)      * 
000007AA  6600 03B0                427              bne BTST_FAIL               * branch if Z clear  
000007AE  0830 0007 1001           428              btst.b #7 , 1(a0,d1.w)      * 
000007B4  6700 03A6                429              beq BTST_FAIL               * branch if Z set
000007B8                           430              * EA = n(An,R.L)  - BYTE only
000007B8  0830 0000 0800           431              btst.b #0 , 0(a0,d0.l)  
000007BE  6700 039C                432              beq BTST_FAIL               * branch if Z set
000007C2  0830 0001 1800           433              btst.b #1 , 0(a0,d1.l)      * 
000007C8  6600 0392                434              bne BTST_FAIL               * branch if Z clear  
000007CC  0830 0007 1801           435              btst.b #7 , 1(a0,d1.l)      * 
000007D2  6700 0388                436              beq BTST_FAIL               * branch if Z set
000007D6                           437              * EA = n(An,A.W)  - BYTE only
000007D6  0830 0000 9000           438              btst.b #0 , 0(a0,a1.w)            
000007DC  6700 037E                439              beq BTST_FAIL               * branch if Z set
000007E0  0830 0001 A000           440              btst.b #1 , 0(a0,a2.w)      * 
000007E6  6600 0374                441              bne BTST_FAIL               * branch if Z clear  
000007EA  0830 0007 A001           442              btst.b #7 , 1(a0,a2.w)      * 
000007F0  6700 036A                443              beq BTST_FAIL               * branch if Z set
000007F4                           444              * EA = n(An,A.L)  - BYTE only
000007F4  0830 0000 9800           445              btst.b #0 , 0(a0,a1.l)  
000007FA  6700 0360                446              beq BTST_FAIL               * branch if Z set
000007FE  0830 0001 A800           447              btst.b #1 , 0(a0,a2.l)      * 
00000804  6600 0356                448              bne BTST_FAIL               * branch if Z clear  
00000808  0830 0007 A801           449              btst.b #7 , 1(a0,a2.l)      * 
0000080E  6700 034C                450              beq BTST_FAIL               * branch if Z set
00000812                           451          
00000812                           452          
00000812                           453              * EA = x.W  - BYTE only
00000812  0838 0000 0100           454              btst.b #0 , $0100            
00000818  6700 0342                455              beq BTST_FAIL               * branch if Z set
0000081C  0838 0001 0101           456              btst.b #1 , $0101           * 
00000822  6600 0338                457              bne BTST_FAIL               * branch if Z clear  
00000826  0838 0007 0102           458              btst.b #7 , $0102           * 
0000082C  6700 032E                459              beq BTST_FAIL               * branch if Z set
00000830                           460          
00000830                           461          
00000830                           462              * EA = x.L  - BYTE only
00000830  207C 000F0100            463              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000836  10FC 0001                464              move.b #$01 , (a0)+         * populate test data
0000083A  10FC 00FC                465              move.b #$FC , (a0)+         * populate test data
0000083E  10FC 0080                466              move.b #$80 , (a0)+         * populate test data
00000842  0839 0000 000F0100       467              btst.b #0 , $000F0100 
0000084A  6700 0310                468              beq BTST_FAIL               * branch if Z set
0000084E  0839 0001 000F0101       469              btst.b #1 , $000F0101       * 
00000856  6600 0304                470              bne BTST_FAIL               * branch if Z clear  
0000085A  0839 0007 000F0102       471              btst.b #7 , $000F0102       * 
00000862  6700 02F8                472              beq BTST_FAIL               * branch if Z set
00000866                           473          
00000866                           474          
00000866                           475              * EA = x(PC)  - BYTE only
00000866  4BFA FE44                476              lea op_BTST(pc) , a5
0000086A  083A 0000 FE3E           477              btst.b #0 , op_BTST(pc) 
00000870  6600 02EA                478              bne BTST_FAIL               * branch if Z clear  
00000874  083A 0003 0026           479              btst.b #3 ,op_BTST0(pc)     * 
0000087A  6700 02E0                480              beq BTST_FAIL               * branch if Z set
0000087E  083A 0006 0094           481              btst.b #6 , op_BTST12(pc)    * 
00000884  6700 02D6                482              beq BTST_FAIL               * branch if Z set
00000888                           483    
00000888                           484    
00000888                           485              * EA = n(PC,R.W)  - BYTE only
00000888  207C 00000100            486              move.l #$00000100 , a0      * point to memory to address
0000088E  227C 00000000            487              move.l #$00000000 , a1      * point to memory to address
00000894  247C 00000001            488              move.l #$00000001 , a2      * point to memory to address
0000089A  7000                     489              move.l #$00000000 , d0      * point to memory to address
0000089C  7201                     490              move.l #$00000001 , d1      * point to memory to address
0000089E                           491      
0000089E  083B 0000 00FC           492  op_BTST0:   btst.b #0 , op_BTST0(pc,d0.w)            
000008A4  6600 02B6                493              bne BTST_FAIL               * branch if Z clear  
000008A8                           494              
000008A8  4BFB 1002                495              lea op_BTST1(pc,d1.w) , a5
000008AC  083B 0001 10FC           496  op_BTST1:   btst.b #1 , op_BTST1(pc,d1.w)      * 
000008B2  6700 02A8                497              beq BTST_FAIL               * branch if Z set
000008B6  083B 0007 10FC           498  op_BTST2:   btst.b #7 , op_BTST2(pc,d1.w)      * 
000008BC  6600 029E                499              bne BTST_FAIL               * branch if Z clear  
000008C0                           500              * EA = n(PC,R.L)  - BYTE only
000008C0  083B 0000 08FC           501  op_BTST3:   btst.b #0 , op_BTST3(pc,d0.l)  
000008C6  6600 0294                502              bne BTST_FAIL               * branch if Z clear  
000008CA  083B 0001 18FC           503  op_BTST4:   btst.b #1 , op_BTST4(pc,d1.l)      * 
000008D0  6700 028A                504              beq BTST_FAIL               * branch if Z set
000008D4  083B 0007 18FC           505  op_BTST5:   btst.b #7 , op_BTST5(pc,d1.l)      * 
000008DA  6600 0280                506              bne BTST_FAIL               * branch if Z clear  
000008DE                           507              * EA = n(PC,A.W)  - BYTE only
000008DE  083B 0000 90FC           508  op_BTST6    btst.b #0 , op_BTST6(pc,a1.w)            
000008E4  6600 0276                509              bne BTST_FAIL               * branch if Z clear  
000008E8  083B 0001 A0FC           510  op_BTST7:   btst.b #1 , op_BTST7(pc,a2.w)      * 
000008EE  6700 026C                511              beq BTST_FAIL               * branch if Z set
000008F2  083B 0007 A0FC           512  op_BTST8:   btst.b #7 , op_BTST8(pc,a2.w)      * 
000008F8  6600 0262                513              bne BTST_FAIL               * branch if Z clear  
000008FC                           514              * EA = n(PC,A.L)  - BYTE only
000008FC  083B 0000 98FC           515  op_BTST9:   btst.b #0 , op_BTST9(pc,a1.l)  
00000902  6600 0258                516              bne BTST_FAIL               * branch if Z clear  
00000906  083B 0001 A8FC           517  op_BTST10:  btst.b #1 , op_BTST10(pc,a2.l)      * 
0000090C  6700 024E                518              beq BTST_FAIL               * branch if Z set
00000910  083B 0007 A8FC           519  op_BTST11:  btst.b #7 , op_BTST11(pc,a2.l)      * 
00000916  6600 0244                520  op_BTST12:  bne BTST_FAIL               * branch if Z clear  
0000091A                           521   
0000091A                           522  
0000091A                           523  
0000091A                           524  * Bit Number Dynamic
0000091A                           525      
0000091A                           526              * EA = Dn  - LONG only
0000091A  203C 80000001            527              move.l #$80000001 , d0      * populate test data
00000920  7A00                     528              move.l #0,  d5              * populate bit number to test
00000922  7C01                     529              move.l #1,  d6              * populate bit number to test
00000924  7E1F                     530              move.l #31, d7              * populate bit number to test
00000926                           531              
00000926  0B00                     532              btst.l d5 , d0              
00000928  6700 0232                533              beq BTST_FAIL               * branch if Z set
0000092C  0D00                     534              btst.l d6 , d0              * 
0000092E  6600 022C                535              bne BTST_FAIL               * branch if Z clear  
00000932  0F00                     536              btst.l d7 , d0             * 
00000934  6700 0226                537              beq BTST_FAIL               * branch if Z set
00000938                           538              
00000938                           539              
00000938                           540              * EA = (An)  - BYTE only
00000938  7A00                     541              move.l #0,  d5              * populate bit number to test
0000093A  7C01                     542              move.l #1,  d6              * populate bit number to test
0000093C  7E07                     543              move.l #7,  d7              * populate bit number to test           
0000093E  207C 00000100            544              move.l #$00000100 , a0      * point to memory to address 0x100
00000944  10BC 0081                545              move.b #$81 , (a0)          * populate test data
00000948  1210                     546              move.b (a0) , d1            * Check to see if data in memory is 0x81
0000094A  0B10                     547              btst.b d5 , (a0)            
0000094C  6700 020E                548              beq BTST_FAIL               * branch if Z set
00000950  0D10                     549              btst.b d6 , (a0)            * 
00000952  6600 0208                550              bne BTST_FAIL               * branch if Z clear  
00000956  0F10                     551              btst.b d7 , (a0)            * 
00000958  6700 0202                552              beq BTST_FAIL               * branch if Z set
0000095C                           553              
0000095C                           554  * ---
0000095C                           555  
0000095C                           556      
0000095C                           557              * EA = (An)+  - BYTE only
0000095C  207C 00000100            558              move.l #$00000100 , a0      * point to memory to address 0x100 
00000962  10FC 0001                559              move.b #$01 , (a0)+         * populate test data
00000966  10FC 00FC                560              move.b #$FC , (a0)+         * populate test data
0000096A  10FC 0080                561              move.b #$80 , (a0)+         * populate test data
0000096E  207C 00000100            562              move.l #$00000100 , a0      * point to memory to address 0x100 
00000974  0B18                     563              btst.b d5 , (a0)+            
00000976  6700 01E4                564              beq BTST_FAIL               * branch if Z set
0000097A  0D18                     565              btst.b d6 , (a0)+           * 
0000097C  6600 01DE                566              bne BTST_FAIL               * branch if Z clear  
00000980  0F18                     567              btst.b d7 , (a0)+           * 
00000982  6700 01D8                568              beq BTST_FAIL               * branch if Z set
00000986                           569          
00000986                           570          
00000986                           571              * EA = -(An)  - BYTE only
00000986  207C 00000100            572              move.l #$00000100 , a0      * point to memory to address
0000098C  10FC 0080                573              move.b #$80 , (a0)+         * populate test data
00000990  10FC 00FC                574              move.b #$FC , (a0)+         * populate test data
00000994  10FC 0001                575              move.b #$01 , (a0)+         * populate test data
00000998  207C 00000103            576              move.l #$00000103 , a0      * point to memory to address 
0000099E  0B20                     577              btst.b d5 , -(a0)            
000009A0  6700 01BA                578              beq BTST_FAIL               * branch if Z set
000009A4  0D20                     579              btst.b d6 , -(a0)           * 
000009A6  6600 01B4                580              bne BTST_FAIL               * branch if Z clear  
000009AA  0F20                     581              btst.b d7 , -(a0)           * 
000009AC  6700 01AE                582              beq BTST_FAIL               * branch if Z set
000009B0                           583          
000009B0                           584          
000009B0                           585              * EA = n(An)  - BYTE only
000009B0  207C 00000100            586              move.l #$00000100 , a0      * point to memory to address
000009B6  10FC 0001                587              move.b #$01 , (a0)+         * populate test data
000009BA  10FC 00FC                588              move.b #$FC , (a0)+         * populate test data
000009BE  10FC 0080                589              move.b #$80 , (a0)+         * populate test data
000009C2  207C 00000100            590              move.l #$00000100 , a0      * point to memory to address
000009C8  0B28 0000                591              btst.b d5 , 0(a0)            
000009CC  6700 018E                592              beq BTST_FAIL               * branch if Z set
000009D0  0D28 0001                593              btst.b d6 , 1(a0)           * 
000009D4  6600 0186                594              bne BTST_FAIL               * branch if Z clear  
000009D8  0F28 0002                595              btst.b d7 , 2(a0)           * 
000009DC  6700 017E                596              beq BTST_FAIL               * branch if Z set
000009E0                           597          
000009E0                           598          
000009E0                           599              * EA = n(An,R.W)  - BYTE only
000009E0  207C 00000100            600              move.l #$00000100 , a0      * point to memory to address
000009E6  227C 00000000            601              move.l #$00000000 , a1      * point to memory to address
000009EC  247C 00000001            602              move.l #$00000001 , a2      * point to memory to address
000009F2  7000                     603              move.l #$00000000 , d0      * point to memory to address
000009F4  7201                     604              move.l #$00000001 , d1      * point to memory to address
000009F6  0B30 0000                605              btst.b d5 , 0(a0,d0.w)            
000009FA  6700 0160                606              beq BTST_FAIL               * branch if Z set
000009FE  0D30 1000                607              btst.b d6 , 0(a0,d1.w)      * 
00000A02  6600 0158                608              bne BTST_FAIL               * branch if Z clear  
00000A06  0F30 1001                609              btst.b d7 , 1(a0,d1.w)      * 
00000A0A  6700 0150                610              beq BTST_FAIL               * branch if Z set
00000A0E                           611              * EA = n(An,R.L)  - BYTE only
00000A0E  0B30 0800                612              btst.b d5 , 0(a0,d0.l)  
00000A12  6700 0148                613              beq BTST_FAIL               * branch if Z set
00000A16  0D30 1800                614              btst.b d6 , 0(a0,d1.l)      * 
00000A1A  6600 0140                615              bne BTST_FAIL               * branch if Z clear  
00000A1E  0F30 1801                616              btst.b d7 , 1(a0,d1.l)      * 
00000A22  6700 0138                617              beq BTST_FAIL               * branch if Z set
00000A26                           618              * EA = n(An,A.W)  - BYTE only
00000A26  0B30 9000                619              btst.b d5 , 0(a0,a1.w)            
00000A2A  6700 0130                620              beq BTST_FAIL               * branch if Z set
00000A2E  0D30 A000                621              btst.b d6 , 0(a0,a2.w)      * 
00000A32  6600 0128                622              bne BTST_FAIL               * branch if Z clear  
00000A36  0F30 A001                623              btst.b d7 , 1(a0,a2.w)      * 
00000A3A  6700 0120                624              beq BTST_FAIL               * branch if Z set
00000A3E                           625              * EA = n(An,A.L)  - BYTE only
00000A3E  0B30 9800                626              btst.b d5 , 0(a0,a1.l)  
00000A42  6700 0118                627              beq BTST_FAIL               * branch if Z set
00000A46  0D30 A800                628              btst.b d6 , 0(a0,a2.l)      * 
00000A4A  6600 0110                629              bne BTST_FAIL               * branch if Z clear  
00000A4E  0F30 A801                630              btst.b d7 , 1(a0,a2.l)      * 
00000A52  6700 0108                631              beq BTST_FAIL               * branch if Z set
00000A56                           632          
00000A56                           633          
00000A56                           634              * EA = x.W  - BYTE only
00000A56  0B38 0100                635              btst.b d5 , $0100            
00000A5A  6700 0100                636              beq BTST_FAIL               * branch if Z set
00000A5E  0D38 0101                637              btst.b d6 , $0101           * 
00000A62  6600 00F8                638              bne BTST_FAIL               * branch if Z clear  
00000A66  0F38 0102                639              btst.b d7 , $0102           * 
00000A6A  6700 00F0                640              beq BTST_FAIL               * branch if Z set
00000A6E                           641          
00000A6E                           642          
00000A6E                           643              * EA = x.L  - BYTE only
00000A6E  207C 000F0100            644              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000A74  10FC 0001                645              move.b #$01 , (a0)+         * populate test data
00000A78  10FC 00FC                646              move.b #$FC , (a0)+         * populate test data
00000A7C  10FC 0080                647              move.b #$80 , (a0)+         * populate test data
00000A80  0B39 000F0100            648              btst.b d5 , $000F0100 
00000A86  6700 00D4                649              beq BTST_FAIL               * branch if Z set
00000A8A  0D39 000F0101            650              btst.b d6 , $000F0101       * 
00000A90  6600 00CA                651              bne BTST_FAIL               * branch if Z clear  
00000A94  0F39 000F0102            652              btst.b d7 , $000F0102       * 
00000A9A  6700 00C0                653              beq BTST_FAIL               * branch if Z set
00000A9E                           654          
00000A9E                           655          
00000A9E                           656              * EA = x(PC)  - BYTE only
00000A9E  7C03                     657              move.l #3,  d6              * populate bit number to test
00000AA0  7E06                     658              move.l #6,  d7              * populate bit number to test
00000AA2  4BFA FC08                659              lea op_BTST(pc) , a5
00000AA6  0B3A FC04                660              btst.b d5 , op_BTST(pc) 
00000AAA  6600 00B0                661              bne BTST_FAIL               * branch if Z clear  
00000AAE  0D3A FDEE                662              btst.b d6 ,op_BTST0(pc)     * 
00000AB2  6700 00A8                663              beq BTST_FAIL               * branch if Z set
00000AB6  0F3A FE5E                664              btst.b d7 , op_BTST12(pc)    * 
00000ABA  6700 00A0                665              beq BTST_FAIL               * branch if Z set
00000ABE                           666    
00000ABE                           667    
00000ABE                           668              * EA = n(PC,R.W)  - BYTE only
00000ABE  207C 00000100            669              move.l #$00000100 , a0      * point to memory to address
00000AC4  227C 00000000            670              move.l #$00000000 , a1      * point to memory to address
00000ACA  247C 00000001            671              move.l #$00000001 , a2      * point to memory to address
00000AD0  7000                     672              move.l #$00000000 , d0      * point to memory to address
00000AD2  7201                     673              move.l #$00000001 , d1      * point to memory to address
00000AD4  7C01                     674              move.l #1,  d6              * populate bit number to test
00000AD6  7E07                     675              move.l #7,  d7              * populate bit number to test
00000AD8                           676      
00000AD8  0B3B 00FE                677  op_BTST20:  btst.b d5 , op_BTST20(pc,d0.w)            
00000ADC  6700 007E                678              beq BTST_FAIL               * branch if Z set            
00000AE0  4BFB 1002                679              lea op_BTST21(pc,d1.w) , a5
00000AE4  0D3B 10FE                680  op_BTST21:  btst.b d6 , op_BTST21(pc,d1.w)      * 
00000AE8  6700 0072                681              beq BTST_FAIL               * branch if Z set
00000AEC  0F3B 10FE                682  op_BTST22:  btst.b d7 , op_BTST22(pc,d1.w)      * 
00000AF0  6600 006A                683              bne BTST_FAIL               * branch if Z clear  
00000AF4                           684              * EA = n(PC,R.L)  - BYTE only
00000AF4  0B3B 08FE                685  op_BTST23:  btst.b d5 , op_BTST23(pc,d0.l)  
00000AF8  6700 0062                686              beq BTST_FAIL               * branch if Z set
00000AFC  0D3B 18FE                687  op_BTST24: btst.b d6 , op_BTST24(pc,d1.l)      * 
00000B00  6700 005A                688              beq BTST_FAIL               * branch if Z set
00000B04  0F3B 18FE                689  op_BTST25  btst.b d7 , op_BTST25(pc,d1.l)      * 
00000B08  6600 0052                690              bne BTST_FAIL               * branch if Z clear  
00000B0C                           691              * EA = n(PC,A.W)  - BYTE only
00000B0C  0B3B 90FE                692  op_BTST26   btst.b d5 , op_BTST26(pc,a1.w)            
00000B10  6700 004A                693              beq BTST_FAIL               * branch if Z set
00000B14  0D3B A0FE                694  op_BTST27:  btst.b d6 , op_BTST27(pc,a2.w)      * 
00000B18  6700 0042                695              beq BTST_FAIL               * branch if Z set
00000B1C  0F3B A0FE                696  op_BTST28:  btst.b d7 , op_BTST28(pc,a2.w)      * 
00000B20  6600 003A                697              bne BTST_FAIL               * branch if Z clear  
00000B24                           698              * EA = n(PC,A.L)  - BYTE only
00000B24  0B3B 98FE                699  op_BTST29:  btst.b d5 , op_BTST29(pc,a1.l)  
00000B28  6700 0032                700              beq BTST_FAIL               * branch if Z set
00000B2C  0D3B A8FE                701  op_BTST30:  btst.b d6 , op_BTST30(pc,a2.l)      * 
00000B30  6700 002A                702              beq BTST_FAIL               * branch if Z set
00000B34  0F3B A8FE                703  op_BTST31:  btst.b d7 , op_BTST31(pc,a2.l)      * 
00000B38  6600 0022                704  op_BTST32:  bne BTST_FAIL               * branch if Z clear  
00000B3C                           705   
00000B3C                           706              * EA = #x  - BYTE only
00000B3C                           707  
00000B3C  7A00                     708              move.l #0,  d5              * populate bit number to test
00000B3E  7C03                     709              move.l #3,  d6              * populate bit number to test
00000B40  7E07                     710              move.l #7,  d7              * populate bit number to test
00000B42                           711              
00000B42  0B3C 0088                712              btst.b d5 , #$88
00000B46  6600 0014                713              bne BTST_FAIL               * branch if Z clear  
00000B4A  0D3C 0088                714              btst.b d6 , #$88
00000B4E  6700 000C                715              beq BTST_FAIL               * branch if Z set
00000B52  0F3C 0088                716              btst.b d7 , #$88
00000B56  6700 0004                717              beq BTST_FAIL               * branch if Z set
00000B5A                           718              
00000B5A                           719  
00000B5A  4E75                     720      rts
00000B5C                           721      
00000B5C  60FE                     722  BTST_FAIL: bra BTST_FAIL
00000B5E                           723     
00000B5E                           724   
00000B5E                           725   
00000B5E                           726    
00000B5E                           727  *-----------------------------------------------------------
00000B5E                           728  *-----------------------------------------------------------
00000B5E                           729  * OPCODE : BCHG
00000B5E                           730  *-----------------------------------------------------------
00000B5E                           731  *-----------------------------------------------------------
00000B5E                           732  op_BCHG: 
00000B5E                           733  
00000B5E                           734  
00000B5E                           735  *  Bit Number Static 
00000B5E                           736      
00000B5E                           737              * EA = Dn  - LONG only
00000B5E  203C 80000001            738              move.l #$80000001 , d0      * populate test data
00000B64  0840 0000                739              bchg.l #0 , d0              
00000B68  6700 0484                740              beq BCHG_FAIL               * branch if Z set
00000B6C  0840 0001                741              bchg.l #1 , d0              * 
00000B70  6600 047C                742              bne BCHG_FAIL               * branch if Z clear  
00000B74  0840 001F                743              bchg.l #31 , d0             * 
00000B78  6700 0474                744              beq BCHG_FAIL               * branch if Z set
00000B7C  0C80 00000002            745              cmpi.l #$00000002 , d0
00000B82  6600 046A                746              bne BCHG_FAIL               * branch if Z clear  
00000B86                           747  
00000B86                           748              
00000B86                           749              * EA = (An)  - BYTE only
00000B86  207C 00000100            750              move.l #$00000100 , a0      * point to memory to address 0x100
00000B8C  10BC 0081                751              move.b #$81 , (a0)          * populate test data
00000B90  1210                     752              move.b (a0) , d1            * Check to see if data in memory is 0x81
00000B92  0850 0000                753              bchg.b #0 , (a0)            
00000B96  6700 0456                754              beq BCHG_FAIL               * branch if Z set
00000B9A  0850 0001                755              bchg.b #1 , (a0)            * 
00000B9E  6600 044E                756              bne BCHG_FAIL               * branch if Z clear  
00000BA2  0850 0007                757              bchg.b #7 , (a0)            * 
00000BA6  6700 0446                758              beq BCHG_FAIL               * branch if Z set
00000BAA  0C10 0002                759              cmpi.b #$02 , (a0)
00000BAE  6600 043E                760              bne BCHG_FAIL               * branch if Z clear  
00000BB2                           761              
00000BB2                           762              * EA = (An)+  - BYTE only
00000BB2  207C 00000100            763              move.l #$00000100 , a0      * point to memory to address 0x100 
00000BB8  10FC 0001                764              move.b #$01 , (a0)+         * populate test data
00000BBC  10FC 00FC                765              move.b #$FC , (a0)+         * populate test data
00000BC0  10FC 0080                766              move.b #$80 , (a0)+         * populate test data
00000BC4  207C 00000100            767              move.l #$00000100 , a0      * point to memory to address 0x100 
00000BCA  0858 0000                768              bchg.b #0 , (a0)+            
00000BCE  6700 041E                769              beq BCHG_FAIL               * branch if Z set
00000BD2  0858 0001                770              bchg.b #1 , (a0)+           * 
00000BD6  6600 0416                771              bne BCHG_FAIL               * branch if Z clear  
00000BDA  0858 0007                772              bchg.b #7 , (a0)+           * 
00000BDE  6700 040E                773              beq BCHG_FAIL               * branch if Z set
00000BE2  207C 00000100            774              move.l #$00000100 , a0      * point to memory to address 0x100 
00000BE8  0C18 0000                775              cmpi.b #$00 , (a0)+
00000BEC  6600 0400                776              bne BCHG_FAIL               * branch if Z clear  
00000BF0  0C18 00FE                777              cmpi.b #$FE , (a0)+
00000BF4  6600 03F8                778              bne BCHG_FAIL               * branch if Z clear  
00000BF8  0C18 0000                779              cmpi.b #$00 , (a0)+
00000BFC  6600 03F0                780              bne BCHG_FAIL               * branch if Z clear  
00000C00                           781          
00000C00                           782              * EA = -(An)  - BYTE only
00000C00  207C 00000100            783              move.l #$00000100 , a0      * point to memory to address
00000C06  10FC 0080                784              move.b #$80 , (a0)+         * populate test data
00000C0A  10FC 00FC                785              move.b #$FC , (a0)+         * populate test data
00000C0E  10FC 0001                786              move.b #$01 , (a0)+         * populate test data
00000C12  207C 00000103            787              move.l #$00000103 , a0      * point to memory to address 
00000C18  0860 0000                788              bchg.b #0 , -(a0)            
00000C1C  6700 03D0                789              beq BCHG_FAIL               * branch if Z set
00000C20  0860 0001                790              bchg.b #1 , -(a0)           * 
00000C24  6600 03C8                791              bne BCHG_FAIL               * branch if Z clear  
00000C28  0860 0007                792              bchg.b #7 , -(a0)           * 
00000C2C  6700 03C0                793              beq BCHG_FAIL               * branch if Z set
00000C30  207C 00000103            794              move.l #$00000103 , a0      * point to memory to address 0x100 
00000C36  0C20 0000                795              cmpi.b #$00 , -(a0)
00000C3A  6600 03B2                796              bne BCHG_FAIL               * branch if Z clear  
00000C3E  0C20 00FE                797              cmpi.b #$FE , -(a0)
00000C42  6600 03AA                798              bne BCHG_FAIL               * branch if Z clear  
00000C46  0C20 0000                799              cmpi.b #$00 , -(a0)
00000C4A  6600 03A2                800              bne BCHG_FAIL               * branch if Z clear  
00000C4E                           801          
00000C4E                           802          
00000C4E                           803              * EA = n(An)  - BYTE only
00000C4E  207C 00000100            804              move.l #$00000100 , a0      * point to memory to address
00000C54  10FC 0001                805              move.b #$01 , (a0)+         * populate test data
00000C58  10FC 00FC                806              move.b #$FC , (a0)+         * populate test data
00000C5C  10FC 0080                807              move.b #$80 , (a0)+         * populate test data
00000C60  207C 00000100            808              move.l #$00000100 , a0      * point to memory to address
00000C66  0868 0000 0000           809              bchg.b #0 , 0(a0)            
00000C6C  6700 0380                810              beq BCHG_FAIL               * branch if Z set
00000C70  0868 0001 0001           811              bchg.b #1 , 1(a0)           * 
00000C76  6600 0376                812              bne BCHG_FAIL               * branch if Z clear  
00000C7A  0868 0007 0002           813              bchg.b #7 , 2(a0)           * 
00000C80  6700 036C                814              beq BCHG_FAIL               * branch if Z set
00000C84  207C 00000100            815              move.l #$00000100 , a0      * point to memory to address 0x100 
00000C8A  0C18 0000                816              cmpi.b #$00 , (a0)+
00000C8E  6600 035E                817              bne BCHG_FAIL               * branch if Z clear  
00000C92  0C18 00FE                818              cmpi.b #$FE , (a0)+
00000C96  6600 0356                819              bne BCHG_FAIL               * branch if Z clear  
00000C9A  0C18 0000                820              cmpi.b #$00 , (a0)+
00000C9E  6600 034E                821              bne BCHG_FAIL               * branch if Z clear  
00000CA2                           822                  
00000CA2                           823                  
00000CA2                           824              * EA = n(An,D.W)  - BYTE only
00000CA2  207C 00000100            825              move.l #$00000100 , a0      * point to memory to address
00000CA8  227C 00000000            826              move.l #$00000000 , a1      * point to memory to address
00000CAE  247C 00000001            827              move.l #$00000001 , a2      * point to memory to address
00000CB4  7000                     828              move.l #$00000000 , d0      * point to memory to address
00000CB6  7201                     829              move.l #$00000001 , d1      * point to memory to address
00000CB8  0870 0000 0000           830              bchg.b #0 , 0(a0,d0.w)            
00000CBE  6600 032E                831              bne BCHG_FAIL               * branch if Z clear  
00000CC2  0870 0001 1000           832              bchg.b #1 , 0(a0,d1.w)      * 
00000CC8  6700 0324                833              beq BCHG_FAIL               * branch if Z set
00000CCC  0870 0007 1001           834              bchg.b #7 , 1(a0,d1.w)      * 
00000CD2  6600 031A                835              bne BCHG_FAIL               * branch if Z clear  
00000CD6                           836              * EA = n(An,D.L)  - BYTE only
00000CD6  0870 0000 0800           837              bchg.b #0 , 0(a0,d0.l)  
00000CDC  6700 0310                838              beq BCHG_FAIL               * branch if Z set
00000CE0  0870 0001 1800           839              bchg.b #1 , 0(a0,d1.l)      * 
00000CE6  6600 0306                840              bne BCHG_FAIL               * branch if Z clear  
00000CEA  0870 0007 1801           841              bchg.b #7 , 1(a0,d1.l)      * 
00000CF0  6700 02FC                842              beq BCHG_FAIL               * branch if Z set
00000CF4                           843              * EA = n(An,A.W)  - BYTE only
00000CF4  0870 0000 9000           844              bchg.b #0 , 0(a0,a1.w)            
00000CFA  6600 02F2                845              bne BCHG_FAIL               * branch if Z clear  
00000CFE  0870 0001 A000           846              bchg.b #1 , 0(a0,a2.w)      * 
00000D04  6700 02E8                847              beq BCHG_FAIL               * branch if Z set
00000D08  0870 0007 A001           848              bchg.b #7 , 1(a0,a2.w)      * 
00000D0E  6600 02DE                849              bne BCHG_FAIL               * branch if Z clear  
00000D12                           850              * EA = n(An,A.L)  - BYTE only
00000D12  0870 0000 9800           851              bchg.b #0 , 0(a0,a1.l)  
00000D18  6700 02D4                852              beq BCHG_FAIL               * branch if Z set
00000D1C  0870 0001 A800           853              bchg.b #1 , 0(a0,a2.l)      * 
00000D22  6600 02CA                854              bne BCHG_FAIL               * branch if Z clear  
00000D26  0870 0007 A801           855              bchg.b #7 , 1(a0,a2.l)      * 
00000D2C  6700 02C0                856              beq BCHG_FAIL               * branch if Z set
00000D30  207C 00000100            857              move.l #$00000100 , a0      * point to memory to address 0x100 
00000D36  0C18 0000                858              cmpi.b #$00 , (a0)+
00000D3A  6600 02B2                859              bne BCHG_FAIL               * branch if Z clear  
00000D3E  0C18 00FE                860              cmpi.b #$FE , (a0)+
00000D42  6600 02AA                861              bne BCHG_FAIL               * branch if Z clear  
00000D46  0C18 0000                862              cmpi.b #$00 , (a0)+
00000D4A  6600 02A2                863              bne BCHG_FAIL               * branch if Z clear  
00000D4E                           864      
00000D4E                           865          
00000D4E                           866              * EA = x.W  - BYTE only
00000D4E  0878 0000 0100           867              bchg.b #0 , $0100            
00000D54  6600 0298                868              bne BCHG_FAIL               * branch if Z clear  
00000D58  0878 0001 0101           869              bchg.b #1 , $0101           * 
00000D5E  6700 028E                870              beq BCHG_FAIL               * branch if Z set
00000D62  0878 0007 0102           871              bchg.b #7 , $0102           * 
00000D68  6600 0284                872              bne BCHG_FAIL               * branch if Z clear  
00000D6C  207C 00000100            873              move.l #$00000100 , a0      * point to memory to address 0x100 
00000D72  0C18 0001                874              cmpi.b #$01 , (a0)+
00000D76  6600 0276                875              bne BCHG_FAIL               * branch if Z clear  
00000D7A  0C18 00FC                876              cmpi.b #$FC , (a0)+
00000D7E  6600 026E                877              bne BCHG_FAIL               * branch if Z clear  
00000D82  0C18 0080                878              cmpi.b #$80 , (a0)+
00000D86  6600 0266                879              bne BCHG_FAIL               * branch if Z clear  
00000D8A                           880              
00000D8A                           881              * EA = x.L  - BYTE only
00000D8A  207C 000F0100            882              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000D90  10FC 0001                883              move.b #$01 , (a0)+         * populate test data
00000D94  10FC 00FC                884              move.b #$FC , (a0)+         * populate test data
00000D98  10FC 0080                885              move.b #$80 , (a0)+         * populate test data
00000D9C  0879 0000 000F0100       886              bchg.b #0 , $000F0100 
00000DA4  6700 0248                887              beq BCHG_FAIL               * branch if Z set
00000DA8  0879 0001 000F0101       888              bchg.b #1 , $000F0101       * 
00000DB0  6600 023C                889              bne BCHG_FAIL               * branch if Z clear  
00000DB4  0879 0007 000F0102       890              bchg.b #7 , $000F0102       * 
00000DBC  6700 0230                891              beq BCHG_FAIL               * branch if Z set
00000DC0  207C 00000100            892              move.l #$00000100 , a0      * point to memory to address 0x100 
00000DC6  0C18 0001                893              cmpi.b #$01 , (a0)+
00000DCA  6600 0222                894              bne BCHG_FAIL               * branch if Z clear  
00000DCE  0C18 00FC                895              cmpi.b #$FC , (a0)+
00000DD2  6600 021A                896              bne BCHG_FAIL               * branch if Z clear  
00000DD6  0C18 0080                897              cmpi.b #$80 , (a0)+
00000DDA  6600 0212                898              bne BCHG_FAIL               * branch if Z clear  
00000DDE                           899              
00000DDE                           900  
00000DDE                           901  * Bit Number Dynamic
00000DDE                           902      
00000DDE                           903              * EA = Dn  - LONG only
00000DDE  203C 80000001            904              move.l #$80000001 , d0      * populate test data
00000DE4  7A00                     905              move.l #0,  d5              * populate bit number to test
00000DE6  7C01                     906              move.l #1,  d6              * populate bit number to test
00000DE8  7E1F                     907              move.l #31, d7              * populate bit number to test
00000DEA                           908              
00000DEA  0B40                     909              bchg.l d5 , d0              
00000DEC  6700 0200                910              beq BCHG_FAIL               * branch if Z set
00000DF0  0D40                     911              bchg.l d6 , d0              * 
00000DF2  6600 01FA                912              bne BCHG_FAIL               * branch if Z clear  
00000DF6  0F40                     913              bchg.l d7 , d0             * 
00000DF8  6700 01F4                914              beq BCHG_FAIL               * branch if Z set
00000DFC  0C80 00000002            915              cmpi.l #$00000002 , d0
00000E02  6600 01EA                916              bne BCHG_FAIL               * branch if Z clear  
00000E06                           917  
00000E06                           918              
00000E06                           919              * EA = (An)  - BYTE only
00000E06  7A00                     920              move.l #0,  d5              * populate bit number to test
00000E08  7C01                     921              move.l #1,  d6              * populate bit number to test
00000E0A  7E07                     922              move.l #7,  d7              * populate bit number to test           
00000E0C  207C 00000100            923              move.l #$00000100 , a0      * point to memory to address 0x100
00000E12  10BC 0081                924              move.b #$81 , (a0)          * populate test data
00000E16  1210                     925              move.b (a0) , d1            * Check to see if data in memory is 0x81
00000E18  0B50                     926              bchg.b d5 , (a0)            
00000E1A  6700 01D2                927              beq BCHG_FAIL               * branch if Z set
00000E1E  0D50                     928              bchg.b d6 , (a0)            * 
00000E20  6600 01CC                929              bne BCHG_FAIL               * branch if Z clear  
00000E24  0F50                     930              bchg.b d7 , (a0)            * 
00000E26  6700 01C6                931              beq BCHG_FAIL               * branch if Z set
00000E2A  0C10 0002                932              cmpi.b #$02 , (a0)
00000E2E  6600 01BE                933              bne BCHG_FAIL               * branch if Z clear  
00000E32                           934              
00000E32                           935      
00000E32                           936              * EA = (An)+  - BYTE only
00000E32  207C 00000100            937              move.l #$00000100 , a0      * point to memory to address 0x100 
00000E38  10FC 0001                938              move.b #$01 , (a0)+         * populate test data
00000E3C  10FC 00FC                939              move.b #$FC , (a0)+         * populate test data
00000E40  10FC 0080                940              move.b #$80 , (a0)+         * populate test data
00000E44  207C 00000100            941              move.l #$00000100 , a0      * point to memory to address 0x100 
00000E4A  0B58                     942              bchg.b d5 , (a0)+            
00000E4C  6700 01A0                943              beq BCHG_FAIL               * branch if Z set
00000E50  0D58                     944              bchg.b d6 , (a0)+           * 
00000E52  6600 019A                945              bne BCHG_FAIL               * branch if Z clear  
00000E56  0F58                     946              bchg.b d7 , (a0)+           * 
00000E58  6700 0194                947              beq BCHG_FAIL               * branch if Z set
00000E5C  207C 00000100            948              move.l #$00000100 , a0      * point to memory to address 0x100 
00000E62  0C18 0000                949              cmpi.b #$00 , (a0)+
00000E66  6600 0186                950              bne BCHG_FAIL               * branch if Z clear  
00000E6A  0C18 00FE                951              cmpi.b #$FE , (a0)+
00000E6E  6600 017E                952              bne BCHG_FAIL               * branch if Z clear  
00000E72  0C18 0000                953              cmpi.b #$00 , (a0)+
00000E76  6600 0176                954              bne BCHG_FAIL               * branch if Z clear  
00000E7A                           955                  
00000E7A                           956              * EA = -(An)  - BYTE only
00000E7A  207C 00000100            957              move.l #$00000100 , a0      * point to memory to address
00000E80  10FC 0080                958              move.b #$80 , (a0)+         * populate test data
00000E84  10FC 00FC                959              move.b #$FC , (a0)+         * populate test data
00000E88  10FC 0001                960              move.b #$01 , (a0)+         * populate test data
00000E8C  207C 00000103            961              move.l #$00000103 , a0      * point to memory to address 
00000E92  0B60                     962              bchg.b d5 , -(a0)            
00000E94  6700 0158                963              beq BCHG_FAIL               * branch if Z set
00000E98  0D60                     964              bchg.b d6 , -(a0)           * 
00000E9A  6600 0152                965              bne BCHG_FAIL               * branch if Z clear  
00000E9E  0F60                     966              bchg.b d7 , -(a0)           * 
00000EA0  6700 014C                967              beq BCHG_FAIL               * branch if Z set
00000EA4  207C 00000103            968              move.l #$00000103 , a0      * point to memory to address 0x100 
00000EAA  0C20 0000                969              cmpi.b #$00 , -(a0)
00000EAE  6600 013E                970              bne BCHG_FAIL               * branch if Z clear  
00000EB2  0C20 00FE                971              cmpi.b #$FE , -(a0)
00000EB6  6600 0136                972              bne BCHG_FAIL               * branch if Z clear  
00000EBA  0C20 0000                973              cmpi.b #$00 , -(a0)
00000EBE  6600 012E                974              bne BCHG_FAIL               * branch if Z clear  
00000EC2                           975                  
00000EC2                           976              * EA = n(An)  - BYTE only
00000EC2  207C 00000100            977              move.l #$00000100 , a0      * point to memory to address
00000EC8  10FC 0001                978              move.b #$01 , (a0)+         * populate test data
00000ECC  10FC 00FC                979              move.b #$FC , (a0)+         * populate test data
00000ED0  10FC 0080                980              move.b #$80 , (a0)+         * populate test data
00000ED4  207C 00000100            981              move.l #$00000100 , a0      * point to memory to address
00000EDA  0B68 0000                982              bchg.b d5 , 0(a0)            
00000EDE  6700 010E                983              beq BCHG_FAIL               * branch if Z set
00000EE2  0D68 0001                984              bchg.b d6 , 1(a0)           * 
00000EE6  6600 0106                985              bne BCHG_FAIL               * branch if Z clear  
00000EEA  0F68 0002                986              bchg.b d7 , 2(a0)           * 
00000EEE  6700 00FE                987              beq BCHG_FAIL               * branch if Z set
00000EF2  207C 00000100            988              move.l #$00000100 , a0      * point to memory to address 0x100 
00000EF8  0C18 0000                989              cmpi.b #$00 , (a0)+
00000EFC  6600 00F0                990              bne BCHG_FAIL               * branch if Z clear  
00000F00  0C18 00FE                991              cmpi.b #$FE , (a0)+
00000F04  6600 00E8                992              bne BCHG_FAIL               * branch if Z clear  
00000F08  0C18 0000                993              cmpi.b #$00 , (a0)+
00000F0C  6600 00E0                994              bne BCHG_FAIL               * branch if Z clear  
00000F10                           995                  
00000F10                           996              * EA = n(An,R.W)  - BYTE only
00000F10  207C 00000100            997              move.l #$00000100 , a0      * point to memory to address
00000F16  227C 00000000            998              move.l #$00000000 , a1      * point to memory to address
00000F1C  247C 00000001            999              move.l #$00000001 , a2      * point to memory to address
00000F22  7000                    1000              move.l #$00000000 , d0      * point to memory to address
00000F24  7201                    1001              move.l #$00000001 , d1      * point to memory to address
00000F26  0B70 0000               1002              bchg.b d5 , 0(a0,d0.w)            
00000F2A  6600 00C2               1003              bne BCHG_FAIL               * branch if Z clear  
00000F2E  0D70 1000               1004              bchg.b d6 , 0(a0,d1.w)      * 
00000F32  6700 00BA               1005              beq BCHG_FAIL               * branch if Z set
00000F36  0F70 1001               1006              bchg.b d7 , 1(a0,d1.w)      * 
00000F3A  6600 00B2               1007              bne BCHG_FAIL               * branch if Z clear  
00000F3E                          1008              * EA = n(An,R.L)  - BYTE only
00000F3E  0B70 0800               1009              bchg.b d5 , 0(a0,d0.l)  
00000F42  6700 00AA               1010              beq BCHG_FAIL               * branch if Z set
00000F46  0D70 1800               1011              bchg.b d6 , 0(a0,d1.l)      * 
00000F4A  6600 00A2               1012              bne BCHG_FAIL               * branch if Z clear  
00000F4E  0F70 1801               1013              bchg.b d7 , 1(a0,d1.l)      * 
00000F52  6700 009A               1014              beq BCHG_FAIL               * branch if Z set
00000F56                          1015              * EA = n(An,A.W)  - BYTE only
00000F56  0B70 9000               1016              bchg.b d5 , 0(a0,a1.w)            
00000F5A  6600 0092               1017              bne BCHG_FAIL               * branch if Z clear  
00000F5E  0D70 A000               1018              bchg.b d6 , 0(a0,a2.w)      * 
00000F62  6700 008A               1019              beq BCHG_FAIL               * branch if Z set
00000F66  0F70 A001               1020              bchg.b d7 , 1(a0,a2.w)      * 
00000F6A  6600 0082               1021              bne BCHG_FAIL               * branch if Z clear  
00000F6E                          1022              * EA = n(An,A.L)  - BYTE only
00000F6E  0B70 9800               1023              bchg.b d5 , 0(a0,a1.l)  
00000F72  6700 007A               1024              beq BCHG_FAIL               * branch if Z set
00000F76  0D70 A800               1025              bchg.b d6 , 0(a0,a2.l)      * 
00000F7A  6600 0072               1026              bne BCHG_FAIL               * branch if Z clear  
00000F7E  0F70 A801               1027              bchg.b d7 , 1(a0,a2.l)      * 
00000F82  6700 006A               1028              beq BCHG_FAIL               * branch if Z set
00000F86  0C18 0000               1029              cmpi.b #$00 , (a0)+
00000F8A  6600 0062               1030              bne BCHG_FAIL               * branch if Z clear  
00000F8E                          1031              
00000F8E                          1032              * EA = x.W  - BYTE only
00000F8E  0B78 0100               1033              bchg.b d5 , $0100            
00000F92  6600 005A               1034              bne BCHG_FAIL               * branch if Z clear  
00000F96  0D78 0101               1035              bchg.b d6 , $0101           * 
00000F9A  6700 0052               1036              beq BCHG_FAIL               * branch if Z set
00000F9E  0F78 0102               1037              bchg.b d7 , $0102           * 
00000FA2  6600 004A               1038              bne BCHG_FAIL               * branch if Z clear  
00000FA6  0C18 00FC               1039              cmpi.b #$FC , (a0)+
00000FAA  6600 0042               1040              bne BCHG_FAIL               * branch if Z clear  
00000FAE                          1041                      
00000FAE                          1042              * EA = x.L  - BYTE only
00000FAE  207C 000F0100           1043              move.l #$000F0100 , a0      * point to memory to address 0x100 
00000FB4  10FC 0001               1044              move.b #$01 , (a0)+         * populate test data
00000FB8  10FC 00FC               1045              move.b #$FC , (a0)+         * populate test data
00000FBC  10FC 0080               1046              move.b #$80 , (a0)+         * populate test data
00000FC0  0B79 000F0100           1047              bchg.b d5 , $000F0100 
00000FC6  6700 0026               1048              beq BCHG_FAIL               * branch if Z set
00000FCA  0D79 000F0101           1049              bchg.b d6 , $000F0101       * 
00000FD0  6600 001C               1050              bne BCHG_FAIL               * branch if Z clear  
00000FD4  0F79 000F0102           1051              bchg.b d7 , $000F0102       * 
00000FDA  6700 0012               1052              beq BCHG_FAIL               * branch if Z set
00000FDE  207C 000F0101           1053              move.l #$000F0101 , a0      * point to memory to address 0x100 
00000FE4  0C10 00FE               1054              cmpi.b #$FE , (a0)
00000FE8  6600 0004               1055              bne BCHG_FAIL               * branch if Z clear  
00000FEC                          1056                      
00000FEC                          1057  
00000FEC  4E75                    1058      rts
00000FEE                          1059      
00000FEE  60FE                    1060  BCHG_FAIL: bra BCHG_FAIL
00000FF0                          1061  
00000FF0                          1062  
00000FF0                          1063  
00000FF0                          1064    
00000FF0                          1065  *-----------------------------------------------------------
00000FF0                          1066  *-----------------------------------------------------------
00000FF0                          1067  * OPCODE : BCLR
00000FF0                          1068  *-----------------------------------------------------------
00000FF0                          1069  *-----------------------------------------------------------
00000FF0                          1070  op_BCLR: 
00000FF0                          1071  
00000FF0                          1072  
00000FF0                          1073  *  Bit Number Static 
00000FF0                          1074      
00000FF0                          1075              * EA = Dn  - LONG only
00000FF0  203C FF0000FF           1076              move.l #$FF0000FF , d0      * populate test data
00000FF6  0880 0000               1077              bclr.l #0 , d0              
00000FFA  67FE                    1078              beq *               * branch if Z set
00000FFC  0880 0001               1079              bclr.l #1 , d0              * 
00001000  67FE                    1080              beq *               * branch if Z set
00001002  0880 000F               1081              bclr.l #15 , d0             * 
00001006  66FE                    1082              bne *               * branch if Z clear  
00001008  0880 001F               1083              bclr.l #31 , d0             * 
0000100C  67FE                    1084              beq *               * branch if Z set
0000100E  0C80 7F0000FC           1085              cmpi.l #$7F0000FC , d0
00001014  66FE                    1086              bne *               * branch if Z clear  
00001016                          1087  
00001016                          1088              
00001016                          1089              * EA = (An)  - BYTE only
00001016  207C 00000100           1090              move.l #$00000100 , a0      * point to memory to address 0x100
0000101C  10BC 000F               1091              move.b #$0F , (a0)          * populate test data
00001020  0890 0000               1092              bclr.b #0 , (a0)            
00001024  67FE                    1093              beq *               * branch if Z set
00001026  0890 0007               1094              bclr.b #7 , (a0)            * 
0000102A  66FE                    1095              bne *               * branch if Z clear  
0000102C  0C10 000E               1096              cmpi.b #$0E , (a0)
00001030  66FE                    1097              bne *               * branch if Z clear  
00001032                          1098              
00001032                          1099              * EA = (An)+  - BYTE only
00001032  207C 00000100           1100              move.l #$00000100 , a0      * point to memory to address 0x100 
00001038  10FC 0001               1101              move.b #$01 , (a0)+         * populate test data
0000103C  10FC 0000               1102              move.b #$00 , (a0)+         * populate test data
00001040  207C 00000100           1103              move.l #$00000100 , a0      * point to memory to address 0x100 
00001046  0898 0000               1104              bclr.b #0 , (a0)+            
0000104A  67FE                    1105              beq *               * branch if Z set
0000104C  0898 0001               1106              bclr.b #1 , (a0)+           * 
00001050  66FE                    1107              bne *               * branch if Z clear  
00001052  207C 00000100           1108              move.l #$00000100 , a0      * point to memory to address 0x100 
00001058  0C18 0000               1109              cmpi.b #$00 , (a0)+
0000105C  66FE                    1110              bne *               * branch if Z clear  
0000105E  0C18 0000               1111              cmpi.b #$00 , (a0)+
00001062  66FE                    1112              bne *               * branch if Z clear  
00001064                          1113   
00001064                          1114          
00001064                          1115              * EA = -(An)  - BYTE only
00001064  207C 00000100           1116              move.l #$00000100 , a0      * point to memory to address
0000106A  10FC 0001               1117              move.b #$01 , (a0)+         * populate test data
0000106E  10FC 0080               1118              move.b #$80 , (a0)+         * populate test data
00001072  08A0 0007               1119              bclr.b #7 , -(a0)            
00001076  67FE                    1120              beq *               * branch if Z set
00001078  08A0 0000               1121              bclr.b #0 , -(a0)           * 
0000107C  67FE                    1122              beq *               * branch if Z set
0000107E  207C 00000102           1123              move.l #$00000102 , a0      * point to memory to address 0x100 
00001084  0C20 0000               1124              cmpi.b #$00 , -(a0)
00001088  66FE                    1125              bne *               * branch if Z clear  
0000108A  0C20 0000               1126              cmpi.b #$00 , -(a0)
0000108E  66FE                    1127              bne *               * branch if Z clear  
00001090                          1128  
00001090                          1129          
00001090                          1130              * EA = n(An)  - BYTE only
00001090  207C 00000100           1131              move.l #$00000100 , a0      * point to memory to address
00001096  10FC 00FF               1132              move.b #$FF , (a0)+         * populate test data
0000109A  10FC 00FF               1133              move.b #$FF , (a0)+         * populate test data
0000109E  207C 00000100           1134              move.l #$00000100 , a0      * point to memory to address
000010A4  08A8 0000 0000          1135              bclr.b #0 , 0(a0)            
000010AA  67FE                    1136              beq *               * branch if Z set
000010AC  08A8 0004 0001          1137              bclr.b #4 , 1(a0)           * 
000010B2  67FE                    1138              beq *               * branch if Z set
000010B4  207C 00000100           1139              move.l #$00000100 , a0      * point to memory to address 0x100 
000010BA  0C18 00FE               1140              cmpi.b #$FE , (a0)+
000010BE  66FE                    1141              bne *               * branch if Z clear  
000010C0  0C18 00EF               1142              cmpi.b #$EF , (a0)+
000010C4  66FE                    1143              bne *               * branch if Z clear  
000010C6                          1144  
000010C6                          1145                  
000010C6                          1146              * EA = n(An,D.W)  - BYTE only
000010C6  207C 00000100           1147              move.l #$00000100 , a0      * point to memory to address
000010CC  227C 00000000           1148              move.l #$00000000 , a1      * point to memory to address
000010D2  247C 00000001           1149              move.l #$00000001 , a2      * point to memory to address
000010D8  7000                    1150              move.l #$00000000 , d0      * point to memory to address
000010DA  7201                    1151              move.l #$00000001 , d1      * point to memory to address
000010DC  10FC 00FF               1152              move.b #$FF , (a0)+         * populate test data
000010E0  10FC 00FF               1153              move.b #$FF , (a0)+         * populate test data
000010E4  207C 00000100           1154              move.l #$00000100 , a0      * point to memory to address
000010EA  08B0 0000 0000          1155              bclr.b #0 , 0(a0,d0.w)            
000010F0  67FE                    1156              beq *               * branch if Z set
000010F2  08B0 0001 1000          1157              bclr.b #1 , 0(a0,d1.w)      * 
000010F8  67FE                    1158              beq *               * branch if Z set
000010FA  08B0 0002 1001          1159              bclr.b #2 , 1(a0,d1.w)      * 
00001100  66FE                    1160              bne *               * branch if Z clear  
00001102                          1161              * EA = n(An,D.L)  - BYTE only
00001102  08B0 0003 0800          1162              bclr.b #3 , 0(a0,d0.l)  
00001108  67FE                    1163              beq *               * branch if Z set
0000110A  08B0 0004 1800          1164              bclr.b #4 , 0(a0,d1.l)      * 
00001110  67FE                    1165              beq *               * branch if Z set
00001112  08B0 0005 1801          1166              bclr.b #5 , 1(a0,d1.l)      * 
00001118  66FE                    1167              bne *               * branch if Z clear  
0000111A                          1168              * EA = n(An,A.W)  - BYTE only
0000111A  08B0 0006 9000          1169              bclr.b #6 , 0(a0,a1.w)            
00001120  67FE                    1170              beq *               * branch if Z set
00001122  08B0 0001 A000          1171              bclr.b #1 , 0(a0,a2.w)      * 
00001128  66FE                    1172              bne *               * branch if Z clear  
0000112A  08B0 0007 A001          1173              bclr.b #7 , 1(a0,a2.w)      * 
00001130  67FE                    1174              beq *               * branch if Z set
00001132                          1175              * EA = n(An,A.L)  - BYTE only
00001132  08B0 0000 9800          1176              bclr.b #0 , 0(a0,a1.l)  
00001138  66FE                    1177              bne *               * branch if Z clear  
0000113A  08B0 0000 A800          1178              bclr.b #0 , 0(a0,a2.l)      * 
00001140  67FE                    1179              beq *               * branch if Z set
00001142  08B0 0001 A801          1180              bclr.b #1 , 1(a0,a2.l)      * 
00001148  66FE                    1181              bne *               * branch if Z clear  
0000114A  207C 00000100           1182              move.l #$00000100 , a0      * point to memory to address 0x100 
00001150  0C18 00B6               1183              cmpi.b #$B6 , (a0)+
00001154  66FE                    1184              bne *               * branch if Z clear  
00001156  0C18 00EC               1185              cmpi.b #$EC , (a0)+
0000115A  66FE                    1186              bne *               * branch if Z clear  
0000115C  0C18 0059               1187              cmpi.b #$59 , (a0)+
00001160  67FE                    1188              beq *               * branch if Z set
00001162                          1189      
00001162                          1190          
00001162                          1191              * EA = x.W  - BYTE only
00001162  207C 00000100           1192              move.l #$00000100 , a0      * point to memory to address
00001168  10FC 00FF               1193              move.b #$FF , (a0)+         * populate test data
0000116C  08B8 0000 0100          1194              bclr.b #0 , $0100            
00001172  67FE                    1195              beq *               * branch if Z set
00001174  08B8 0001 0100          1196              bclr.b #1 , $0100           * 
0000117A  67FE                    1197              beq *               * branch if Z set
0000117C  207C 00000100           1198              move.l #$00000100 , a0      * point to memory to address 0x100 
00001182  0C18 00FC               1199              cmpi.b #$FC , (a0)+
00001186  66FE                    1200              bne *               * branch if Z clear  
00001188                          1201  
00001188                          1202              
00001188                          1203              * EA = x.L  - BYTE only
00001188  207C 000F0100           1204              move.l #$000F0100 , a0      * point to memory to address 0x100 
0000118E  10BC 00FF               1205              move.b #$FF , (a0)          * populate test data
00001192  08B9 0000 000F0100      1206              bclr.b #0 , $000F0100 
0000119A  67FE                    1207              beq *               * branch if Z set
0000119C  08B9 0001 000F0100      1208              bclr.b #1 , $000F0100       * 
000011A4  67FE                    1209              beq *               * branch if Z set
000011A6  08B9 0002 000F0100      1210              bclr.b #2 , $000F0100       * 
000011AE  67FE                    1211              beq *               * branch if Z set
000011B0  207C 000F0100           1212              move.l #$000F0100 , a0      * point to memory to address 0x100 
000011B6  0C18 00F8               1213              cmpi.b #$F8 , (a0)+
000011BA  66FE                    1214              bne *               * branch if Z clear  
000011BC                          1215  
000011BC                          1216  
000011BC                          1217  * Bit Number Dynamic
000011BC                          1218      
000011BC                          1219              * EA = Dn  - LONG only
000011BC  203C FF00FF00           1220              move.l #$FF00FF00 , d0      * populate test data
000011C2  7A00                    1221              move.l #0,  d5              * populate bit number to test
000011C4  7C01                    1222              move.l #1,  d6              * populate bit number to test
000011C6  7E1F                    1223              move.l #31, d7              * populate bit number to test
000011C8                          1224              
000011C8  0B80                    1225              bclr.l d5 , d0              
000011CA  66FE                    1226              bne *               * branch if Z clear  
000011CC  0D80                    1227              bclr.l d6 , d0              * 
000011CE  66FE                    1228              bne *               * branch if Z clear  
000011D0  0F80                    1229              bclr.l d7 , d0             * 
000011D2  67FE                    1230              beq *               * branch if Z set
000011D4  0C80 7F00FF00           1231              cmpi.l #$7F00FF00 , d0
000011DA  66FE                    1232              bne *               * branch if Z clear  
000011DC                          1233  
000011DC                          1234              
000011DC                          1235              * EA = (An)  - BYTE only
000011DC  7A00                    1236              move.l #0,  d5              * populate bit number to test
000011DE  7C01                    1237              move.l #1,  d6              * populate bit number to test
000011E0  7E07                    1238              move.l #7,  d7              * populate bit number to test           
000011E2  207C 00000100           1239              move.l #$00000100 , a0      * point to memory to address 0x100
000011E8  10BC 0081               1240              move.b #$81 , (a0)          * populate test data
000011EC  0B90                    1241              bclr.b d5 , (a0)            
000011EE  67FE                    1242              beq *               * branch if Z set
000011F0  0D90                    1243              bclr.b d6 , (a0)            * 
000011F2  66FE                    1244              bne *               * branch if Z clear  
000011F4  0F90                    1245              bclr.b d7 , (a0)            * 
000011F6  67FE                    1246              beq *               * branch if Z set
000011F8  0C10 0000               1247              cmpi.b #$00 , (a0)
000011FC  66FE                    1248              bne *               * branch if Z clear  
000011FE                          1249              
000011FE                          1250      
000011FE                          1251              * EA = (An)+  - BYTE only
000011FE  207C 00000100           1252              move.l #$00000100 , a0      * point to memory to address 0x100 
00001204  10FC 0001               1253              move.b #$01 , (a0)+         * populate test data
00001208  10FC 00FC               1254              move.b #$FC , (a0)+         * populate test data
0000120C  10FC 0080               1255              move.b #$80 , (a0)+         * populate test data
00001210  207C 00000100           1256              move.l #$00000100 , a0      * point to memory to address 0x100 
00001216  0B98                    1257              bclr.b d5 , (a0)+            
00001218  67FE                    1258              beq *               * branch if Z set
0000121A  0D98                    1259              bclr.b d6 , (a0)+           * 
0000121C  66FE                    1260              bne *               * branch if Z clear  
0000121E  0F98                    1261              bclr.b d7 , (a0)+           * 
00001220  67FE                    1262              beq *               * branch if Z set
00001222  207C 00000100           1263              move.l #$00000100 , a0      * point to memory to address 0x100 
00001228  0C18 0000               1264              cmpi.b #$00 , (a0)+
0000122C  66FE                    1265              bne *               * branch if Z clear  
0000122E  0C18 00FC               1266              cmpi.b #$FC , (a0)+
00001232  66FE                    1267              bne *               * branch if Z clear  
00001234  0C18 0000               1268              cmpi.b #$00 , (a0)+
00001238  66FE                    1269              bne *               * branch if Z clear  
0000123A                          1270                  
0000123A                          1271              * EA = -(An)  - BYTE only
0000123A  207C 00000100           1272              move.l #$00000100 , a0      * point to memory to address
00001240  10FC 0080               1273              move.b #$80 , (a0)+         * populate test data
00001244  10FC 00FC               1274              move.b #$FC , (a0)+         * populate test data
00001248  10FC 0001               1275              move.b #$01 , (a0)+         * populate test data
0000124C  207C 00000103           1276              move.l #$00000103 , a0      * point to memory to address 
00001252  0BA0                    1277              bclr.b d5 , -(a0)            
00001254  67FE                    1278              beq *               * branch if Z set
00001256  0DA0                    1279              bclr.b d6 , -(a0)           * 
00001258  66FE                    1280              bne *               * branch if Z clear  
0000125A  0FA0                    1281              bclr.b d7 , -(a0)           * 
0000125C  67FE                    1282              beq *               * branch if Z set
0000125E  207C 00000103           1283              move.l #$00000103 , a0      * point to memory to address 0x100 
00001264  0C20 0000               1284              cmpi.b #$00 , -(a0)
00001268  66FE                    1285              bne *               * branch if Z clear  
0000126A  0C20 00FC               1286              cmpi.b #$FC , -(a0)
0000126E  66FE                    1287              bne *               * branch if Z clear  
00001270  0C20 0000               1288              cmpi.b #$00 , -(a0)
00001274  66FE                    1289              bne *               * branch if Z clear  
00001276                          1290                  
00001276                          1291              * EA = n(An)  - BYTE only
00001276  207C 00000100           1292              move.l #$00000100 , a0      * point to memory to address
0000127C  10FC 0001               1293              move.b #$01 , (a0)+         * populate test data
00001280  10FC 00FC               1294              move.b #$FC , (a0)+         * populate test data
00001284  10FC 0080               1295              move.b #$80 , (a0)+         * populate test data
00001288  207C 00000100           1296              move.l #$00000100 , a0      * point to memory to address
0000128E  0BA8 0000               1297              bclr.b d5 , 0(a0)            
00001292  67FE                    1298              beq *               * branch if Z set
00001294  0DA8 0001               1299              bclr.b d6 , 1(a0)           * 
00001298  66FE                    1300              bne *               * branch if Z clear  
0000129A  0FA8 0002               1301              bclr.b d7 , 2(a0)           * 
0000129E  67FE                    1302              beq *               * branch if Z set
000012A0  207C 00000100           1303              move.l #$00000100 , a0      * point to memory to address 0x100 
000012A6  0C18 0000               1304              cmpi.b #$00 , (a0)+
000012AA  66FE                    1305              bne *               * branch if Z clear  
000012AC  0C18 00FC               1306              cmpi.b #$FC , (a0)+
000012B0  66FE                    1307              bne *               * branch if Z clear  
000012B2  0C18 0000               1308              cmpi.b #$00 , (a0)+
000012B6  66FE                    1309              bne *               * branch if Z clear  
000012B8                          1310                  
000012B8                          1311              * EA = n(An,R.W)  - BYTE only
000012B8  207C 00000100           1312              move.l #$00000100 , a0      * point to memory to address
000012BE  10FC 00FF               1313              move.b #$FF , (a0)+         * populate test data
000012C2  10FC 00FF               1314              move.b #$FF , (a0)+         * populate test data
000012C6  10FC 00FF               1315              move.b #$FF , (a0)+         * populate test data
000012CA  207C 00000103           1316              move.l #$00000103 , a0      * point to memory to address 
000012D0  207C 00000100           1317              move.l #$00000100 , a0      * point to memory to address
000012D6  227C 00000000           1318              move.l #$00000000 , a1      * point to memory to address
000012DC  247C 00000001           1319              move.l #$00000001 , a2      * point to memory to address
000012E2  7000                    1320              move.l #$00000000 , d0      * point to memory to address
000012E4  7201                    1321              move.l #$00000001 , d1      * point to memory to address
000012E6  0BB0 0000               1322              bclr.b d5 , 0(a0,d0.w)            
000012EA  67FE                    1323              beq *               * branch if Z set
000012EC  0DB0 1000               1324              bclr.b d6 , 0(a0,d1.w)      * 
000012F0  67FE                    1325              beq *               * branch if Z set
000012F2  0FB0 1001               1326              bclr.b d7 , 1(a0,d1.w)      * 
000012F6  67FE                    1327              beq *               * branch if Z set
000012F8                          1328              * EA = n(An,R.L)  - BYTE only
000012F8  0BB0 0800               1329              bclr.b d5 , 0(a0,d0.l)  
000012FC  66FE                    1330              bne *               * branch if Z clear  
000012FE  0DB0 1800               1331              bclr.b d6 , 0(a0,d1.l)      * 
00001302  66FE                    1332              bne *               * branch if Z clear  
00001304  0FB0 1801               1333              bclr.b d7 , 1(a0,d1.l)      * 
00001308  66FE                    1334              bne *               * branch if Z clear  
0000130A                          1335              * EA = n(An,A.W)  - BYTE only
0000130A  0BB0 9000               1336              bclr.b d5 , 0(a0,a1.w)            
0000130E  66FE                    1337              bne *               * branch if Z clear  
00001310  0DB0 A000               1338              bclr.b d6 , 0(a0,a2.w)      * 
00001314  66FE                    1339              bne *               * branch if Z clear  
00001316  0FB0 A001               1340              bclr.b d7 , 1(a0,a2.w)      * 
0000131A  66FE                    1341              bne *               * branch if Z clear  
0000131C                          1342              * EA = n(An,A.L)  - BYTE only
0000131C  0BB0 9800               1343              bclr.b d5 , 0(a0,a1.l)  
00001320  66FE                    1344              bne *               * branch if Z clear  
00001322  0DB0 A800               1345              bclr.b d6 , 0(a0,a2.l)      * 
00001326  66FE                    1346              bne *               * branch if Z clear  
00001328  0FB0 A801               1347              bclr.b d7 , 1(a0,a2.l)      * 
0000132C  66FE                    1348              bne *               * branch if Z clear  
0000132E  207C 00000100           1349              move.l #$00000100 , a0      * point to memory to address 
00001334  0C10 00FE               1350              cmpi.b #$FE , (a0)
00001338  66FE                    1351              bne *               * branch if Z clear  
0000133A                          1352              
0000133A                          1353              * EA = x.W  - BYTE only
0000133A  207C 00000100           1354              move.l #$00000100 , a0      * point to memory to address
00001340  10FC 00FF               1355              move.b #$FF , (a0)+         * populate test data
00001344  10FC 00FF               1356              move.b #$FF , (a0)+         * populate test data
00001348  10FC 00FF               1357              move.b #$FF , (a0)+         * populate test data
0000134C  0BB8 0100               1358              bclr.b d5 , $0100            
00001350  67FE                    1359              beq *               * branch if Z set
00001352  0DB8 0101               1360              bclr.b d6 , $0101           * 
00001356  67FE                    1361              beq *               * branch if Z set
00001358  0FB8 0102               1362              bclr.b d7 , $0102           * 
0000135C  67FE                    1363              beq *               * branch if Z set
0000135E  207C 00000100           1364              move.l #$00000100 , a0      * point to memory to address
00001364  0C18 00FE               1365              cmpi.b #$FE , (a0)+
00001368  66FE                    1366              bne *               * branch if Z clear  
0000136A                          1367                      
0000136A                          1368              * EA = x.L  - BYTE only
0000136A  207C 000F0100           1369              move.l #$000F0100 , a0      * point to memory to address 0x100 
00001370  10FC 0001               1370              move.b #$01 , (a0)+         * populate test data
00001374  10FC 00FC               1371              move.b #$FC , (a0)+         * populate test data
00001378  10FC 0080               1372              move.b #$80 , (a0)+         * populate test data
0000137C  0BB9 000F0100           1373              bclr.b d5 , $000F0100 
00001382  67FE                    1374              beq *               * branch if Z set
00001384  0DB9 000F0101           1375              bclr.b d6 , $000F0101       * 
0000138A  66FE                    1376              bne *               * branch if Z clear  
0000138C  0FB9 000F0102           1377              bclr.b d7 , $000F0102       * 
00001392  67FE                    1378              beq *               * branch if Z set
00001394  207C 000F0101           1379              move.l #$000F0101 , a0      * point to memory to address 0x100 
0000139A  0C10 00FC               1380              cmpi.b #$FC , (a0)
0000139E  66FE                    1381              bne *               * branch if Z clear  
000013A0                          1382                      
000013A0                          1383  
000013A0                          1384  
000013A0  4E75                    1385      rts
000013A2                          1386      
000013A2                          1387  
000013A2                          1388  
000013A2                          1389  
000013A2                          1390  
000013A2                          1391    
000013A2                          1392  *-----------------------------------------------------------
000013A2                          1393  *-----------------------------------------------------------
000013A2                          1394  * OPCODE : BSET
000013A2                          1395  *-----------------------------------------------------------
000013A2                          1396  *-----------------------------------------------------------
000013A2                          1397  op_BSET: 
000013A2                          1398  
000013A2                          1399  
000013A2                          1400  *  Bit Number Static 
000013A2                          1401      
000013A2                          1402              * EA = Dn  - LONG only
000013A2  7000                    1403              move.l #$00000000 , d0      * populate test data
000013A4  08C0 0000               1404              bset.l #0 , d0              
000013A8  6600 0492               1405              bne BSET_FAIL               * branch if Z clear  
000013AC  08C0 0001               1406              bset.l #1 , d0              * 
000013B0  6600 048A               1407              bne BSET_FAIL               * branch if Z clear  
000013B4  08C0 000F               1408              bset.l #15 , d0             * 
000013B8  6600 0482               1409              bne BSET_FAIL               * branch if Z clear  
000013BC  08C0 001F               1410              bset.l #31 , d0             * 
000013C0  6600 047A               1411              bne BSET_FAIL               * branch if Z clear  
000013C4  0C80 80008003           1412              cmpi.l #$80008003 , d0
000013CA  6600 0470               1413              bne BSET_FAIL               * branch if Z clear  
000013CE                          1414  
000013CE                          1415              
000013CE                          1416              * EA = (An)  - BYTE only
000013CE  207C 00000100           1417              move.l #$00000100 , a0      * point to memory to address 0x100
000013D4  10BC 0000               1418              move.b #$00 , (a0)          * populate test data
000013D8  08D0 0000               1419              bset.b #0 , (a0)            
000013DC  6600 045E               1420              bne BSET_FAIL               * branch if Z clear  
000013E0  08D0 0007               1421              bset.b #7 , (a0)            * 
000013E4  6600 0456               1422              bne BSET_FAIL               * branch if Z clear  
000013E8  0C10 0081               1423              cmpi.b #$81 , (a0)
000013EC  6600 044E               1424              bne BSET_FAIL               * branch if Z clear  
000013F0                          1425              
000013F0                          1426              * EA = (An)+  - BYTE only
000013F0  207C 00000100           1427              move.l #$00000100 , a0      * point to memory to address 0x100 
000013F6  10FC 0000               1428              move.b #$00 , (a0)+         * populate test data
000013FA  10FC 0000               1429              move.b #$00 , (a0)+         * populate test data
000013FE  207C 00000100           1430              move.l #$00000100 , a0      * point to memory to address 0x100 
00001404  08D8 0000               1431              bset.b #0 , (a0)+            
00001408  6600 0432               1432              bne BSET_FAIL               * branch if Z clear  
0000140C  08D8 0001               1433              bset.b #1 , (a0)+           * 
00001410  6600 042A               1434              bne BSET_FAIL               * branch if Z clear  
00001414  207C 00000100           1435              move.l #$00000100 , a0      * point to memory to address 0x100 
0000141A  0C18 0001               1436              cmpi.b #$01 , (a0)+
0000141E  6600 041C               1437              bne BSET_FAIL               * branch if Z clear  
00001422  0C18 0002               1438              cmpi.b #$02 , (a0)+
00001426  6600 0414               1439              bne BSET_FAIL               * branch if Z clear  
0000142A                          1440   
0000142A                          1441          
0000142A                          1442              * EA = -(An)  - BYTE only
0000142A  207C 00000100           1443              move.l #$00000100 , a0      * point to memory to address
00001430  10FC 0000               1444              move.b #$00 , (a0)+         * populate test data
00001434  10FC 0000               1445              move.b #$00 , (a0)+         * populate test data
00001438  08E0 0007               1446              bset.b #7 , -(a0)            
0000143C  6600 03FE               1447              bne BSET_FAIL               * branch if Z clear  
00001440  08E0 0000               1448              bset.b #0 , -(a0)           * 
00001444  6600 03F6               1449              bne BSET_FAIL               * branch if Z clear  
00001448  207C 00000102           1450              move.l #$00000102 , a0      * point to memory to address 0x100 
0000144E  0C20 0080               1451              cmpi.b #$80 , -(a0)
00001452  6600 03E8               1452              bne BSET_FAIL               * branch if Z clear  
00001456  0C20 0001               1453              cmpi.b #$01 , -(a0)
0000145A  6600 03E0               1454              bne BSET_FAIL               * branch if Z clear  
0000145E                          1455  
0000145E                          1456          
0000145E                          1457              * EA = n(An)  - BYTE only
0000145E  207C 00000100           1458              move.l #$00000100 , a0      * point to memory to address
00001464  10FC 0000               1459              move.b #$00 , (a0)+         * populate test data
00001468  10FC 0000               1460              move.b #$00 , (a0)+         * populate test data
0000146C  207C 00000100           1461              move.l #$00000100 , a0      * point to memory to address
00001472  08E8 0000 0000          1462              bset.b #0 , 0(a0)            
00001478  6600 03C2               1463              bne BSET_FAIL               * branch if Z clear  
0000147C  08E8 0004 0001          1464              bset.b #4 , 1(a0)           * 
00001482  6600 03B8               1465              bne BSET_FAIL               * branch if Z clear  
00001486  207C 00000100           1466              move.l #$00000100 , a0      * point to memory to address 0x100 
0000148C  0C18 0001               1467              cmpi.b #$01 , (a0)+
00001490  6600 03AA               1468              bne BSET_FAIL               * branch if Z clear  
00001494  0C18 0010               1469              cmpi.b #$10 , (a0)+
00001498  6600 03A2               1470              bne BSET_FAIL               * branch if Z clear  
0000149C                          1471  
0000149C                          1472                  
0000149C                          1473              * EA = n(An,D.W)  - BYTE only
0000149C  207C 00000100           1474              move.l #$00000100 , a0      * point to memory to address
000014A2  227C 00000000           1475              move.l #$00000000 , a1      * point to memory to address
000014A8  247C 00000004           1476              move.l #$00000004 , a2      * point to memory to address
000014AE  7000                    1477              move.l #$00000000 , d0      * point to memory to address
000014B0  7201                    1478              move.l #$00000001 , d1      * point to memory to address
000014B2  10FC 0000               1479              move.b #$00 , (a0)+         * populate test data
000014B6  10FC 0000               1480              move.b #$00 , (a0)+         * populate test data
000014BA  10FC 0000               1481              move.b #$00 , (a0)+         * populate test data
000014BE  10FC 0000               1482              move.b #$00 , (a0)+         * populate test data
000014C2  10FC 0000               1483              move.b #$00 , (a0)+         * populate test data
000014C6  10FC 0000               1484              move.b #$00 , (a0)+         * populate test data
000014CA  10FC 0000               1485              move.b #$00 , (a0)+         * populate test data
000014CE  10FC 0000               1486              move.b #$00 , (a0)+         * populate test data
000014D2  10FC 0000               1487              move.b #$00 , (a0)+         * populate test data
000014D6  10FC 0000               1488              move.b #$00 , (a0)+         * populate test data
000014DA  207C 00000100           1489              move.l #$00000100 , a0      * point to memory to address
000014E0  08F0 0000 0000          1490              bset.b #0 , 0(a0,d0.w)            
000014E6  6600 0354               1491              bne BSET_FAIL               * branch if Z clear  
000014EA  08F0 0001 1000          1492              bset.b #1 , 0(a0,d1.w)      * 
000014F0  6600 034A               1493              bne BSET_FAIL               * branch if Z clear  
000014F4  08F0 0002 1001          1494              bset.b #2 , 1(a0,d1.w)      * 
000014FA  6600 0340               1495              bne BSET_FAIL               * branch if Z clear  
000014FE                          1496              * EA = n(An,D.L)  - BYTE only
000014FE  08F0 0003 0802          1497              bset.b #3 , 2(a0,d0.l)  
00001504  6600 0336               1498              bne BSET_FAIL               * branch if Z clear  
00001508  08F0 0004 1800          1499              bset.b #4 , 0(a0,d1.l)      * 
0000150E  6600 032C               1500              bne BSET_FAIL               * branch if Z clear  
00001512  08F0 0005 1801          1501              bset.b #5 , 1(a0,d1.l)      * 
00001518  6600 0322               1502              bne BSET_FAIL               * branch if Z clear  
0000151C                          1503              * EA = n(An,A.W)  - BYTE only
0000151C  08F0 0006 9000          1504              bset.b #6 , 0(a0,a1.w)            
00001522  6600 0318               1505              bne BSET_FAIL               * branch if Z clear  
00001526  08F0 0001 A000          1506              bset.b #1 , 0(a0,a2.w)      * 
0000152C  6600 030E               1507              bne BSET_FAIL               * branch if Z clear  
00001530  08F0 0007 A001          1508              bset.b #7 , 1(a0,a2.w)      * 
00001536  6600 0304               1509              bne BSET_FAIL               * branch if Z clear  
0000153A                          1510              * EA = n(An,A.L)  - BYTE only
0000153A  08F0 0000 A802          1511              bset.b #0 , 2(a0,a2.l)  
00001540  6600 02FA               1512              bne BSET_FAIL               * branch if Z clear  
00001544  08F0 0000 A803          1513              bset.b #0 , 3(a0,a2.l)      * 
0000154A  6600 02F0               1514              bne BSET_FAIL               * branch if Z clear  
0000154E  08F0 0001 A804          1515              bset.b #1 , 4(a0,a2.l)      * 
00001554  6600 02E6               1516              bne BSET_FAIL               * branch if Z clear  
00001558  207C 00000100           1517              move.l #$00000100 , a0      * point to memory to address 0x100 
0000155E  0C98 41122C00           1518              cmpi.l #$41122C00 , (a0)+
00001564  6600 02D6               1519              bne BSET_FAIL               * branch if Z clear  
00001568  0C98 02800101           1520              cmpi.l #$02800101 , (a0)+
0000156E  66FE                    1521              bne *
00001570                          1522   
00001570                          1523  
00001570                          1524          
00001570                          1525              * EA = x.W  - BYTE only
00001570  207C 00000100           1526              move.l #$00000100 , a0      * point to memory to address
00001576  10FC 0000               1527              move.b #$00 , (a0)+         * populate test data
0000157A  08F8 0000 0100          1528              bset.b #0 , $0100            
00001580  6600 02BA               1529              bne BSET_FAIL               * branch if Z clear  
00001584  08F8 0001 0100          1530              bset.b #1 , $0100           * 
0000158A  6600 02B0               1531              bne BSET_FAIL               * branch if Z clear  
0000158E  207C 00000100           1532              move.l #$00000100 , a0      * point to memory to address 0x100 
00001594  0C18 0003               1533              cmpi.b #$03 , (a0)+
00001598  66FE                    1534              bne *
0000159A                          1535  
0000159A                          1536              
0000159A                          1537              * EA = x.L  - BYTE only
0000159A  207C 000F0100           1538              move.l #$000F0100 , a0      * point to memory to address 0x100 
000015A0  10BC 0000               1539              move.b #$00 , (a0)          * populate test data
000015A4  08F9 0000 000F0100      1540              bset.b #0 , $000F0100 
000015AC  6600 028E               1541              bne BSET_FAIL               * branch if Z clear  
000015B0  08F9 0001 000F0100      1542              bset.b #1 , $000F0100       * 
000015B8  6600 0282               1543              bne BSET_FAIL               * branch if Z clear  
000015BC  08F9 0002 000F0100      1544              bset.b #2 , $000F0100       * 
000015C4  6600 0276               1545              bne BSET_FAIL               * branch if Z clear  
000015C8  207C 000F0100           1546              move.l #$000F0100 , a0      * point to memory to address 0x100 
000015CE  0C18 0007               1547              cmpi.b #$07 , (a0)+
000015D2  66FE                    1548              bne *
000015D4                          1549  
000015D4                          1550  
000015D4                          1551  * Bit Number Dynamic
000015D4                          1552      
000015D4                          1553              * EA = Dn  - LONG only
000015D4  7000                    1554              move.l #$00000000 , d0      * populate test data
000015D6  7A00                    1555              move.l #0,  d5              * populate bit number to test
000015D8  7C01                    1556              move.l #1,  d6              * populate bit number to test
000015DA  7E1F                    1557              move.l #31, d7              * populate bit number to test
000015DC                          1558              
000015DC  0BC0                    1559              bset.l d5 , d0              
000015DE  6600 025C               1560              bne BSET_FAIL               * branch if Z clear  
000015E2  0DC0                    1561              bset.l d6 , d0              * 
000015E4  6600 0256               1562              bne BSET_FAIL               * branch if Z clear  
000015E8  0FC0                    1563              bset.l d7 , d0             * 
000015EA  6600 0250               1564              bne BSET_FAIL               * branch if Z clear  
000015EE  0C80 80000003           1565              cmpi.l #$80000003 , d0
000015F4  6600 0246               1566              bne BSET_FAIL               * branch if Z clear  
000015F8                          1567  
000015F8                          1568              
000015F8                          1569              * EA = (An)  - BYTE only
000015F8  7A00                    1570              move.l #0,  d5              * populate bit number to test
000015FA  7C01                    1571              move.l #1,  d6              * populate bit number to test
000015FC  7E07                    1572              move.l #7,  d7              * populate bit number to test           
000015FE  207C 00000100           1573              move.l #$00000100 , a0      * point to memory to address 0x100
00001604  10BC 0000               1574              move.b #$00 , (a0)          * populate test data
00001608  0BD0                    1575              bset.b d5 , (a0)            
0000160A  6600 0230               1576              bne BSET_FAIL               * branch if Z clear  
0000160E  0DD0                    1577              bset.b d6 , (a0)            * 
00001610  6600 022A               1578              bne BSET_FAIL               * branch if Z clear  
00001614  0FD0                    1579              bset.b d7 , (a0)            * 
00001616  6600 0224               1580              bne BSET_FAIL               * branch if Z clear  
0000161A  0C10 0083               1581              cmpi.b #$83 , (a0)
0000161E  6600 021C               1582              bne BSET_FAIL               * branch if Z clear  
00001622                          1583              
00001622                          1584      
00001622                          1585              * EA = (An)+  - BYTE only
00001622  207C 00000100           1586              move.l #$00000100 , a0      * point to memory to address 0x100 
00001628  10FC 0000               1587              move.b #$00 , (a0)+         * populate test data
0000162C  10FC 0000               1588              move.b #$00 , (a0)+         * populate test data
00001630  10FC 0000               1589              move.b #$00 , (a0)+         * populate test data
00001634  207C 00000100           1590              move.l #$00000100 , a0      * point to memory to address 0x100 
0000163A  0BD8                    1591              bset.b d5 , (a0)+            
0000163C  6600 01FE               1592              bne BSET_FAIL               * branch if Z clear  
00001640  0DD8                    1593              bset.b d6 , (a0)+           * 
00001642  6600 01F8               1594              bne BSET_FAIL               * branch if Z clear  
00001646  0FD8                    1595              bset.b d7 , (a0)+           * 
00001648  6600 01F2               1596              bne BSET_FAIL               * branch if Z clear  
0000164C  207C 00000100           1597              move.l #$00000100 , a0      * point to memory to address 0x100 
00001652  0C18 0001               1598              cmpi.b #$01 , (a0)+
00001656  6600 01E4               1599              bne BSET_FAIL               * branch if Z clear  
0000165A  0C18 0002               1600              cmpi.b #$02 , (a0)+
0000165E  6600 01DC               1601              bne BSET_FAIL               * branch if Z clear  
00001662  0C18 0080               1602              cmpi.b #$80 , (a0)+
00001666  6600 01D4               1603              bne BSET_FAIL               * branch if Z clear  
0000166A                          1604                  
0000166A                          1605              * EA = -(An)  - BYTE only
0000166A  207C 00000100           1606              move.l #$00000100 , a0      * point to memory to address
00001670  10FC 0000               1607              move.b #$00 , (a0)+         * populate test data
00001674  10FC 0000               1608              move.b #$00 , (a0)+         * populate test data
00001678  10FC 0000               1609              move.b #$00 , (a0)+         * populate test data
0000167C  207C 00000103           1610              move.l #$00000103 , a0      * point to memory to address 
00001682  0BE0                    1611              bset.b d5 , -(a0)            
00001684  6600 01B6               1612              bne BSET_FAIL               * branch if Z clear  
00001688  0DE0                    1613              bset.b d6 , -(a0)           * 
0000168A  6600 01B0               1614              bne BSET_FAIL               * branch if Z clear  
0000168E  0FE0                    1615              bset.b d7 , -(a0)           * 
00001690  6600 01AA               1616              bne BSET_FAIL               * branch if Z clear  
00001694  207C 00000103           1617              move.l #$00000103 , a0      * point to memory to address 0x100 
0000169A  0C20 0001               1618              cmpi.b #$01 , -(a0)
0000169E  6600 019C               1619              bne BSET_FAIL               * branch if Z clear  
000016A2  0C20 0002               1620              cmpi.b #$02 , -(a0)
000016A6  6600 0194               1621              bne BSET_FAIL               * branch if Z clear  
000016AA  0C20 0080               1622              cmpi.b #$80 , -(a0)
000016AE  6600 018C               1623              bne BSET_FAIL               * branch if Z clear  
000016B2                          1624                  
000016B2                          1625              * EA = n(An)  - BYTE only
000016B2  207C 00000100           1626              move.l #$00000100 , a0      * point to memory to address
000016B8  10FC 0000               1627              move.b #$00 , (a0)+         * populate test data
000016BC  10FC 0000               1628              move.b #$00 , (a0)+         * populate test data
000016C0  10FC 0000               1629              move.b #$00 , (a0)+         * populate test data
000016C4  207C 00000100           1630              move.l #$00000100 , a0      * point to memory to address
000016CA  0BE8 0000               1631              bset.b d5 , 0(a0)            
000016CE  6600 016C               1632              bne BSET_FAIL               * branch if Z clear  
000016D2  0DE8 0001               1633              bset.b d6 , 1(a0)           * 
000016D6  6600 0164               1634              bne BSET_FAIL               * branch if Z clear  
000016DA  0FE8 0002               1635              bset.b d7 , 2(a0)           * 
000016DE  6600 015C               1636              bne BSET_FAIL               * branch if Z clear  
000016E2  207C 00000100           1637              move.l #$00000100 , a0      * point to memory to address 0x100 
000016E8  0C18 0001               1638              cmpi.b #$01 , (a0)+
000016EC  6600 014E               1639              bne BSET_FAIL               * branch if Z clear  
000016F0  0C18 0002               1640              cmpi.b #$02 , (a0)+
000016F4  6600 0146               1641              bne BSET_FAIL               * branch if Z clear  
000016F8  0C18 0080               1642              cmpi.b #$80 , (a0)+
000016FC  6600 013E               1643              bne BSET_FAIL               * branch if Z clear  
00001700                          1644                  
00001700                          1645              * EA = n(An,R.W)  - BYTE only
00001700  207C 00000100           1646              move.l #$00000100 , a0      * point to memory to address
00001706  10FC 0000               1647              move.b #$00 , (a0)+         * populate test data
0000170A  10FC 0000               1648              move.b #$00 , (a0)+         * populate test data
0000170E  10FC 0000               1649              move.b #$00 , (a0)+         * populate test data
00001712  10FC 0000               1650              move.b #$00 , (a0)+         * populate test data
00001716  10FC 0000               1651              move.b #$00 , (a0)+         * populate test data
0000171A  10FC 0000               1652              move.b #$00 , (a0)+         * populate test data
0000171E  10FC 0000               1653              move.b #$00 , (a0)+         * populate test data
00001722  10FC 0000               1654              move.b #$00 , (a0)+         * populate test data
00001726  10FC 0000               1655              move.b #$00 , (a0)+         * populate test data
0000172A  10FC 0000               1656              move.b #$00 , (a0)+         * populate test data
0000172E  10FC 0000               1657              move.b #$00 , (a0)+         * populate test data
00001732  10FC 0000               1658              move.b #$00 , (a0)+         * populate test data
00001736  207C 00000100           1659              move.l #$00000100 , a0      * point to memory to address
0000173C  227C 00000000           1660              move.l #$00000000 , a1      * point to memory to address
00001742  247C 00000001           1661              move.l #$00000001 , a2      * point to memory to address
00001748  7000                    1662              move.l #$00000000 , d0      * point to memory to address
0000174A  7201                    1663              move.l #$00000001 , d1      * point to memory to address
0000174C  0BF0 0000               1664              bset.b d5 , 0(a0,d0.w)            
00001750  6600 00EA               1665              bne BSET_FAIL               * branch if Z clear  
00001754  0DF0 1000               1666              bset.b d6 , 0(a0,d1.w)      * 
00001758  6600 00E2               1667              bne BSET_FAIL               * branch if Z clear  
0000175C  0FF0 1001               1668              bset.b d7 , 1(a0,d1.w)      * 
00001760  6600 00DA               1669              bne BSET_FAIL               * branch if Z clear  
00001764                          1670              * EA = n(An,R.L)  - BYTE only
00001764  0BF0 0802               1671              bset.b d5 , 2(a0,d0.l)  
00001768  6600 00D2               1672              bne BSET_FAIL               * branch if Z clear  
0000176C  0DF0 1803               1673              bset.b d6 , 3(a0,d1.l)      * 
00001770  6600 00CA               1674              bne BSET_FAIL               * branch if Z clear  
00001774  0FF0 1804               1675              bset.b d7 , 4(a0,d1.l)      * 
00001778  6600 00C2               1676              bne BSET_FAIL               * branch if Z clear  
0000177C                          1677              * EA = n(An,A.W)  - BYTE only
0000177C  0BF0 9005               1678              bset.b d5 , 5(a0,a1.w)            
00001780  6600 00BA               1679              bne BSET_FAIL               * branch if Z clear  
00001784  0DF0 A006               1680              bset.b d6 , 6(a0,a2.w)      * 
00001788  6600 00B2               1681              bne BSET_FAIL               * branch if Z clear  
0000178C  0FF0 A007               1682              bset.b d7 , 7(a0,a2.w)      * 
00001790  6600 00AA               1683              bne BSET_FAIL               * branch if Z clear  
00001794                          1684              * EA = n(An,A.L)  - BYTE only
00001794  0BF0 9808               1685              bset.b d5 , 8(a0,a1.l)  
00001798  6600 00A2               1686              bne BSET_FAIL               * branch if Z clear  
0000179C  0DF0 A809               1687              bset.b d6 , 9(a0,a2.l)      * 
000017A0  6600 009A               1688              bne BSET_FAIL               * branch if Z clear  
000017A4  0FF0 A80A               1689              bset.b d7 , 10(a0,a2.l)      * 
000017A8  6600 0092               1690              bne BSET_FAIL               * branch if Z clear  
000017AC  207C 00000100           1691              move.l #$00000100 , a0      * point to memory to address 0x100 
000017B2  0C98 01028100           1692              cmpi.l #$01028100 , (a0)+
000017B8  6600 0082               1693              bne BSET_FAIL               * branch if Z clear  
000017BC  0C98 02810002           1694              cmpi.l #$02810002 , (a0)+
000017C2  66FE                    1695              bne *
000017C4                          1696   
000017C4                          1697              
000017C4                          1698              * EA = x.W  - BYTE only
000017C4  207C 00000100           1699              move.l #$00000100 , a0      * point to memory to address
000017CA  10FC 0000               1700              move.b #$00 , (a0)+         * populate test data
000017CE  10FC 0000               1701              move.b #$00 , (a0)+         * populate test data
000017D2  10FC 0000               1702              move.b #$00 , (a0)+         * populate test data
000017D6  0BF8 0100               1703              bset.b d5 , $0100            
000017DA  6600 0060               1704              bne BSET_FAIL               * branch if Z clear  
000017DE  0DF8 0100               1705              bset.b d6 , $0100           * 
000017E2  6600 0058               1706              bne BSET_FAIL               * branch if Z clear  
000017E6  0FF8 0100               1707              bset.b d7 , $0100           * 
000017EA  6600 0050               1708              bne BSET_FAIL               * branch if Z clear  
000017EE  207C 00000100           1709              move.l #$00000100 , a0      * point to memory to address
000017F4  0C18 0083               1710              cmpi.b #$83 , (a0)+
000017F8  6600 0042               1711              bne BSET_FAIL               * branch if Z clear  
000017FC                          1712                      
000017FC                          1713              * EA = x.L  - BYTE only
000017FC  207C 000F0100           1714              move.l #$000F0100 , a0      * point to memory to address 0x100 
00001802  10FC 0000               1715              move.b #$00 , (a0)+         * populate test data
00001806  10FC 0000               1716              move.b #$00 , (a0)+         * populate test data
0000180A  10FC 0000               1717              move.b #$00 , (a0)+         * populate test data
0000180E  0BF9 000F0100           1718              bset.b d5 , $000F0100 
00001814  6600 0026               1719              bne BSET_FAIL               * branch if Z clear  
00001818  0DF9 000F0100           1720              bset.b d6 , $000F0100       * 
0000181E  6600 001C               1721              bne BSET_FAIL               * branch if Z clear  
00001822  0FF9 000F0100           1722              bset.b d7 , $000F0100       * 
00001828  6600 0012               1723              bne BSET_FAIL               * branch if Z clear  
0000182C  207C 000F0100           1724              move.l #$000F0100 , a0      * point to memory to address 0x100 
00001832  0C10 0083               1725              cmpi.b #$83 , (a0)
00001836  6600 0004               1726              bne BSET_FAIL               * branch if Z clear  
0000183A                          1727                      
0000183A                          1728  
0000183A  4E75                    1729      rts
0000183C                          1730      
0000183C  60FE                    1731  BSET_FAIL: bra BSET_FAIL
0000183E                          1732  
0000183E                          1733  
0000183E                          1734  *-----------------------------------------------------------
0000183E                          1735  *-----------------------------------------------------------
0000183E                          1736  * OPCODE : MOVEP
0000183E                          1737  *-----------------------------------------------------------
0000183E                          1738  *-----------------------------------------------------------
0000183E                          1739  op_MOVEP: 
0000183E                          1740  
0000183E                          1741  * Dn --> x(An)
0000183E  207C 00000100           1742              move.l #$00000100 , a0  
00001844  203C 12345678           1743              move.l #$12345678 , d0  
0000184A  223C AABBCCDD           1744              move.l #$AABBCCDD , d1  
00001850  20BC 00000000           1745              move.l #0 , (a0)
00001856  217C 00000000 0004      1746              move.l #0 , 4(a0)
0000185E                          1747              
0000185E  0188 0000               1748              movep.w d0 , 0(a0)      * even offset   
00001862  0388 0001               1749              movep.w d1 , 1(a0)      * odd offset
00001866                          1750              
00001866  01C8 0004               1751              movep.l d0 , 4(a0)      * even offset   
0000186A  03C8 0005               1752              movep.l d1 , 5(a0)      * odd offset
0000186E                          1753              
0000186E  0C90 56CC78DD           1754              cmpi.l #$56CC78DD , (a0)
00001874  66FE                    1755              bne *
00001876  0CA8 12AA34BB 0004      1756              cmpi.l #$12AA34BB , 4(a0)
0000187E  66FE                    1757              bne *
00001880  0CA8 56CC78DD 0008      1758              cmpi.l #$56CC78DD , 8(a0)
00001888  66FE                    1759              bne *
0000188A                          1760              
0000188A                          1761              
0000188A                          1762  * x(An)--> Dn
0000188A  203C 5A5A5A5A           1763              move.l #$5a5a5a5a , d0  
00001890  223C 5A5A5A5A           1764              move.l #$5a5a5a5a , d1  
00001896  243C 5A5A5A5A           1765              move.l #$5a5a5a5a , d2  
0000189C  263C 5A5A5A5A           1766              move.l #$5a5a5a5a , d3  
000018A2                          1767              
000018A2  0108 0000               1768              movep.w 0(a0) , d0      * even offset   
000018A6  0308 0001               1769              movep.w 1(a0) , d1      * odd offset
000018AA                          1770              
000018AA  0548 0004               1771              movep.l 4(a0) , d2      * even offset   
000018AE  0748 0005               1772              movep.l 5(a0) , d3      * odd offset
000018B2                          1773              
000018B2  0C80 5A5A5678           1774              cmpi.l #$5a5a5678 , d0
000018B8  66FE                    1775              bne *
000018BA  0C81 5A5ACCDD           1776              cmpi.l #$5a5aCCDD , d1
000018C0  66FE                    1777              bne *
000018C2  0C82 12345678           1778              cmpi.l #$12345678 , d2
000018C8  66FE                    1779              bne *
000018CA  0C83 AABBCCDD           1780              cmpi.l #$AABBCCDD , d3
000018D0  66FE                    1781              bne *
000018D2                          1782      
000018D2  4E75                    1783              rts
000018D4                          1784       
000018D4                          1785      
000018D4                          1786  
000018D4                          1787  *-----------------------------------------------------------
000018D4                          1788  *-----------------------------------------------------------
000018D4                          1789  * OPCODE : BOOL_I
000018D4                          1790  *-----------------------------------------------------------
000018D4                          1791  *-----------------------------------------------------------
000018D4                          1792  op_BOOL_I: 
000018D4                          1793          
000018D4                          1794      * Dn -- BYTE
000018D4  203C 12345678           1795              move.l #$12345678 , d0  
000018DA  44FC 000F               1796              move.w #$000F, CCR          * pre-set Flags
000018DE  0000 00FF               1797              ori.b  #$FF , d0
000018E2  0A00 005A               1798              eori.b #$5A , d0
000018E6  C03C 00F0               1799              and.b  #$F0 , d0
000018EA  69FE                    1800              bvs *                       * Check V,C are cleared
000018EC  65FE                    1801              bcs *
000018EE  6AFE                    1802              bpl *                       * Verify if N flag is set
000018F0  C03C 0000               1803              and.b  #$00 , d0
000018F4  6BFE                    1804              bmi *                       * Verify if N flag is cleared
000018F6  66FE                    1805              bne *                       * Verify if Z flag is set
000018F8                          1806  
000018F8                          1807      * Dn -- WORD
000018F8  223C 12345678           1808              move.l #$12345678 , d1  
000018FE  44FC 000F               1809              move.w #$000F, CCR          * pre-set Flags
00001902  0041 FFFF               1810              ori.w  #$FFFF , d1
00001906  0A41 5A5A               1811              eori.w #$5A5A , d1
0000190A  C27C F0F0               1812              and.w  #$F0F0 , d1
0000190E  69FE                    1813              bvs *                       * Check V,C are cleared
00001910  65FE                    1814              bcs *
00001912  6AFE                    1815              bpl *                       * Verify if N flag is set
00001914  C27C 0000               1816              and.w  #$0000 , d1
00001918  6BFE                    1817              bmi *                       * Verify if N flag is cleared
0000191A  66FE                    1818              bne *                       * Verify if Z flag is set
0000191C                          1819  
0000191C                          1820      * Dn -- LONG
0000191C  243C 12345678           1821              move.l #$12345678 , d2  
00001922  44FC 000F               1822              move.w #$000F, CCR          * pre-set Flags
00001926  0082 FFFFFFFF           1823              ori.l  #$FFFFFFFF , d2
0000192C  0A82 5A5A5A5A           1824              eori.l #$5A5A5A5A , d2
00001932  C4BC F0F0F0F0           1825              and.l  #$F0F0F0F0 , d2
00001938  69FE                    1826              bvs *                       * Check V,C are cleared
0000193A  65FE                    1827              bcs *
0000193C  6AFE                    1828              bpl *                       * Verify if N flag is set
0000193E  C4BC 00000000           1829              and.l  #$00000000 , d2
00001944  6BFE                    1830              bmi *                       * Verify if N flag is cleared
00001946  66FE                    1831              bne *                       * Verify if Z flag is set
00001948                          1832  
00001948                          1833      
00001948                          1834      * (An) -- BYTE
00001948  207C 00000100           1835              move.l #$00000100 , a0  
0000194E  20BC 12345678           1836              move.l #$12345678 , (a0)  
00001954  44FC 000F               1837              move.w #$000F, CCR          * pre-set Flags
00001958  0010 00FF               1838              ori.b  #$FF , (a0)
0000195C  0A10 005A               1839              eori.b #$5A , (a0)
00001960  0210 00F0               1840              and.b  #$F0 , (a0)
00001964  69FE                    1841              bvs *                       * Check V,C are cleared
00001966  65FE                    1842              bcs *
00001968  6AFE                    1843              bpl *                       * Verify if N flag is set
0000196A  0210 0000               1844              and.b  #$00 , (a0)
0000196E  6BFE                    1845              bmi *                       * Verify if N flag is cleared
00001970  66FE                    1846              bne *                       * Verify if Z flag is set
00001972  0C10 0000               1847              cmpi.b #$00 , (a0)
00001976  66FE                    1848              bne *                       * Verify if Z flag is set
00001978                          1849              
00001978                          1850      * (An) -- WORD
00001978  20BC 12345678           1851              move.l #$12345678 , (a0)  
0000197E  44FC 000F               1852              move.w #$000F, CCR          * pre-set Flags
00001982  0050 FFFF               1853              ori.w  #$FFFF , (a0)
00001986  0A50 5A5A               1854              eori.w #$5A5A , (a0)
0000198A  0250 F0F0               1855              and.w  #$F0F0 , (a0)
0000198E  69FE                    1856              bvs *                       * Check V,C are cleared
00001990  65FE                    1857              bcs *
00001992  6AFE                    1858              bpl *                       * Verify if N flag is set
00001994  0250 0000               1859              and.w  #$0000 , (a0)
00001998  6BFE                    1860              bmi *                       * Verify if N flag is cleared
0000199A  66FE                    1861              bne *                       * Verify if Z flag is set
0000199C  0C50 0000               1862              cmpi.w #$00 , (a0)
000019A0  66FE                    1863              bne *                       * Verify if Z flag is set
000019A2                          1864              
000019A2                          1865      * (An) -- LONG
000019A2  20BC 12345678           1866              move.l #$12345678 , (a0)  
000019A8  44FC 000F               1867              move.w #$000F, CCR          * pre-set Flags
000019AC  0090 FFFFFFFF           1868              ori.l  #$FFFFFFFF , (a0)
000019B2  0A90 5A5A5A5A           1869              eori.l #$5A5A5A5A , (a0)
000019B8  0290 F0F0F0F0           1870              and.l  #$F0F0F0F0 , (a0)
000019BE  69FE                    1871              bvs *                       * Check V,C are cleared
000019C0  65FE                    1872              bcs *
000019C2  6AFE                    1873              bpl *                       * Verify if N flag is set
000019C4  0290 00000000           1874              and.l  #$00000000 , (a0)
000019CA  6BFE                    1875              bmi *                       * Verify if N flag is cleared
000019CC  66FE                    1876              bne *                       * Verify if Z flag is set
000019CE  0C90 00000000           1877              cmpi.l #$00 , (a0)
000019D4  66FE                    1878              bne *                       * Verify if Z flag is set
000019D6                          1879              
000019D6                          1880  
000019D6                          1881  
000019D6                          1882      * (An)+ -- BYTE
000019D6  207C 00000100           1883              move.l #$00000100 , a0  
000019DC  20BC 00A5FF88           1884              move.l #$00A5FF88 , (a0)  
000019E2  44FC 000F               1885              move.w #$000F, CCR          * pre-set Flags
000019E6                          1886              
000019E6  0018 00F5               1887              ori.b  #$F5 , (a0)+
000019EA  6AFE                    1888              bpl *                       * Verify if N flag is set
000019EC  67FE                    1889              beq *                       * Verify if Z flag is cleared
000019EE                          1890              
000019EE  0A18 00FF               1891              eori.b #$FF , (a0)+
000019F2  6BFE                    1892              bmi *                       * Verify if N flag is cleared
000019F4  67FE                    1893              beq *                       * Verify if Z flag is cleared
000019F6                          1894              
000019F6  0218 00AA               1895              and.b  #$AA , (a0)+
000019FA  6AFE                    1896              bpl *                       * Verify if N flag is set
000019FC  67FE                    1897              beq *                       * Verify if Z flag is cleared
000019FE                          1898              
000019FE  207C 00000100           1899              move.l #$00000100 , a0  
00001A04  0C90 F55AAA88           1900              cmpi.l #$F55AAA88 , (a0)
00001A0A  66FE                    1901              bne *                       * Verify if Z flag is set
00001A0C                          1902              
00001A0C                          1903              
00001A0C                          1904      * (An)+ -- WORD
00001A0C  207C 00000100           1905              move.l #$00000100 , a0  
00001A12  227C 00000104           1906              move.l #$00000104 , a1  
00001A18  20BC 00005A5A           1907              move.l #$00005a5a , (a0)  
00001A1E  22BC 12345678           1908              move.l #$12345678 , (a1)  
00001A24  44FC 000F               1909              move.w #$000F, CCR          * pre-set Flags
00001A28                          1910              
00001A28  0058 5678               1911              ori.w  #$5678 , (a0)+
00001A2C  6BFE                    1912              bmi *                       * Verify if N flag is cleared
00001A2E  67FE                    1913              beq *                       * Verify if Z flag is cleared
00001A30                          1914              
00001A30  0A58 FFFF               1915              eori.w #$FFFF , (a0)+
00001A34  6AFE                    1916              bpl *                       * Verify if N flag is set
00001A36  67FE                    1917              beq *                       * Verify if Z flag is cleared
00001A38                          1918              
00001A38  0258 A55A               1919              and.w  #$A55A , (a0)+
00001A3C  6BFE                    1920              bmi *                       * Verify if N flag is cleared
00001A3E  67FE                    1921              beq *                       * Verify if Z flag is cleared
00001A40                          1922              
00001A40  207C 00000100           1923              move.l #$00000100 , a0  
00001A46  0C90 5678A5A5           1924              cmpi.l #$5678a5a5 , (a0)
00001A4C  207C 00000104           1925              move.l #$00000104 , a0  
00001A52  0C90 00105678           1926              cmpi.l #$00105678 , (a0)
00001A58  66FE                    1927              bne *                       * Verify if Z flag is set
00001A5A                          1928              
00001A5A                          1929      * (An)+ -- LONG
00001A5A  207C 00000100           1930              move.l #$00000100 , a0  
00001A60  20FC 00000000           1931              move.l #$00000000 , (a0)+  
00001A66  20FC 5A5A5A5A           1932              move.l #$5a5a5a5a , (a0)+  
00001A6C  20FC FFFFFFFF           1933              move.l #$FFFFFFFF , (a0)+  
00001A72  207C 00000100           1934              move.l #$00000100 , a0  
00001A78  44FC 000F               1935              move.w #$000F, CCR          * pre-set Flags
00001A7C                          1936              
00001A7C  0098 12345678           1937              ori.l  #$12345678 , (a0)+
00001A82  6BFE                    1938              bmi *                       * Verify if N flag is cleared
00001A84  67FE                    1939              beq *                       * Verify if Z flag is cleared
00001A86                          1940              
00001A86  0A98 FFFFFFFF           1941              eori.l #$FFFFFFFF , (a0)+
00001A8C  6AFE                    1942              bpl *                       * Verify if N flag is set
00001A8E  67FE                    1943              beq *                       * Verify if Z flag is cleared
00001A90                          1944              
00001A90  0298 A5A5A55A           1945              and.l  #$A5A5A55A , (a0)+
00001A96  6AFE                    1946              bpl *                       * Verify if N flag is set
00001A98  67FE                    1947              beq *                       * Verify if Z flag is cleared
00001A9A                          1948              
00001A9A  207C 00000100           1949              move.l #$00000100 , a0  
00001AA0  0C98 12345678           1950              cmpi.l #$12345678 , (a0)+
00001AA6  0C98 A5A5A5A5           1951              cmpi.l #$a5a5a5a5 , (a0)+
00001AAC  0C98 A5A5A55A           1952              cmpi.l #$a5a5a55a , (a0)+
00001AB2  66FE                    1953              bne *                       * Verify if Z flag is set
00001AB4                          1954              
00001AB4  4E75                    1955              rts
00001AB6                          1956  
00001AB6                          1957  
00001AB6                          1958  *-----------------------------------------------------------
00001AB6                          1959  *-----------------------------------------------------------
00001AB6                          1960  * OPCODE : BSR
00001AB6                          1961  *-----------------------------------------------------------
00001AB6                          1962  *-----------------------------------------------------------
00001AB6                          1963  
00001AB6                          1964       
00001AB6  223C 11111111           1965  BSR_CLOSE1:     move.l #$11111111 , d1
00001ABC  4E75                    1966                  rts
00001ABE                          1967   
00001ABE                          1968  
00001ABE                          1969  
00001ABE  61F6                    1970  op_BSR:         bsr.s BSR_CLOSE1        * Negative 8-bit displacement
00001AC0  612A                    1971                  bsr.s BSR_CLOSE2        * Positive 8-bit displacement
00001AC2  6100 EA98               1972                  bsr.w BSR_FAR1          * Negative 16-bit displacement
00001AC6  6100 155E               1973                  bsr.w BSR_FAR2          * Positive 16-bit displacement
00001ACA                          1974                  
00001ACA  0C81 11111111           1975                  cmpi.l #$11111111 , d1
00001AD0  66FE                    1976                  bne *
00001AD2  0C82 22222222           1977                  cmpi.l #$22222222 , d2
00001AD8  66FE                    1978                  bne *
00001ADA  0C83 33333333           1979                  cmpi.l #$33333333 , d3
00001AE0  66FE                    1980                  bne *
00001AE2  0C84 44444444           1981                  cmpi.l #$44444444 , d4
00001AE8  66FE                    1982                  bne *
00001AEA                          1983                     
00001AEA  4E75                    1984                  rts   
00001AEC                          1985                  
00001AEC                          1986                  
00001AEC  243C 22222222           1987  BSR_CLOSE2:     move.l #$22222222 , d2
00001AF2  4E75                    1988                  rts
00001AF4                          1989  
00001AF4                          1990  *-----------------------------------------------------------
00001AF4                          1991  *-----------------------------------------------------------
00001AF4                          1992  * OPCODE : op_CMP_I
00001AF4                          1993  *-----------------------------------------------------------
00001AF4                          1994  *-----------------------------------------------------------
00001AF4                          1995  op_CMP_I: 
00001AF4                          1996  
00001AF4  207C 00000100           1997              move.l #$00000100 , a0 
00001AFA  20BC 00000100           1998              move.l #$00000100 , (a0) 
00001B00                          1999   
00001B00                          2000      * REGISTER - BYTE
00001B00  7080                    2001              move.l #$FFFFFF80 , d0  
00001B02  0C00 0080               2002              cmpi.b #$80 , d0
00001B06  66FE                    2003              bne *                       * Check Z Flag  beq/bne
00001B08  6BFE                    2004              bmi *                       * Check N Flag  bmi/bpl
00001B0A  65FE                    2005              bcs *                       * Check C Flag  bcc/bcs
00001B0C  69FE                    2006              bvs *                       * Check V Flag  bvc/bvs
00001B0E                          2007              
00001B0E  223C FFFFF000           2008              move.l #$FFFFF000 , d1  
00001B14  0C01 0000               2009              cmpi.b #$00 , d1
00001B18  66FE                    2010              bne *                       * Check Z Flag  beq/bne
00001B1A  6BFE                    2011              bmi *                       * Check N Flag  bmi/bpl
00001B1C  65FE                    2012              bcs *                       * Check C Flag  bcc/bcs
00001B1E  69FE                    2013              bvs *                       * Check V Flag  bvc/bvs
00001B20                          2014              
00001B20  243C FFFFFF02           2015              move.l #$FFFFFF02 , d2  
00001B26  0C02 00FF               2016              cmpi.b #$FF , d2
00001B2A  67FE                    2017              beq *                       * Check Z Flag  beq/bne
00001B2C  6BFE                    2018              bmi *                       * Check N Flag  bmi/bpl
00001B2E  64FE                    2019              bcc *                       * Check C Flag  bcc/bcs
00001B30  69FE                    2020              bvs *                       * Check V Flag  bvc/bvs
00001B32                          2021                  
00001B32  263C FFFFFF7F           2022              move.l #$FFFFFF7F , d3  
00001B38  0C03 00FF               2023              cmpi.b #$FF , d3
00001B3C  67FE                    2024              beq *                       * Check Z Flag  beq/bne
00001B3E  6AFE                    2025              bpl *                       * Check N Flag  bmi/bpl
00001B40  64FE                    2026              bcc *                       * Check C Flag  bcc/bcs
00001B42  68FE                    2027              bvc *                       * Check V Flag  bvc/bvs
00001B44                          2028           
00001B44                          2029           
00001B44                          2030      * REGISTER - WORD
00001B44  203C FFFF8000           2031              move.l #$FFFF8000 , d0  
00001B4A  0C40 8000               2032              cmpi.w #$8000 , d0
00001B4E  66FE                    2033              bne *                       * Check Z Flag  beq/bne
00001B50  6BFE                    2034              bmi *                       * Check N Flag  bmi/bpl
00001B52  65FE                    2035              bcs *                       * Check C Flag  bcc/bcs
00001B54  69FE                    2036              bvs *                       * Check V Flag  bvc/bvs
00001B56                          2037              
00001B56  223C FFF00000           2038              move.l #$FFF00000 , d1  
00001B5C  0C41 0000               2039              cmpi.w #$0000 , d1
00001B60  66FE                    2040              bne *                       * Check Z Flag  beq/bne
00001B62  6BFE                    2041              bmi *                       * Check N Flag  bmi/bpl
00001B64  65FE                    2042              bcs *                       * Check C Flag  bcc/bcs
00001B66  69FE                    2043              bvs *                       * Check V Flag  bvc/bvs
00001B68                          2044              
00001B68  243C FFFF0002           2045              move.l #$FFFF0002 , d2  
00001B6E  0C42 FFFF               2046              cmpi.w #$FFFF , d2
00001B72  67FE                    2047              beq *                       * Check Z Flag  beq/bne
00001B74  6BFE                    2048              bmi *                       * Check N Flag  bmi/bpl
00001B76  64FE                    2049              bcc *                       * Check C Flag  bcc/bcs
00001B78  69FE                    2050              bvs *                       * Check V Flag  bvc/bvs
00001B7A                          2051                  
00001B7A  263C FFFF7FFF           2052              move.l #$FFFF7FFF , d3  
00001B80  0C43 FFFF               2053              cmpi.w #$FFFF , d3
00001B84  67FE                    2054              beq *                       * Check Z Flag  beq/bne
00001B86  6AFE                    2055              bpl *                       * Check N Flag  bmi/bpl
00001B88  64FE                    2056              bcc *                       * Check C Flag  bcc/bcs
00001B8A  68FE                    2057              bvc *                       * Check V Flag  bvc/bvs
00001B8C                          2058              
00001B8C                          2059      * REGISTER - LONG
00001B8C  203C 80000000           2060              move.l #$80000000 , d0  
00001B92  0C80 80000000           2061              cmpi.l #$80000000 , d0
00001B98  66FE                    2062              bne *                       * Check Z Flag  beq/bne
00001B9A  6BFE                    2063              bmi *                       * Check N Flag  bmi/bpl
00001B9C  65FE                    2064              bcs *                       * Check C Flag  bcc/bcs
00001B9E  69FE                    2065              bvs *                       * Check V Flag  bvc/bvs
00001BA0                          2066              
00001BA0  7200                    2067              move.l #$00000000 , d1  
00001BA2  0C81 00000000           2068              cmpi.l #$00000000 , d1
00001BA8  66FE                    2069              bne *                       * Check Z Flag  beq/bne
00001BAA  6BFE                    2070              bmi *                       * Check N Flag  bmi/bpl
00001BAC  65FE                    2071              bcs *                       * Check C Flag  bcc/bcs
00001BAE  69FE                    2072              bvs *                       * Check V Flag  bvc/bvs
00001BB0                          2073              
00001BB0  7402                    2074              move.l #$00000002 , d2  
00001BB2  0C82 FFFFFFFF           2075              cmpi.l #$FFFFFFFF , d2
00001BB8  67FE                    2076              beq *                       * Check Z Flag  beq/bne
00001BBA  6BFE                    2077              bmi *                       * Check N Flag  bmi/bpl
00001BBC  64FE                    2078              bcc *                       * Check C Flag  bcc/bcs
00001BBE  69FE                    2079              bvs *                       * Check V Flag  bvc/bvs
00001BC0                          2080                  
00001BC0  263C 7FFFFFFF           2081              move.l #$7FFFFFFF , d3  
00001BC6  0C83 FFFFFFFF           2082              cmpi.l #$FFFFFFFF , d3
00001BCC  67FE                    2083              beq *                       * Check Z Flag  beq/bne
00001BCE  6AFE                    2084              bpl *                       * Check N Flag  bmi/bpl
00001BD0  64FE                    2085              bcc *                       * Check C Flag  bcc/bcs
00001BD2  68FE                    2086              bvc *                       * Check V Flag  bvc/bvs
00001BD4                          2087              
00001BD4                          2088              
00001BD4                          2089              
00001BD4                          2090  
00001BD4                          2091      * EA=x(An,Dn) - BYTE
00001BD4  207C 00000100           2092              move.l #$00000100 , a0  
00001BDA  7E04                    2093              move.l #$00000004 , d7  
00001BDC                          2094              
00001BDC  21BC FFFFFF80 700C      2095              move.l #$FFFFFF80 , 12(a0,d7)
00001BE4  21BC FFFFFF80 700C      2096              move.l #$FFFFFF80 , 12(a0,d7)
00001BEC  0C30 0080 700F          2097              cmpi.b #$80 , 15(a0,d7)
00001BF2  66FE                    2098              bne *                       * Check Z Flag  beq/bne
00001BF4  6BFE                    2099              bmi *                       * Check N Flag  bmi/bpl
00001BF6  65FE                    2100              bcs *                       * Check C Flag  bcc/bcs
00001BF8  69FE                    2101              bvs *                       * Check V Flag  bvc/bvs
00001BFA                          2102              
00001BFA  21BC FFFFF000 700C      2103              move.l #$FFFFF000 , 12(a0,d7)
00001C02  0C30 0000 700F          2104              cmpi.b #$00 , 15(a0,d7)
00001C08  66FE                    2105              bne *                       * Check Z Flag  beq/bne
00001C0A  6BFE                    2106              bmi *                       * Check N Flag  bmi/bpl
00001C0C  65FE                    2107              bcs *                       * Check C Flag  bcc/bcs
00001C0E  69FE                    2108              bvs *                       * Check V Flag  bvc/bvs
00001C10                          2109              
00001C10  21BC FFFFFF02 700C      2110              move.l #$FFFFFF02 , 12(a0,d7)
00001C18  0C30 00FF 700F          2111              cmpi.b #$FF , 15(a0,d7)
00001C1E  67FE                    2112              beq *                       * Check Z Flag  beq/bne
00001C20  6BFE                    2113              bmi *                       * Check N Flag  bmi/bpl
00001C22  64FE                    2114              bcc *                       * Check C Flag  bcc/bcs
00001C24  69FE                    2115              bvs *                       * Check V Flag  bvc/bvs
00001C26                          2116                  
00001C26  21BC FFFFFF7F 700C      2117              move.l #$FFFFFF7F , 12(a0,d7)
00001C2E  0C30 00FF 700F          2118              cmpi.b #$FF , 15(a0,d7)
00001C34  67FE                    2119              beq *                       * Check Z Flag  beq/bne
00001C36  6AFE                    2120              bpl *                       * Check N Flag  bmi/bpl
00001C38  64FE                    2121              bcc *                       * Check C Flag  bcc/bcs
00001C3A  68FE                    2122              bvc *                       * Check V Flag  bvc/bvs
00001C3C                          2123           
00001C3C                          2124           
00001C3C                          2125      * EA=x(An,Dn) - WORD
00001C3C  21BC FFFF8000 700C      2126              move.l #$FFFF8000 , 12(a0,d7)
00001C44  0C70 8000 700E          2127              cmpi.w #$8000 , 14(a0,d7)
00001C4A  66FE                    2128              bne *                       * Check Z Flag  beq/bne
00001C4C  6BFE                    2129              bmi *                       * Check N Flag  bmi/bpl
00001C4E  65FE                    2130              bcs *                       * Check C Flag  bcc/bcs
00001C50  69FE                    2131              bvs *                       * Check V Flag  bvc/bvs
00001C52                          2132              
00001C52  21BC FFF00000 700C      2133              move.l #$FFF00000 , 12(a0,d7)
00001C5A  0C70 0000 700E          2134              cmpi.w #$0000 , 14(a0,d7)
00001C60  66FE                    2135              bne *                       * Check Z Flag  beq/bne
00001C62  6BFE                    2136              bmi *                       * Check N Flag  bmi/bpl
00001C64  65FE                    2137              bcs *                       * Check C Flag  bcc/bcs
00001C66  69FE                    2138              bvs *                       * Check V Flag  bvc/bvs
00001C68                          2139              
00001C68  21BC FFFF0002 700C      2140              move.l #$FFFF0002 , 12(a0,d7)
00001C70  0C70 FFFF 700E          2141              cmpi.w #$FFFF , 14(a0,d7)
00001C76  67FE                    2142              beq *                       * Check Z Flag  beq/bne
00001C78  6BFE                    2143              bmi *                       * Check N Flag  bmi/bpl
00001C7A  64FE                    2144              bcc *                       * Check C Flag  bcc/bcs
00001C7C  69FE                    2145              bvs *                       * Check V Flag  bvc/bvs
00001C7E                          2146                  
00001C7E  21BC FFFF7FFF 700C      2147              move.l #$FFFF7FFF , 12(a0,d7)
00001C86  0C70 FFFF 700E          2148              cmpi.w #$FFFF , 14(a0,d7)
00001C8C  67FE                    2149              beq *                       * Check Z Flag  beq/bne
00001C8E  6AFE                    2150              bpl *                       * Check N Flag  bmi/bpl
00001C90  64FE                    2151              bcc *                       * Check C Flag  bcc/bcs
00001C92  68FE                    2152              bvc *                       * Check V Flag  bvc/bvs
00001C94                          2153              
00001C94                          2154      * EA=x(An,Dn) - LONG
00001C94  21BC 80000000 700C      2155              move.l #$80000000 , 12(a0,d7)
00001C9C  0CB0 80000000 700C      2156              cmpi.l #$80000000 , 12(a0,d7)
00001CA4  66FE                    2157              bne *                       * Check Z Flag  beq/bne
00001CA6  6BFE                    2158              bmi *                       * Check N Flag  bmi/bpl
00001CA8  65FE                    2159              bcs *                       * Check C Flag  bcc/bcs
00001CAA  69FE                    2160              bvs *                       * Check V Flag  bvc/bvs
00001CAC                          2161              
00001CAC  21BC 00000000 700C      2162              move.l #$00000000 , 12(a0,d7)
00001CB4  0CB0 00000000 700C      2163              cmpi.l #$00000000 , 12(a0,d7)
00001CBC  66FE                    2164              bne *                       * Check Z Flag  beq/bne
00001CBE  6BFE                    2165              bmi *                       * Check N Flag  bmi/bpl
00001CC0  65FE                    2166              bcs *                       * Check C Flag  bcc/bcs
00001CC2  69FE                    2167              bvs *                       * Check V Flag  bvc/bvs
00001CC4                          2168              
00001CC4  21BC 00000002 700C      2169              move.l #$00000002 , 12(a0,d7)
00001CCC  0CB0 FFFFFFFF 700C      2170              cmpi.l #$FFFFFFFF , 12(a0,d7)
00001CD4  67FE                    2171              beq *                       * Check Z Flag  beq/bne
00001CD6  6BFE                    2172              bmi *                       * Check N Flag  bmi/bpl
00001CD8  64FE                    2173              bcc *                       * Check C Flag  bcc/bcs
00001CDA  69FE                    2174              bvs *                       * Check V Flag  bvc/bvs
00001CDC                          2175                  
00001CDC  21BC 7FFFFFFF 700C      2176              move.l #$7FFFFFFF , 12(a0,d7)
00001CE4  0CB0 FFFFFFFF 700C      2177              cmpi.l #$FFFFFFFF , 12(a0,d7)
00001CEC  67FE                    2178              beq *                       * Check Z Flag  beq/bne
00001CEE  6AFE                    2179              bpl *                       * Check N Flag  bmi/bpl
00001CF0  64FE                    2180              bcc *                       * Check C Flag  bcc/bcs
00001CF2  68FE                    2181              bvc *                       * Check V Flag  bvc/bvs
00001CF4                          2182              
00001CF4                          2183              
00001CF4                          2184              
00001CF4                          2185              
00001CF4  4E75                    2186              rts
00001CF6                          2187              
00001CF6                          2188              
00001CF6                          2189    
00001CF6                          2190  *-----------------------------------------------------------
00001CF6                          2191  *-----------------------------------------------------------
00001CF6                          2192  * OPCODE : ADD_I
00001CF6                          2193  *-----------------------------------------------------------
00001CF6                          2194  *-----------------------------------------------------------
00001CF6                          2195  op_ADD_I: 
00001CF6                          2196      
00001CF6                          2197      * EA = Dn  - Byte
00001CF6  203C 12345678           2198              move.l #$12345678 , d0      * populate test data
00001CFC  0600 0000               2199              addi.b #0 , d0                          
00001D00  67FE                    2200              beq *                       * Check Z Flag  beq/bne
00001D02  6BFE                    2201              bmi *                       * Check N Flag  bmi/bpl
00001D04  65FE                    2202              bcs *                       * Check C Flag  bcc/bcs
00001D06  69FE                    2203              bvs *                       * Check V Flag  bvc/bvs
00001D08  0600 0010               2204              addi.b #$10 , d0                            
00001D0C  67FE                    2205              beq *                       * Check Z Flag  beq/bne
00001D0E  6AFE                    2206              bpl *                       * Check N Flag  bmi/bpl
00001D10  65FE                    2207              bcs *                       * Check C Flag  bcc/bcs
00001D12  68FE                    2208              bvc *                       * Check V Flag  bvc/bvs
00001D14  0600 00A5               2209              addi.b #$A5 , d0                            
00001D18  67FE                    2210              beq *                       * Check Z Flag  beq/bne
00001D1A  6BFE                    2211              bmi *                       * Check N Flag  bmi/bpl
00001D1C  64FE                    2212              bcc *                       * Check C Flag  bcc/bcs
00001D1E  68FE                    2213              bvc *                       * Check V Flag  bvc/bvs
00001D20  0C00 002D               2214              cmpi.b #$2D , d0                            
00001D24  66FE                    2215              bne *                       * Check Z Flag  beq/bne
00001D26                          2216              
00001D26                          2217      * EA = Dn  - WORD
00001D26  203C 12345678           2218              move.l #$12345678 , d0      * populate test data
00001D2C  0640 0000               2219              addi.w #0 , d0                          
00001D30  67FE                    2220              beq *                       * Check Z Flag  beq/bne
00001D32  6BFE                    2221              bmi *                       * Check N Flag  bmi/bpl
00001D34  65FE                    2222              bcs *                       * Check C Flag  bcc/bcs
00001D36  69FE                    2223              bvs *                       * Check V Flag  bvc/bvs
00001D38  0640 7000               2224              addi.w #$7000 , d0                          
00001D3C  67FE                    2225              beq *                       * Check Z Flag  beq/bne
00001D3E  6AFE                    2226              bpl *                       * Check N Flag  bmi/bpl
00001D40  65FE                    2227              bcs *                       * Check C Flag  bcc/bcs
00001D42  68FE                    2228              bvc *                       * Check V Flag  bvc/bvs
00001D44  0640 A55A               2229              addi.w #$A55A , d0                          
00001D48  67FE                    2230              beq *                       * Check Z Flag  beq/bne
00001D4A  6BFE                    2231              bmi *                       * Check N Flag  bmi/bpl
00001D4C  64FE                    2232              bcc *                       * Check C Flag  bcc/bcs
00001D4E  68FE                    2233              bvc *                       * Check V Flag  bvc/bvs
00001D50  0C40 6BD2               2234              cmpi.w #$6BD2 , d0                          
00001D54  66FE                    2235              bne *                       * Check Z Flag  beq/bne
00001D56                          2236      
00001D56                          2237      * EA = Dn  - LONG
00001D56  203C 12345678           2238              move.l #$12345678  , d0      * populate test data
00001D5C  0680 00000000           2239              addi.l #0 , d0                          
00001D62  67FE                    2240              beq *                       * Check Z Flag  beq/bne
00001D64  6BFE                    2241              bmi *                       * Check N Flag  bmi/bpl
00001D66  65FE                    2242              bcs *                       * Check C Flag  bcc/bcs
00001D68  69FE                    2243              bvs *                       * Check V Flag  bvc/bvs
00001D6A  0680 F0000000           2244              addi.l #$F0000000 , d0                          
00001D70  67FE                    2245              beq *                       * Check Z Flag  beq/bne
00001D72  6BFE                    2246              bmi *                       * Check N Flag  bmi/bpl
00001D74  64FE                    2247              bcc *                       * Check C Flag  bcc/bcs
00001D76  69FE                    2248              bvs *                       * Check V Flag  bvc/bvs
00001D78  0680 855AA55A           2249              addi.l #$855AA55A , d0                          
00001D7E  67FE                    2250              beq *                       * Check Z Flag  beq/bne
00001D80  6AFE                    2251              bpl *                       * Check N Flag  bmi/bpl
00001D82  65FE                    2252              bcs *                       * Check C Flag  bcc/bcs
00001D84  69FE                    2253              bvs *                       * Check V Flag  bvc/bvs
00001D86  0680 A0000000           2254              addi.l #$A0000000 , d0                          
00001D8C  68FE                    2255              bvc *                       * Check V Flag  bvc/bvs
00001D8E  0C80 278EFBD2           2256              cmpi.l #$278EFBD2 , d0                          
00001D94  66FE                    2257              bne *                       * Check Z Flag  beq/bne
00001D96                          2258      
00001D96                          2259      
00001D96                          2260  
00001D96                          2261      * EA = x.L  - Byte
00001D96  207C 000F0100           2262              move.l #$000F0100 , a0      * populate test data
00001D9C  20BC 12345678           2263              move.l #$12345678 ,(a0)     * populate test data
00001DA2  0639 0000 000F0103      2264              addi.b #0 , $000F0103                           
00001DAA  67FE                    2265              beq *                       * Check Z Flag  beq/bne
00001DAC  6BFE                    2266              bmi *                       * Check N Flag  bmi/bpl
00001DAE  65FE                    2267              bcs *                       * Check C Flag  bcc/bcs
00001DB0  69FE                    2268              bvs *                       * Check V Flag  bvc/bvs
00001DB2  0639 0010 000F0103      2269              addi.b #$10 , $000F0103                         
00001DBA  67FE                    2270              beq *                       * Check Z Flag  beq/bne
00001DBC  6AFE                    2271              bpl *                       * Check N Flag  bmi/bpl
00001DBE  65FE                    2272              bcs *                       * Check C Flag  bcc/bcs
00001DC0  68FE                    2273              bvc *                       * Check V Flag  bvc/bvs
00001DC2  0639 00A5 000F0103      2274              addi.b #$A5 , $000F0103                         
00001DCA  67FE                    2275              beq *                       * Check Z Flag  beq/bne
00001DCC  6BFE                    2276              bmi *                       * Check N Flag  bmi/bpl
00001DCE  64FE                    2277              bcc *                       * Check C Flag  bcc/bcs
00001DD0  68FE                    2278              bvc *                       * Check V Flag  bvc/bvs
00001DD2  0C39 002D 000F0103      2279              cmpi.b #$2D , $000F0103                         
00001DDA  66FE                    2280              bne *                       * Check Z Flag  beq/bne
00001DDC                          2281              
00001DDC                          2282      * EA = x.L- WORD
00001DDC  207C 000F0100           2283              move.l #$000F0100 , a0      * populate test data
00001DE2  20BC 12345678           2284              move.l #$12345678 ,(a0)     * populate test data
00001DE8  0679 0000 000F0100      2285              addi.w #0 , $000F0100                           
00001DF0  67FE                    2286              beq *                       * Check Z Flag  beq/bne
00001DF2  6BFE                    2287              bmi *                       * Check N Flag  bmi/bpl
00001DF4  65FE                    2288              bcs *                       * Check C Flag  bcc/bcs
00001DF6  69FE                    2289              bvs *                       * Check V Flag  bvc/bvs
00001DF8  0679 7000 000F0100      2290              addi.w #$7000 , $000F0100                           
00001E00  67FE                    2291              beq *                       * Check Z Flag  beq/bne
00001E02  6AFE                    2292              bpl *                       * Check N Flag  bmi/bpl
00001E04  65FE                    2293              bcs *                       * Check C Flag  bcc/bcs
00001E06  68FE                    2294              bvc *                       * Check V Flag  bvc/bvs
00001E08  0679 A55A 000F0100      2295              addi.w #$A55A , $000F0100                           
00001E10  67FE                    2296              beq *                       * Check Z Flag  beq/bne
00001E12  6BFE                    2297              bmi *                       * Check N Flag  bmi/bpl
00001E14  64FE                    2298              bcc *                       * Check C Flag  bcc/bcs
00001E16  68FE                    2299              bvc *                       * Check V Flag  bvc/bvs
00001E18  0C79 278E 000F0100      2300              cmpi.w #$278E , $000F0100                           
00001E20  66FE                    2301              bne *                       * Check Z Flag  beq/bne
00001E22                          2302      
00001E22                          2303      * EA = x.L- LONG
00001E22  23FC 12345678 000F0100  2304              move.l #$12345678  , $000F0100  * populate test data
00001E2C  06B9 00000000 000F0100  2305              addi.l #0 , $000F0100                           
00001E36  67FE                    2306              beq *                       * Check Z Flag  beq/bne
00001E38  6BFE                    2307              bmi *                       * Check N Flag  bmi/bpl
00001E3A  65FE                    2308              bcs *                       * Check C Flag  bcc/bcs
00001E3C  69FE                    2309              bvs *                       * Check V Flag  bvc/bvs
00001E3E  06B9 F0000000 000F0100  2310              addi.l #$F0000000 , $000F0100                           
00001E48  67FE                    2311              beq *                       * Check Z Flag  beq/bne
00001E4A  6BFE                    2312              bmi *                       * Check N Flag  bmi/bpl
00001E4C  64FE                    2313              bcc *                       * Check C Flag  bcc/bcs
00001E4E  69FE                    2314              bvs *                       * Check V Flag  bvc/bvs
00001E50  06B9 855AA55A 000F0100  2315              addi.l #$855AA55A , $000F0100                           
00001E5A  67FE                    2316              beq *                       * Check Z Flag  beq/bne
00001E5C  6AFE                    2317              bpl *                       * Check N Flag  bmi/bpl
00001E5E  65FE                    2318              bcs *                       * Check C Flag  bcc/bcs
00001E60  69FE                    2319              bvs *                       * Check V Flag  bvc/bvs
00001E62  06B9 A0000000 000F0100  2320              addi.l #$A0000000 , $000F0100                           
00001E6C  68FE                    2321              bvc *                       * Check V Flag  bvc/bvs
00001E6E  0CB9 278EFBD2 000F0100  2322              cmpi.l #$278EFBD2 , $000F0100                           
00001E78  66FE                    2323              bne *                       * Check Z Flag  beq/bne
00001E7A                          2324      
00001E7A  4E75                    2325              rts
00001E7C                          2326  
00001E7C                          2327  
00001E7C                          2328  *-----------------------------------------------------------
00001E7C                          2329  *-----------------------------------------------------------
00001E7C                          2330  * OPCODE : SUB_I
00001E7C                          2331  *-----------------------------------------------------------
00001E7C                          2332  *-----------------------------------------------------------
00001E7C                          2333  op_SUB_I: 
00001E7C                          2334      
00001E7C                          2335      * EA = Dn  - Byte
00001E7C  203C 12345678           2336              move.l #$12345678 , d0      * populate test data
00001E82  0400 0000               2337              subi.b #0 , d0                          
00001E86  67FE                    2338              beq *                       * Check Z Flag  beq/bne
00001E88  6BFE                    2339              bmi *                       * Check N Flag  bmi/bpl
00001E8A  65FE                    2340              bcs *                       * Check C Flag  bcc/bcs
00001E8C  69FE                    2341              bvs *                       * Check V Flag  bvc/bvs
00001E8E  0400 0010               2342              subi.b #$10 , d0                            
00001E92  67FE                    2343              beq *                       * Check Z Flag  beq/bne
00001E94  6BFE                    2344              bmi *                       * Check N Flag  bmi/bpl
00001E96  65FE                    2345              bcs *                       * Check C Flag  bcc/bcs
00001E98  69FE                    2346              bvs *                       * Check V Flag  bvc/bvs
00001E9A  0400 00A5               2347              subi.b #$A5 , d0                            
00001E9E  67FE                    2348              beq *                       * Check Z Flag  beq/bne
00001EA0  6AFE                    2349              bpl *                       * Check N Flag  bmi/bpl
00001EA2  64FE                    2350              bcc *                       * Check C Flag  bcc/bcs
00001EA4  68FE                    2351              bvc *                       * Check V Flag  bvc/bvs
00001EA6  0C00 00C3               2352              cmpi.b #$C3 , d0                            
00001EAA  66FE                    2353              bne *                       * Check Z Flag  beq/bne
00001EAC                          2354              
00001EAC                          2355      * EA = Dn  - WORD
00001EAC  203C 12345678           2356              move.l #$12345678 , d0      * populate test data
00001EB2  0440 0000               2357              subi.w #0 , d0                          
00001EB6  67FE                    2358              beq *                       * Check Z Flag  beq/bne
00001EB8  6BFE                    2359              bmi *                       * Check N Flag  bmi/bpl
00001EBA  65FE                    2360              bcs *                       * Check C Flag  bcc/bcs
00001EBC  69FE                    2361              bvs *                       * Check V Flag  bvc/bvs
00001EBE  0440 7000               2362              subi.w #$7000 , d0                          
00001EC2  67FE                    2363              beq *                       * Check Z Flag  beq/bne
00001EC4  6AFE                    2364              bpl *                       * Check N Flag  bmi/bpl
00001EC6  64FE                    2365              bcc *                       * Check C Flag  bcc/bcs
00001EC8  69FE                    2366              bvs *                       * Check V Flag  bvc/bvs
00001ECA  0440 A55A               2367              subi.w #$A55A , d0                          
00001ECE  67FE                    2368              beq *                       * Check Z Flag  beq/bne
00001ED0  6BFE                    2369              bmi *                       * Check N Flag  bmi/bpl
00001ED2  65FE                    2370              bcs *                       * Check C Flag  bcc/bcs
00001ED4  69FE                    2371              bvs *                       * Check V Flag  bvc/bvs
00001ED6  0C40 411E               2372              cmpi.w #$411E , d0                          
00001EDA  66FE                    2373              bne *                       * Check Z Flag  beq/bne
00001EDC                          2374      
00001EDC                          2375      * EA = Dn  - LONG
00001EDC  203C 12345678           2376              move.l #$12345678  , d0      * populate test data
00001EE2  0480 00000000           2377              subi.l #0 , d0                          
00001EE8  67FE                    2378              beq *                       * Check Z Flag  beq/bne
00001EEA  6BFE                    2379              bmi *                       * Check N Flag  bmi/bpl
00001EEC  65FE                    2380              bcs *                       * Check C Flag  bcc/bcs
00001EEE  69FE                    2381              bvs *                       * Check V Flag  bvc/bvs
00001EF0  0480 F0000000           2382              subi.l #$F0000000 , d0                          
00001EF6  67FE                    2383              beq *                       * Check Z Flag  beq/bne
00001EF8  6BFE                    2384              bmi *                       * Check N Flag  bmi/bpl
00001EFA  64FE                    2385              bcc *                       * Check C Flag  bcc/bcs
00001EFC  69FE                    2386              bvs *                       * Check V Flag  bvc/bvs
00001EFE  0480 855AA55A           2387              subi.l #$855AA55A , d0                          
00001F04  67FE                    2388              beq *                       * Check Z Flag  beq/bne
00001F06  6AFE                    2389              bpl *                       * Check N Flag  bmi/bpl
00001F08  64FE                    2390              bcc *                       * Check C Flag  bcc/bcs
00001F0A  68FE                    2391              bvc *                       * Check V Flag  bvc/bvs
00001F0C  0480 A0000000           2392              subi.l #$A0000000 , d0                          
00001F12  69FE                    2393              bvs *                       * Check V Flag  bvc/bvs
00001F14  0C80 FCD9B11E           2394              cmpi.l #$FCD9B11E , d0                          
00001F1A  66FE                    2395              bne *                       * Check Z Flag  beq/bne
00001F1C                          2396      
00001F1C                          2397      
00001F1C                          2398  
00001F1C                          2399      * EA = x.L  - Byte
00001F1C  207C 000F0100           2400              move.l #$000F0100 , a0      * populate test data
00001F22  20BC 12345678           2401              move.l #$12345678 ,(a0)     * populate test data
00001F28  0439 0000 000F0103      2402              subi.b #0 , $000F0103                           
00001F30  67FE                    2403              beq *                       * Check Z Flag  beq/bne
00001F32  6BFE                    2404              bmi *                       * Check N Flag  bmi/bpl
00001F34  65FE                    2405              bcs *                       * Check C Flag  bcc/bcs
00001F36  69FE                    2406              bvs *                       * Check V Flag  bvc/bvs
00001F38  0439 0010 000F0103      2407              subi.b #$10 , $000F0103                         
00001F40  67FE                    2408              beq *                       * Check Z Flag  beq/bne
00001F42  6BFE                    2409              bmi *                       * Check N Flag  bmi/bpl
00001F44  65FE                    2410              bcs *                       * Check C Flag  bcc/bcs
00001F46  69FE                    2411              bvs *                       * Check V Flag  bvc/bvs
00001F48  0439 00A5 000F0103      2412              subi.b #$A5 , $000F0103                         
00001F50  67FE                    2413              beq *                       * Check Z Flag  beq/bne
00001F52  6AFE                    2414              bpl *                       * Check N Flag  bmi/bpl
00001F54  64FE                    2415              bcc *                       * Check C Flag  bcc/bcs
00001F56  68FE                    2416              bvc *                       * Check V Flag  bvc/bvs
00001F58  0C39 00C3 000F0103      2417              cmpi.b #$C3 , $000F0103                         
00001F60  66FE                    2418              bne *                       * Check Z Flag  beq/bne
00001F62                          2419              
00001F62                          2420      * EA = x.L- WORD
00001F62  207C 000F0100           2421              move.l #$000F0100 , a0      * populate test data
00001F68  20BC 12345678           2422              move.l #$12345678 ,(a0)     * populate test data
00001F6E  0479 0000 000F0100      2423              subi.w #0 , $000F0100                           
00001F76  67FE                    2424              beq *                       * Check Z Flag  beq/bne
00001F78  6BFE                    2425              bmi *                       * Check N Flag  bmi/bpl
00001F7A  65FE                    2426              bcs *                       * Check C Flag  bcc/bcs
00001F7C  69FE                    2427              bvs *                       * Check V Flag  bvc/bvs
00001F7E  0479 7000 000F0100      2428              subi.w #$7000 , $000F0100                           
00001F86  67FE                    2429              beq *                       * Check Z Flag  beq/bne
00001F88  6AFE                    2430              bpl *                       * Check N Flag  bmi/bpl
00001F8A  64FE                    2431              bcc *                       * Check C Flag  bcc/bcs
00001F8C  69FE                    2432              bvs *                       * Check V Flag  bvc/bvs
00001F8E  0479 A55A 000F0100      2433              subi.w #$A55A , $000F0100                           
00001F96  67FE                    2434              beq *                       * Check Z Flag  beq/bne
00001F98  6AFE                    2435              bpl *                       * Check N Flag  bmi/bpl
00001F9A  64FE                    2436              bcc *                       * Check C Flag  bcc/bcs
00001F9C  69FE                    2437              bvs *                       * Check V Flag  bvc/bvs
00001F9E  0C79 FCDA 000F0100      2438              cmpi.w #$FCDA , $000F0100                           
00001FA6  66FE                    2439              bne *                       * Check Z Flag  beq/bne
00001FA8                          2440      
00001FA8                          2441      * EA = x.L- LONG
00001FA8  23FC 12345678 000F0100  2442              move.l #$12345678  , $000F0100  * populate test data
00001FB2  04B9 00000000 000F0100  2443              subi.l #0 , $000F0100                           
00001FBC  67FE                    2444              beq *                       * Check Z Flag  beq/bne
00001FBE  6BFE                    2445              bmi *                       * Check N Flag  bmi/bpl
00001FC0  65FE                    2446              bcs *                       * Check C Flag  bcc/bcs
00001FC2  69FE                    2447              bvs *                       * Check V Flag  bvc/bvs
00001FC4  04B9 F0000000 000F0100  2448              subi.l #$F0000000 , $000F0100                           
00001FCE  67FE                    2449              beq *                       * Check Z Flag  beq/bne
00001FD0  6BFE                    2450              bmi *                       * Check N Flag  bmi/bpl
00001FD2  64FE                    2451              bcc *                       * Check C Flag  bcc/bcs
00001FD4  69FE                    2452              bvs *                       * Check V Flag  bvc/bvs
00001FD6  04B9 855AA55A 000F0100  2453              subi.l #$855AA55A , $000F0100                           
00001FE0  67FE                    2454              beq *                       * Check Z Flag  beq/bne
00001FE2  6AFE                    2455              bpl *                       * Check N Flag  bmi/bpl
00001FE4  64FE                    2456              bcc *                       * Check C Flag  bcc/bcs
00001FE6  68FE                    2457              bvc *                       * Check V Flag  bvc/bvs
00001FE8  04B9 A0000000 000F0100  2458              subi.l #$A0000000 , $000F0100                           
00001FF2  69FE                    2459              bvs *                       * Check V Flag  bvc/bvs
00001FF4  0CB9 FCD9B11E 000F0100  2460              cmpi.l #$FCD9B11E , $000F0100                           
00001FFE  66FE                    2461              bne *                       * Check Z Flag  beq/bne
00002000                          2462              
00002000  4E75                    2463              rts
00002002                          2464      
00002002                          2465      
00002002                          2466  
00002002                          2467  *-----------------------------------------------------------
00002002                          2468  *-----------------------------------------------------------
00002002                          2469  * OPCODE : MOVE
00002002                          2470  *-----------------------------------------------------------
00002002                          2471  *-----------------------------------------------------------
00002002                          2472  op_MOVE: 
00002002  203C 11223344           2473              move.l #$11223344  , d0
00002008  223C 55667788           2474              move.l #$55667788  , d1
0000200E  243C 8899AABB           2475              move.l #$8899aabb  , d2
00002014  263C CCDDEEFF           2476              move.l #$ccddeeff  , d3
0000201A  7800                    2477              move.l #$00000000  , d4
0000201C  7A00                    2478              move.l #$00000000  , d5
0000201E  7C00                    2479              move.l #$00000000  , d6
00002020  7E00                    2480              move.l #$00000000  , d7         
00002022  207C 44332211           2481              move.l #$44332211  , a0
00002028  227C 88776655           2482              move.l #$88776655  , a1
0000202E  247C BBAA9988           2483              move.l #$bbaa9988  , a2
00002034  267C FFEEDDCC           2484              move.l #$ffeeddcc  , a3
0000203A                          2485              
0000203A  1800                    2486              move.b d0 , d4              * BYTE - DATA REGISTER
0000203C  67FE                    2487              beq *                       * Check Z Flag  beq/bne
0000203E  6BFE                    2488              bmi *                       * Check N Flag  bmi/bpl
00002040  0C84 00000044           2489              cmpi.l #$00000044 , d4                          
00002046  66FE                    2490              bne *                       * Check Z Flag  beq/bne
00002048                          2491          
00002048  3A01                    2492              move.w d1 , d5              * WORD - DATA REGISTER
0000204A  67FE                    2493              beq *                       * Check Z Flag  beq/bne
0000204C  6BFE                    2494              bmi *                       * Check N Flag  bmi/bpl
0000204E  0C85 00007788           2495              cmpi.l #$00007788 , d5                          
00002054  66FE                    2496              bne *                       * Check Z Flag  beq/bne
00002056                          2497          
00002056  2C02                    2498              move.l d2 , d6              * LONG - DATA REGISTER
00002058  67FE                    2499              beq *                       * Check Z Flag  beq/bne
0000205A  6AFE                    2500              bpl *                       * Check N Flag  bmi/bpl
0000205C  0C86 8899AABB           2501              cmpi.l #$8899aabb , d6                          
00002062  66FE                    2502              bne *                       * Check Z Flag  beq/bne
00002064                          2503  
00002064  3A09                    2504              move.w a1 , d5              * WORD - ADDRESS REGISTER
00002066  67FE                    2505              beq *                       * Check Z Flag  beq/bne
00002068  6BFE                    2506              bmi *                       * Check N Flag  bmi/bpl
0000206A  0C85 00006655           2507              cmpi.l #$00006655 , d5                          
00002070  66FE                    2508              bne *                       * Check Z Flag  beq/bne
00002072                          2509          
00002072  2C0A                    2510              move.l a2 , d6              * LONG - ADDRESS REGISTER
00002074  67FE                    2511              beq *                       * Check Z Flag  beq/bne
00002076  6AFE                    2512              bpl *                       * Check N Flag  bmi/bpl
00002078  0C86 BBAA9988           2513              cmpi.l #$bbaa9988  , d6                         
0000207E  66FE                    2514              bne *                       * Check Z Flag  beq/bne
00002080                          2515              
00002080                          2516      
00002080  3842                    2517              movea.w d2 , a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00002082  B9C2                    2518              cmpa.l d2 , a4                          
00002084  67FE                    2519              beq *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
00002086                          2520          
00002086  2A41                    2521              movea.l d1 , a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00002088  BBC1                    2522              cmpa.l d1  , a5                         
0000208A  66FE                    2523              bne *                       * Check Z Flag  beq/bne
0000208C                          2524          
0000208C                          2525  
0000208C                          2526  
0000208C                          2527    * Too mamy EA combinations to test, so we focus on a few of the more complicted EA's 
0000208C                          2528    
0000208C  203C 11223344           2529              move.l #$11223344  , d0
00002092  223C 00010100           2530              move.l #$00010100  , d1
00002098  243C 8899AABB           2531              move.l #$8899aabb  , d2
0000209E  7601                    2532              move.l #$00000001  , d3
000020A0  7800                    2533              move.l #$00000000  , d4
000020A2  7A00                    2534              move.l #$00000000  , d5
000020A4  7C00                    2535              move.l #$00000000  , d6
000020A6  7E00                    2536              move.l #$00000000  , d7         
000020A8  207C 00000000           2537              move.l #$00000000  , a0
000020AE  227C 00010100           2538              move.l #$00010100  , a1
000020B4                          2539  
000020B4                          2540      * x(An,AL) --> x.L
000020B4  11BC 005A 9804          2541              move.b #$5A , 4(a0,a1.l)    * BYTE 
000020BA  47F0 9804               2542              lea 4(a0,a1.l) , a3    
000020BE  13F0 9804 00010105      2543              move.b 4(a0,a1.l) , $00010105    
000020C6  67FE                    2544              beq *                       * Check Z Flag  beq/bne
000020C8  6BFE                    2545              bmi *                       * Check N Flag  bmi/bpl
000020CA  0C30 005A 9805          2546              cmpi.b #$5A , 5(a0,a1.l)                            
000020D0  66FE                    2547              bne *                       * Check Z Flag  beq/bne
000020D2                          2548                  
000020D2                          2549      * x.L --> n(An,Dw)
000020D2  11B9 00010105 1007      2550  MOVE2:      move.b  $00010105 , 7(a0,d1.w)    * BYTE  
000020DA  67FE                    2551              beq *                       * Check Z Flag  beq/bne
000020DC  6BFE                    2552              bmi *                       * Check N Flag  bmi/bpl
000020DE  0C30 005A 1007          2553              cmpi.b #$5A , 7(a0,d1.w)                            
000020E4  66FE                    2554              bne *                       * Check Z Flag  beq/bne
000020E6                          2555                  
000020E6                          2556      * x(PC,Ds) --> x.w
000020E6  11FB 3068 0100          2557              move.b  MOVE1(pc,d3), $0100 * BYTE  
000020EC  67FE                    2558              beq *                       * Check Z Flag  beq/bne
000020EE  6AFE                    2559              bpl *                       * Check N Flag  bmi/bpl
000020F0  0C38 00B9 20D3          2560              cmpi.b #$B9 ,1+MOVE2                            
000020F6  66FE                    2561              bne *                       * Check Z Flag  beq/bne
000020F8                          2562                      
000020F8                          2563      * #x -->    n(An,AL)
000020F8  11BC 0078 1007          2564              move.b  #$78, 7(a0,d1.w)    * BYTE  
000020FE  67FE                    2565              beq *                       * Check Z Flag  beq/bne
00002100  6BFE                    2566              bmi *                       * Check N Flag  bmi/bpl
00002102  0C30 0078 1007          2567              cmpi.b #$78 ,7(a0,d1.w)                         
00002108  66FE                    2568              bne *                       * Check Z Flag  beq/bne
0000210A                          2569          
0000210A  203C 11223344           2570              move.l #$11223344  , d0
00002110  223C 00010100           2571              move.l #$00010100  , d1
00002116  243C 8899AABB           2572              move.l #$8899aabb  , d2
0000211C  7602                    2573              move.l #$00000002  , d3
0000211E  7800                    2574              move.l #$00000000  , d4
00002120  7A00                    2575              move.l #$00000000  , d5
00002122  7C00                    2576              move.l #$00000000  , d6
00002124  7E00                    2577              move.l #$00000000  , d7         
00002126  207C 00000000           2578              move.l #$00000000  , a0
0000212C  227C 00010100           2579              move.l #$00010100  , a1
00002132                          2580              
00002132                          2581      * x(An,AL) --> x.L
00002132  31BC 5A5A 9804          2582              move.w #$5A5A , 4(a0,a1.l)    * WORD  
00002138  49F0 9804               2583              lea 4(a0,a1.l) , a4    
0000213C  33F0 9804 00010104      2584              move.w 4(a0,a1.l) , $00010104    
00002144  67FE                    2585              beq *                       * Check Z Flag  beq/bne
00002146  6BFE                    2586              bmi *                       * Check N Flag  bmi/bpl
00002148  0C70 5A5A 9804          2587              cmpi.w #$5A5A , 4(a0,a1.l)                          
0000214E  66FE                    2588              bne *                       * Check Z Flag  beq/bne
00002150                          2589                  
00002150                          2590      * x.L --> n(An,Dw)
00002150  31B9 00010104 1006      2591  MOVE1:      move.w  $00010104 , 6(a0,d1.w)    * WORD  
00002158  67FE                    2592              beq *                       * Check Z Flag  beq/bne
0000215A  6BFE                    2593              bmi *                       * Check N Flag  bmi/bpl
0000215C  0C70 5A5A 1006          2594              cmpi.w #$5A5A , 6(a0,d1.w)                          
00002162  66FE                    2595              bne *                       * Check Z Flag  beq/bne
00002164                          2596                  
00002164                          2597      * x(PC,Ds) --> x.w
00002164  31FB 30EA 0100          2598              move.w  MOVE1(pc,d3), $0100 * WORD  
0000216A  67FE                    2599              beq *                       * Check Z Flag  beq/bne
0000216C  6BFE                    2600              bmi *                       * Check N Flag  bmi/bpl
0000216E  0C78 67FE 2158          2601              cmpi.w #$67FE ,8+MOVE1                          
00002174  66FE                    2602              bne *                       * Check Z Flag  beq/bne
00002176                          2603                      
00002176                          2604      * #x -->    n(An,AL)
00002176  31BC 7878 1006          2605              move.w  #$7878, 6(a0,d1.w)    * WORD  
0000217C  67FE                    2606              beq *                       * Check Z Flag  beq/bne
0000217E  6BFE                    2607              bmi *                       * Check N Flag  bmi/bpl
00002180  0C70 7878 1006          2608              cmpi.w #$7878 ,6(a0,d1.w)                           
00002186  66FE                    2609              bne *                       * Check Z Flag  beq/bne
00002188                          2610          
00002188                          2611  * ---
00002188                          2612          
00002188  203C 11223344           2613              move.l #$11223344  , d0
0000218E  223C 00010100           2614              move.l #$00010100  , d1
00002194  243C 8899AABB           2615              move.l #$8899aabb  , d2
0000219A  7602                    2616              move.l #$00000002  , d3
0000219C  7800                    2617              move.l #$00000000  , d4
0000219E  7A00                    2618              move.l #$00000000  , d5
000021A0  7C00                    2619              move.l #$00000000  , d6
000021A2  7E00                    2620              move.l #$00000000  , d7         
000021A4  207C 00000000           2621              move.l #$00000000  , a0
000021AA  227C 00010100           2622              move.l #$00010100  , a1
000021B0                          2623              
000021B0                          2624      * x(An,AL) --> x.L
000021B0  21BC 5A5A1234 9804      2625              move.l #$5A5A1234 , 4(a0,a1.l)    * LONG  
000021B8  49F0 9804               2626              lea 4(a0,a1.l) , a4    
000021BC  23F0 9804 00010104      2627              move.l 4(a0,a1.l) , $00010104    
000021C4  67FE                    2628              beq *                       * Check Z Flag  beq/bne
000021C6  6BFE                    2629              bmi *                       * Check N Flag  bmi/bpl
000021C8  0CB0 5A5A1234 9804      2630              cmpi.l #$5A5A1234 , 4(a0,a1.l)                          
000021D0  66FE                    2631              bne *                       * Check Z Flag  beq/bne
000021D2                          2632                  
000021D2                          2633      * x.L --> n(An,Dw)
000021D2  21B9 00010104 1006      2634  MOVE3:      move.l  $00010104 , 6(a0,d1.w)    * LONG  
000021DA  67FE                    2635              beq *                       * Check Z Flag  beq/bne
000021DC  6BFE                    2636              bmi *                       * Check N Flag  bmi/bpl
000021DE  0CB0 5A5A1234 1006      2637              cmpi.l #$5A5A1234 , 6(a0,d1.w)                          
000021E6  66FE                    2638              bne *                       * Check Z Flag  beq/bne
000021E8                          2639                  
000021E8                          2640      * x(PC,Ds) --> x.w
000021E8  21FB 30E8 0100          2641              move.l  MOVE3(pc,d3), $0100 * LONG  
000021EE  67FE                    2642              beq *                       * Check Z Flag  beq/bne
000021F0  6BFE                    2643              bmi *                       * Check N Flag  bmi/bpl
000021F2  0CB8 67FE6BFE 21DA      2644              cmpi.l #$67FE6BFE ,8+MOVE3                          
000021FA  66FE                    2645              bne *                       * Check Z Flag  beq/bne
000021FC                          2646                      
000021FC                          2647      * #x -->    n(An,AL)
000021FC  21BC 78782323 1006      2648              move.l  #$78782323, 6(a0,d1.w)    * LONG  
00002204  67FE                    2649              beq *                       * Check Z Flag  beq/bne
00002206  6BFE                    2650              bmi *                       * Check N Flag  bmi/bpl
00002208  0CB0 78782323 1006      2651              cmpi.l #$78782323 ,6(a0,d1.w)                           
00002210  66FE                    2652              bne *                       * Check Z Flag  beq/bne
00002212                          2653          
00002212                          2654          
00002212  4E75                    2655           rts
00002214                          2656  
00002214                          2657      
00002214                          2658  *-----------------------------------------------------------
00002214                          2659  *-----------------------------------------------------------
00002214                          2660  * OPCODE : MOVE_xxx_FLAGS
00002214                          2661  *-----------------------------------------------------------
00002214                          2662  *-----------------------------------------------------------
00002214                          2663  op_MOVE_xxx_FLAGS: 
00002214                          2664  
00002214                          2665      * Move_To_SR
00002214                          2666      
00002214                          2667      * Dn
00002214                          2668      
00002214  303C 2FFF               2669              move.w #$2FFF, d0
00002218  46C0                    2670              move d0 , SR 
0000221A  6AFE                    2671              bpl *           * branch if Z clear  
0000221C  66FE                    2672              bne *           * branch if N clear
0000221E  68FE                    2673              bvc *           * branch if V clear 
00002220  64FE                    2674              bcc *           * branch if C clear 
00002222  303C 2F00               2675              move.w #$2F00, d0
00002226  44C0                    2676              move d0 , CCR 
00002228  67FE                    2677              beq *           * branch if Z set  
0000222A  6BFE                    2678              bmi *           * branch if N set  
0000222C  69FE                    2679              bvs *           * branch if V set  
0000222E  65FE                    2680              bcs *           * branch if C set  
00002230                          2681      
00002230  303C 2000               2682              move.w #$2000, d0
00002234  46C0                    2683              move d0 , SR 
00002236  67FE                    2684              beq *           * branch if Z set  
00002238  6BFE                    2685              bmi *           * branch if N set  
0000223A  69FE                    2686              bvs *           * branch if V set  
0000223C  65FE                    2687              bcs *           * branch if C set  
0000223E                          2688         
0000223E                          2689      * (An)
0000223E  207C 00000100           2690              move.l #$00000100, a0
00002244  30BC 2FFF               2691              move.w #$2FFF, (a0)
00002248  46D0                    2692              move (a0) , SR 
0000224A  6AFE                    2693              bpl *           * branch if Z clear  
0000224C  66FE                    2694              bne *           * branch if N clear
0000224E  68FE                    2695              bvc *           * branch if V clear 
00002250  64FE                    2696              bcc *           * branch if C clear 
00002252                          2697      
00002252  30BC 2000               2698              move.w #$2000,(a0)
00002256  46D0                    2699              move (a0) , SR 
00002258  67FE                    2700              beq *           * branch if Z set  
0000225A  6BFE                    2701              bmi *           * branch if N set  
0000225C  69FE                    2702              bvs *           * branch if V set  
0000225E  65FE                    2703              bcs *           * branch if C set  
00002260                          2704              
00002260                          2705      * (An)+
00002260  207C 00000100           2706              move.l #$00000100, a0
00002266  30BC 2FFF               2707              move.w #$2FFF, (a0)
0000226A  46D8                    2708              move (a0)+ , SR 
0000226C  6AFE                    2709              bpl *           * branch if Z clear  
0000226E  66FE                    2710              bne *           * branch if N clear
00002270  68FE                    2711              bvc *           * branch if V clear 
00002272  64FE                    2712              bcc *           * branch if C clear 
00002274                          2713      
00002274  30BC 2000               2714              move.w #$2000,(a0)
00002278  46D8                    2715              move (a0)+ , SR 
0000227A  67FE                    2716              beq *           * branch if Z set  
0000227C  6BFE                    2717              bmi *           * branch if N set  
0000227E  69FE                    2718              bvs *           * branch if V set  
00002280  65FE                    2719              bcs *           * branch if C set  
00002282                          2720                   
00002282                          2721      * -(An)
00002282  207C 00000102           2722              move.l #$00000102, a0
00002288  30BC 2FFF               2723              move.w #$2FFF, (a0)
0000228C  46D8                    2724              move (a0)+ , SR 
0000228E  6AFE                    2725              bpl *           * branch if Z clear  
00002290  66FE                    2726              bne *           * branch if N clear
00002292  68FE                    2727              bvc *           * branch if V clear 
00002294  64FE                    2728              bcc *           * branch if C clear 
00002296                          2729      
00002296  30BC 2000               2730              move.w #$2000,(a0)
0000229A  46D8                    2731              move (a0)+ , SR 
0000229C  67FE                    2732              beq *           * branch if Z set  
0000229E  6BFE                    2733              bmi *           * branch if N set  
000022A0  69FE                    2734              bvs *           * branch if V set  
000022A2  65FE                    2735              bcs *           * branch if C set  
000022A4                          2736                              
000022A4                          2737      * n(An)
000022A4  207C 00000102           2738              move.l #$00000102, a0
000022AA  317C 2FFF 0002          2739              move.w #$2FFF, 2(a0)
000022B0  46E8 0002               2740              move 2(a0) , SR 
000022B4  6AFE                    2741              bpl *           * branch if Z clear  
000022B6  66FE                    2742              bne *           * branch if N clear
000022B8  68FE                    2743              bvc *           * branch if V clear 
000022BA  64FE                    2744              bcc *           * branch if C clear 
000022BC                          2745      
000022BC  317C 2000 0002          2746              move.w #$2000,2(a0)
000022C2  46E8 0002               2747              move 2(a0) , SR 
000022C6  67FE                    2748              beq *           * branch if Z set  
000022C8  6BFE                    2749              bmi *           * branch if N set  
000022CA  69FE                    2750              bvs *           * branch if V set  
000022CC  65FE                    2751              bcs *           * branch if C set  
000022CE                          2752                                      
000022CE                          2753      * n(An,Rn.l)
000022CE  207C 00000100           2754              move.l #$00000100, a0
000022D4  7002                    2755              move.l #$00000002, d0
000022D6  31BC 2FFF 0802          2756              move.w #$2FFF, 2(a0,d0.l)
000022DC  46F0 0802               2757              move 2(a0,d0.l) , SR 
000022E0  6AFE                    2758              bpl *           * branch if Z clear  
000022E2  66FE                    2759              bne *           * branch if N clear
000022E4  68FE                    2760              bvc *           * branch if V clear 
000022E6  64FE                    2761              bcc *           * branch if C clear 
000022E8                          2762      
000022E8  31BC 2000 0802          2763              move.w #$2000, 2(a0,d0.l)
000022EE  46F0 0802               2764              move 2(a0,d0.l) , SR 
000022F2  67FE                    2765              beq *           * branch if Z set  
000022F4  6BFE                    2766              bmi *           * branch if N set  
000022F6  69FE                    2767              bvs *           * branch if V set  
000022F8  65FE                    2768              bcs *           * branch if C set  
000022FA                          2769                                                 
000022FA                          2770      * x.W
000022FA  31FC 2FFF 0100          2771              move.w #$2FFF, $0100
00002300  46F8 0100               2772              move $0100 , SR 
00002304  6AFE                    2773              bpl *           * branch if Z clear  
00002306  66FE                    2774              bne *           * branch if N clear
00002308  68FE                    2775              bvc *           * branch if V clear 
0000230A  64FE                    2776              bcc *           * branch if C clear 
0000230C                          2777      
0000230C  31FC 2000 0100          2778              move.w #$2000, $0100
00002312  46F8 0100               2779              move $0100 , SR 
00002316  67FE                    2780              beq *           * branch if Z set  
00002318  6BFE                    2781              bmi *           * branch if N set  
0000231A  69FE                    2782              bvs *           * branch if V set  
0000231C  65FE                    2783              bcs *           * branch if C set  
0000231E                          2784                                                           
0000231E                          2785      * x.L
0000231E  33FC 2FFF 00010100      2786              move.w #$2FFF, $00010100
00002326  46F9 00010100           2787              move $00010100 , SR 
0000232C  6AFE                    2788              bpl *           * branch if Z clear  
0000232E  66FE                    2789              bne *           * branch if N clear
00002330  68FE                    2790              bvc *           * branch if V clear 
00002332  64FE                    2791              bcc *           * branch if C clear 
00002334                          2792      
00002334  33FC 2000 00010100      2793  MOVE4:      move.w #$2000, $00010100
0000233C  46F9 00010100           2794              move $00010100 , SR 
00002342  67FE                    2795              beq *           * branch if Z set  
00002344  6BFE                    2796              bmi *           * branch if N set  
00002346  69FE                    2797              bvs *           * branch if V set  
00002348  65FE                    2798              bcs *           * branch if C set  
0000234A                          2799                                                                     
0000234A                          2800      * x(PC)
0000234A  46FA FFEA               2801              move MOVE4+2(pc) , SR 
0000234E  67FE                    2802              beq *           * branch if Z set  
00002350  6BFE                    2803              bmi *           * branch if N set  
00002352  69FE                    2804              bvs *           * branch if V set  
00002354  65FE                    2805              bcs *           * branch if C set 
00002356                          2806                                                                     
00002356                          2807      * x(PC,d0.l)
00002356  7000                    2808              move.l #$00000000, d0
00002358  46FB 08DC               2809              move MOVE4+2(pc,d0.l) , SR 
0000235C  67FE                    2810              beq *           * branch if Z set  
0000235E  6BFE                    2811              bmi *           * branch if N set  
00002360  69FE                    2812              bvs *           * branch if V set  
00002362  65FE                    2813              bcs *           * branch if C set 
00002364  44FB 08D0               2814              move MOVE4+2(pc,d0.l) , CCR 
00002368  67FE                    2815              beq *           * branch if Z set  
0000236A  6BFE                    2816              bmi *           * branch if N set  
0000236C  69FE                    2817              bvs *           * branch if V set  
0000236E  65FE                    2818              bcs *           * branch if C set 
00002370                          2819                                                                     
00002370                          2820      * #x
00002370  46FC 2FFF               2821              move #$2FFF, SR 
00002374  66FE                    2822              bne *           * branch if Z clear  
00002376  6AFE                    2823              bpl *           * branch if N clear
00002378  68FE                    2824              bvc *           * branch if V clear 
0000237A  64FE                    2825              bcc *           * branch if C clear 
0000237C                          2826              
0000237C                          2827              
0000237C                          2828              
0000237C                          2829   * MOVE_From_SR
0000237C                          2830  
0000237C                          2831              
0000237C                          2832              
0000237C                          2833      * Dn
0000237C  46FC 275A               2834              move #$275A, SR        * Initial value
00002380  40C0                    2835              move SR , d0
00002382  0C40 275A               2836              cmpi.w #$275A , d0
00002386  66FE                    2837              bne *                   * branch if Z set  
00002388                          2838                   
00002388                          2839      * (An)
00002388  207C 00000100           2840              move.l #$00000100, a0
0000238E  46FC 275A               2841              move #$275A, SR        * Initial value
00002392  40D0                    2842              move SR , (a0)
00002394  0C50 275A               2843              cmpi.w #$275A , (a0)
00002398  66FE                    2844              bne *                   * branch if Z set  
0000239A                          2845                         
0000239A                          2846      * (An)+
0000239A  207C 00000100           2847              move.l #$00000100, a0
000023A0  46FC 257A               2848              move #$257A, SR        * Initial value
000023A4  40D8                    2849              move SR , (a0)+
000023A6  207C 00000100           2850              move.l #$00000100, a0
000023AC  0C58 257A               2851              cmpi.w #$257A , (a0)+
000023B0  66FE                    2852              bne *                   * branch if Z set  
000023B2                          2853                                     
000023B2                          2854      * -(An)
000023B2  207C 00000102           2855              move.l #$00000102, a0
000023B8  46FC 2766               2856              move #$2766, SR        * Initial value
000023BC  40E0                    2857              move SR , -(a0)
000023BE  207C 00000100           2858              move.l #$00000100, a0
000023C4  0C50 2766               2859              cmpi.w #$2766 , (a0)
000023C8  66FE                    2860              bne *                   * branch if Z set  
000023CA                          2861                                           
000023CA                          2862      * x(An)
000023CA  207C 00000102           2863              move.l #$00000102, a0
000023D0  46FC 2733               2864              move #$2733, SR        * Initial value
000023D4  40E8 0004               2865              move SR , 4(a0)
000023D8  0C68 2733 0004          2866              cmpi.w #$2733 , 4(a0)
000023DE  66FE                    2867              bne *                   * branch if Z set  
000023E0                          2868                                               
000023E0                          2869      * x(An,rn)
000023E0  207C 00000102           2870              move.l #$00000102, a0
000023E6  7004                    2871              move.l #$00000004, d0
000023E8  46FC 275A               2872              move #$275a, SR        * Initial value
000023EC  40F0 0804               2873              move SR , 4(a0,d0.l)
000023F0  0C70 275A 0804          2874              cmpi.w #$275a , 4(a0,d0.l)
000023F6  66FE                    2875              bne *                   * branch if Z set  
000023F8                          2876                                                          
000023F8                          2877      * x.W
000023F8  46FC 2777               2878              move #$2777, SR        * Initial value
000023FC  40F8 0102               2879              move SR , $0102
00002400  0C78 2777 0102          2880              cmpi.w #$2777 , $0102
00002406  66FE                    2881              bne *                   * branch if Z set  
00002408                          2882                                                               
00002408                          2883      * x.L
00002408  46FC 2777               2884              move #$2777, SR        * Initial value
0000240C  40F9 00010102           2885              move SR , $10102
00002412  0C79 2777 00010102      2886              cmpi.w #$2777 , $10102
0000241A  66FE                    2887              bne *                   * branch if Z set  
0000241C                          2888              
0000241C                          2889              
0000241C                          2890              
0000241C  46FC 2700               2891              move #$2700, SR        * Put flags back to initial value
00002420                          2892  
00002420  4E75                    2893              rts
00002422                          2894  
00002422                          2895               
00002422                          2896  *-----------------------------------------------------------
00002422                          2897  *-----------------------------------------------------------
00002422                          2898  * OPCODE : EXT
00002422                          2899  *-----------------------------------------------------------
00002422                          2900  *-----------------------------------------------------------
00002422                          2901  op_EXT: 
00002422                          2902  
00002422  707F                    2903              move.l #$0000007F, d0
00002424  223C 00008FFF           2904              move.l #$00008FFF, d1
0000242A  7400                    2905              move.l #$00000000, d2
0000242C                          2906              
0000242C  4880                    2907              ext.w d0
0000242E  6BFE                    2908              bmi *                   * Check N Flag  bmi/bpl
00002430  67FE                    2909              beq *                   * Check Z Flag  beq/bne
00002432  0C80 0000007F           2910              cmpi.l #$0000007F , d0
00002438  66FE                    2911              bne *                   * branch if Z set  
0000243A                          2912              
0000243A  48C1                    2913              ext.l d1
0000243C  6AFE                    2914              bpl *                   * Check N Flag  bmi/bpl
0000243E  67FE                    2915              beq *                   * Check Z Flag  beq/bne
00002440  0C81 FFFF8FFF           2916              cmpi.l #$FFFF8FFF , d1
00002446  66FE                    2917              bne *                   * branch if Z set  
00002448                          2918              
00002448  48C2                    2919              ext.l d2
0000244A  66FE                    2920              bne *                   * Check Z Flag  beq/bne
0000244C                          2921  
0000244C                          2922  
0000244C                          2923               
0000244C                          2924  *-----------------------------------------------------------
0000244C                          2925  *-----------------------------------------------------------
0000244C                          2926  * OPCODE : SWAP
0000244C                          2927  *-----------------------------------------------------------
0000244C                          2928  *-----------------------------------------------------------
0000244C                          2929  op_SWAP: 
0000244C                          2930  
0000244C  203C 12345678           2931              move.l #$12345678, d0
00002452                          2932              
00002452  4840                    2933              swap d0
00002454  6BFE                    2934              bmi *                   * Check N Flag  bmi/bpl
00002456  67FE                    2935              beq *                   * Check Z Flag  beq/bne
00002458  0C80 56781234           2936              cmpi.l #$56781234 , d0
0000245E  66FE                    2937              bne *                   * branch if Z set  
00002460                          2938  
00002460                          2939  
00002460                          2940  
00002460  4E75                    2941              rts
00002462                          2942              
00002462                          2943               
00002462                          2944  *-----------------------------------------------------------
00002462                          2945  *-----------------------------------------------------------
00002462                          2946  * OPCODE : LEA_PEA
00002462                          2947  *-----------------------------------------------------------
00002462                          2948  *-----------------------------------------------------------
00002462                          2949  op_LEAPEA: 
00002462                          2950  
00002462  207C 00345678           2951              move.l #$00345678, a0
00002468  7800                    2952              move.l #$00000000, d4
0000246A                          2953              
0000246A                          2954      * (An)      
0000246A  4DD0                    2955              lea (a0) , a6
0000246C  200E                    2956              move.l a6 , d0
0000246E  0C80 00345678           2957              cmpi.l #$00345678, d0
00002474  66FE                    2958              bne *                   * branch if Z set  
00002476  4850                    2959              pea (a0)
00002478  0C97 00345678           2960              cmpi.l #$00345678, (a7)
0000247E  66FE                    2961              bne *                   * branch if Z set  
00002480  584F                    2962              addq #4 , a7            * Restore Stack Pointer
00002482                          2963              
00002482                          2964      * x(An)     
00002482  4DE8 0004               2965              lea 4(a0) , a6
00002486  200E                    2966              move.l a6 , d0
00002488  0C80 0034567C           2967              cmpi.l #$0034567C, d0
0000248E  66FE                    2968              bne *                   * branch if Z set  
00002490  4868 0004               2969              pea 4(a0)
00002494  0C97 0034567C           2970              cmpi.l #$0034567C, (a7)
0000249A  66FE                    2971              bne *                   * branch if Z set  
0000249C  584F                    2972              addq #4 , a7            * Restore Stack Pointer         
0000249E                          2973  
0000249E                          2974      * x(An,Dn.l)        
0000249E  4DF0 4004               2975              lea 4(a0,d4) , a6
000024A2  200E                    2976              move.l a6 , d0
000024A4  0C80 0034567C           2977              cmpi.l #$0034567C, d0
000024AA  66FE                    2978              bne *                   * branch if Z set  
000024AC  4870 4804               2979              pea 4(a0,d4.l)
000024B0  0C97 0034567C           2980              cmpi.l #$0034567C, (a7)
000024B6  66FE                    2981              bne *                   * branch if Z set  
000024B8  584F                    2982              addq #4 , a7            * Restore Stack Pointer
000024BA                          2983              
000024BA                          2984      * x.W       
000024BA  4DF8 1234               2985              lea $1234 , a6
000024BE  200E                    2986              move.l a6 , d0
000024C0  0C40 1234               2987              cmpi.w #$1234, d0
000024C4  66FE                    2988              bne *                   * branch if Z set  
000024C6  4878 1234               2989              pea $1234
000024CA  0C97 00001234           2990              cmpi.l #$00001234, (a7)
000024D0  66FE                    2991              bne *                   * branch if Z set  
000024D2  584F                    2992              addq #4 , a7            * Restore Stack Pointer
000024D4                          2993             
000024D4                          2994      * x.L       
000024D4  4DF9 00345678           2995              lea $00345678 , a6
000024DA  200E                    2996              move.l a6 , d0
000024DC  B08E                    2997              cmp.l a6, d0
000024DE  66FE                    2998              bne *                   * branch if Z set  
000024E0  4879 00345678           2999              pea $00345678
000024E6  0C97 00345678           3000              cmpi.l #$00345678, (a7)
000024EC  66FE                    3001              bne *                   * branch if Z set  
000024EE  584F                    3002              addq #4 , a7            * Restore Stack Pointer
000024F0                          3003             
000024F0                          3004      * x(PC)     
000024F0  4DFA 0008               3005              lea LEA1(pc), a6
000024F4  200E                    3006              move.l a6 , d0
000024F6  B08E                    3007              cmp.l a6, d0
000024F8  66FE                    3008              bne *                   * branch if Z set  
000024FA  487A FFFE               3009  LEA1:       pea LEA1(pc)
000024FE  0C97 0000241E           3010              cmpi.l #$0000241E, (a7)
00002504  67FE                    3011              beq *                   * branch if Z clear  
00002506  584F                    3012              addq #4 , a7            * Restore Stack Pointer
00002508                          3013  
00002508                          3014  
00002508                          3015  
00002508                          3016            
00002508  46FC 2700               3017              move #$2700, SR        * Put flags back to initial value
0000250C                          3018  
0000250C  4E75                    3019              rts
0000250E                          3020      
0000250E                          3021  
0000250E                          3022               
0000250E                          3023  *-----------------------------------------------------------
0000250E                          3024  *-----------------------------------------------------------
0000250E                          3025  * OPCODE : LEA_TAS
0000250E                          3026  *-----------------------------------------------------------
0000250E                          3027  *-----------------------------------------------------------
0000250E                          3028  op_TAS: 
0000250E                          3029  
0000250E                          3030      * Test just one addressing mode
0000250E                          3031  
0000250E  207C 00000100           3032              move.l #$00000100, a0
00002514                          3033              
00002514                          3034      * (An)      
00002514  10BC 0000               3035              move.b #$00 , (a0)
00002518  6BFE                    3036              bmi *                   * Check N Flag  bmi/bpl
0000251A  66FE                    3037              bne *                   * Check Z Flag  beq/bne
0000251C  4AD0                    3038              tas (a0)
0000251E  0C10 0080               3039              cmpi.b #$80, (a0)
00002522  66FE                    3040              bne *                   * branch if Z set  
00002524  10BC 00F5               3041              move.b #$F5 , (a0)
00002528  4AD0                    3042              tas (a0)
0000252A  6AFE                    3043              bpl *                   * Check N Flag  bmi/bpl
0000252C  67FE                    3044              beq *                   * Check Z Flag  beq/bne
0000252E  4AD0                    3045              tas (a0)
00002530  0C10 00F5               3046              cmpi.b #$F5, (a0)
00002534  66FE                    3047              bne *                   * branch if Z set  
00002536                          3048  
00002536  4E75                    3049              rts
00002538                          3050              
00002538                          3051       
00002538                          3052  *-----------------------------------------------------------
00002538                          3053  *-----------------------------------------------------------
00002538                          3054  * OPCODE : LEA_TST
00002538                          3055  *-----------------------------------------------------------
00002538                          3056  *-----------------------------------------------------------
00002538                          3057  op_TST: 
00002538                          3058  
00002538                          3059      * Test just one addressing mode
00002538                          3060  
00002538  207C 00000100           3061              move.l #$00000100, a0
0000253E                          3062              
0000253E                          3063      * (An) - BYTE       
0000253E  10BC 0000               3064              move.b #$00 , (a0)
00002542  4A10                    3065              tst.b (a0)
00002544  6BFE                    3066              bmi *                   * Check N Flag  bmi/bpl
00002546  66FE                    3067              bne *                   * Check Z Flag  beq/bne
00002548  10BC 00F5               3068              move.b #$F5 , (a0)
0000254C  4A10                    3069              tst.b (a0)
0000254E  6AFE                    3070              bpl *                   * Check N Flag  bmi/bpl
00002550  67FE                    3071              beq *                   * Check Z Flag  beq/bne
00002552                          3072              
00002552                          3073      * (An) - WORD       
00002552  30BC 0000               3074              move.w #$0000 , (a0)
00002556  4A50                    3075              tst.w (a0)
00002558  6BFE                    3076              bmi *                   * Check N Flag  bmi/bpl
0000255A  66FE                    3077              bne *                   * Check Z Flag  beq/bne
0000255C  30BC F567               3078              move.w #$F567 , (a0)
00002560  4A50                    3079              tst.w (a0)
00002562  6AFE                    3080              bpl *                   * Check N Flag  bmi/bpl
00002564  67FE                    3081              beq *                   * Check Z Flag  beq/bne
00002566                          3082              
00002566                          3083      * (An) - LONG       
00002566  20BC 00000000           3084              move.l #$00000000 , (a0)
0000256C  4A90                    3085              tst.l (a0)
0000256E  6BFE                    3086              bmi *                   * Check N Flag  bmi/bpl
00002570  66FE                    3087              bne *                   * Check Z Flag  beq/bne
00002572  20BC F56789AB           3088              move.l #$F56789ab , (a0)
00002578  4A90                    3089              tst.l (a0)
0000257A  6AFE                    3090              bpl *                   * Check N Flag  bmi/bpl
0000257C  67FE                    3091              beq *                   * Check Z Flag  beq/bne
0000257E                          3092  
0000257E                          3093  
0000257E  4E75                    3094              rts
00002580                          3095      
00002580                          3096       
00002580                          3097  *-----------------------------------------------------------
00002580                          3098  *-----------------------------------------------------------
00002580                          3099  * OPCODE : LINKS
00002580                          3100  *-----------------------------------------------------------
00002580                          3101  *-----------------------------------------------------------
00002580                          3102  op_LINKS: 
00002580                          3103  
00002580  207C 11223344           3104              move.l #$11223344, a0
00002586  203C 11223344           3105              move.l #$11223344, d0
0000258C  4E50 0000               3106              link a0, #$0
00002590  0C97 11223344           3107              cmpi.l #$11223344, (a7)
00002596                          3108              
00002596  4E58                    3109              unlk a0
00002598  B1C0                    3110              cmp.l d0 , a0
0000259A  66FE                    3111              bne *                   * branch if Z set  
0000259C                          3112  
0000259C  4E75                    3113              rts
0000259E                          3114                   
0000259E                          3115  *-----------------------------------------------------------
0000259E                          3116  *-----------------------------------------------------------
0000259E                          3117  * OPCODE : MOVE_USP
0000259E                          3118  *-----------------------------------------------------------
0000259E                          3119  *-----------------------------------------------------------
0000259E                          3120  op_MOVE_USP: 
0000259E                          3121  
0000259E  207C 11223344           3122              move.l #$11223344, a0
000025A4  4E60                    3123              move a0 , USP
000025A6  4E69                    3124              move USP , a1
000025A8  B3C8                    3125              cmp.l a0 , a1
000025AA  66FE                    3126              bne *                   * branch if Z set  
000025AC                          3127  
000025AC                          3128                            
000025AC                          3129  *-----------------------------------------------------------
000025AC                          3130  *-----------------------------------------------------------
000025AC                          3131  * OPCODE : CHK
000025AC                          3132  *-----------------------------------------------------------
000025AC                          3133  *-----------------------------------------------------------
000025AC                          3134  op_CHK: 
000025AC  303C 1122               3135              move.w #$1122, d0
000025B0  323C 1122               3136              move.w #$1122, d1
000025B4  4380                    3137              chk d0 , d1 
000025B6                          3138              
000025B6  4E71                    3139              nop
000025B8  4E71                    3140              nop
000025BA                          3141              
000025BA  323C 1122               3142              move.w #$1122, d1
000025BE  43BC 1122               3143              chk #$1122 , d1 
000025C2                          3144                      
000025C2                          3145      * Comment out when using Easy68K
000025C2  323C 1122               3146              move.w #$1122, d1
000025C6  43BC 007A               3147              chk #00122 , d1 
000025CA  BCBC EEEE0006           3148              cmp.l #$EEEE0006 , d6
000025D0  66FE                    3149              bne *                   * branch if Z set  
000025D2                          3150  
000025D2  303C 1122               3151              move.w #$1122, d0      
000025D6  323C 8000               3152              move.w #$8000, d1
000025DA  4380                    3153              chk d0 , d1 
000025DC  BCBC EEEE0006           3154              cmp.l #$EEEE0006 , d6
000025E2  66FE                    3155              bne *                   * branch if Z set  
000025E4                          3156  
000025E4  4E75                    3157              rts
000025E6                          3158        
000025E6                          3159                            
000025E6                          3160  *-----------------------------------------------------------
000025E6                          3161  *-----------------------------------------------------------
000025E6                          3162  * OPCODE : NEGS
000025E6                          3163  *-----------------------------------------------------------
000025E6                          3164  *-----------------------------------------------------------
000025E6                          3165  op_NEGS: 
000025E6                          3166  
000025E6                          3167      * NOT - BYTE
000025E6  207C 00000100           3168              move.l #$00000100, a0
000025EC  7000                    3169              move.l #$00000000, d0
000025EE  4600                    3170              not.b d0
000025F0  6AFE                    3171              bpl *                   * Check N Flag  bmi/bpl
000025F2  67FE                    3172              beq *                   * Check Z Flag  beq/bne
000025F4  4600                    3173              not.b d0
000025F6  6BFE                    3174              bmi *                   * Check N Flag  bmi/bpl
000025F8  66FE                    3175              bne *                   * Check Z Flag  beq/bne
000025FA  0C00 0000               3176              cmpi.b #$00 , d0
000025FE  66FE                    3177              bne *                   * Check Z Flag  beq/bne
00002600  10BC 0080               3178              move.b #$80 , (a0)
00002604  4610                    3179              not.b (a0)
00002606  6BFE                    3180              bmi *                   * Check N Flag  bmi/bpl
00002608  67FE                    3181              beq *                   * Check Z Flag  beq/bne
0000260A  4610                    3182              not.b (a0)
0000260C  6AFE                    3183              bpl *                   * Check N Flag  bmi/bpl
0000260E  67FE                    3184              beq *                   * Check Z Flag  beq/bne
00002610  0C10 0080               3185              cmpi.b #$80 , (a0)
00002614  66FE                    3186              bne *                   * Check Z Flag  beq/bne
00002616                          3187  
00002616                          3188      * NOT - WORD
00002616  207C 00000100           3189              move.l #$00000100, a0
0000261C  7000                    3190              move.l #$00000000, d0
0000261E  4640                    3191              not.w d0
00002620  6AFE                    3192              bpl *                   * Check N Flag  bmi/bpl
00002622  67FE                    3193              beq *                   * Check Z Flag  beq/bne
00002624  4640                    3194              not.w d0
00002626  6BFE                    3195              bmi *                   * Check N Flag  bmi/bpl
00002628  66FE                    3196              bne *                   * Check Z Flag  beq/bne
0000262A  0C40 0000               3197              cmpi.w #$0000 , d0
0000262E  66FE                    3198              bne *                   * Check Z Flag  beq/bne
00002630  30BC 5A5A               3199              move.w #$5a5a , (a0)
00002634  4650                    3200              not.w (a0)
00002636  6AFE                    3201              bpl *                   * Check N Flag  bmi/bpl
00002638  67FE                    3202              beq *                   * Check Z Flag  beq/bne
0000263A  4650                    3203              not.w (a0)
0000263C  6BFE                    3204              bmi *                   * Check N Flag  bmi/bpl
0000263E  67FE                    3205              beq *                   * Check Z Flag  beq/bne
00002640  0C50 5A5A               3206              cmpi.w #$5a5a , (a0)
00002644  66FE                    3207              bne *                   * Check Z Flag  beq/bne
00002646                          3208  
00002646                          3209      * NOT - LONG
00002646  207C 00000100           3210              move.l #$00000100, a0
0000264C  7000                    3211              move.l #$00000000, d0
0000264E  4680                    3212              not.l d0
00002650  6AFE                    3213              bpl *                   * Check N Flag  bmi/bpl
00002652  67FE                    3214              beq *                   * Check Z Flag  beq/bne
00002654  4680                    3215              not.l d0
00002656  6BFE                    3216              bmi *                   * Check N Flag  bmi/bpl
00002658  66FE                    3217              bne *                   * Check Z Flag  beq/bne
0000265A  0C80 00000000           3218              cmpi.l #$00000000 , d0
00002660  66FE                    3219              bne *                   * Check Z Flag  beq/bne
00002662  20BC 5A5A1234           3220              move.l #$5a5a1234 , (a0)
00002668  4690                    3221              not.l (a0)
0000266A  6AFE                    3222              bpl *                   * Check N Flag  bmi/bpl
0000266C  67FE                    3223              beq *                   * Check Z Flag  beq/bne
0000266E  4690                    3224              not.l (a0)
00002670  6BFE                    3225              bmi *                   * Check N Flag  bmi/bpl
00002672  67FE                    3226              beq *                   * Check Z Flag  beq/bne
00002674  0C90 5A5A1234           3227              cmpi.l #$5a5a1234 , (a0)
0000267A  66FE                    3228              bne *                   * Check Z Flag  beq/bne
0000267C                          3229  
0000267C                          3230  * ----- 
0000267C                          3231  
0000267C                          3232      * NEG - BYTE
0000267C  207C 00000100           3233              move.l #$00000100, a0
00002682  7000                    3234              move.l #$00000000, d0
00002684  223C 00000080           3235              move.l #$00000080, d1
0000268A  4400                    3236              neg.b d0
0000268C  6BFE                    3237              bmi *                   * Check N Flag  bmi/bpl 0
0000268E  66FE                    3238              bne *                   * Check Z Flag  beq/bne 1
00002690  65FE                    3239              bcs *                   * Check C Flag  bcc/bcs 1
00002692  69FE                    3240              bvs *                   * Check V Flag  bvc/bvs 1
00002694  4401                    3241              neg.b d1
00002696  6AFE                    3242              bpl *                   * Check N Flag  bmi/bpl 1
00002698  67FE                    3243              beq *                   * Check Z Flag  beq/bne 0
0000269A  64FE                    3244              bcc *                   * Check C Flag  bcc/bcs 0
0000269C  68FE                    3245              bvc *                   * Check V Flag  bvc/bvs 0       
0000269E  0C01 0080               3246              cmpi.b #$80 , d1
000026A2  66FE                    3247              bne *                   * Check Z Flag  beq/bne
000026A4  10BC 007F               3248              move.b #$7F , (a0)
000026A8  4410                    3249              neg.b (a0)
000026AA  6AFE                    3250              bpl *                   * Check N Flag  bmi/bpl 1
000026AC  67FE                    3251              beq *                   * Check Z Flag  beq/bne 0
000026AE  64FE                    3252              bcc *                   * Check C Flag  bcc/bcs 0
000026B0  69FE                    3253              bvs *                   * Check V Flag  bvc/bvs 1          
000026B2  10BC 00F5               3254              move.b #$F5 , (a0)
000026B6  4410                    3255              neg.b (a0)
000026B8  6BFE                    3256              bmi *                   * Check N Flag  bmi/bpl 0
000026BA  67FE                    3257              beq *                   * Check Z Flag  beq/bne 0
000026BC  64FE                    3258              bcc *                   * Check C Flag  bcc/bcs 0
000026BE  69FE                    3259              bvs *                   * Check V Flag  bvc/bvs 1       
000026C0  0C10 000B               3260              cmpi.b #$0B , (a0)
000026C4  66FE                    3261              bne *                   * Check Z Flag  beq/bne
000026C6                          3262  
000026C6                          3263  * -----         
000026C6                          3264  
000026C6                          3265      * NEG - WORD
000026C6  207C 00000100           3266              move.l #$00000100, a0
000026CC  7000                    3267              move.l #$00000000, d0
000026CE  223C 00008000           3268              move.l #$00008000, d1
000026D4  4440                    3269              neg.w d0
000026D6  6BFE                    3270              bmi *                   * Check N Flag  bmi/bpl 0
000026D8  66FE                    3271              bne *                   * Check Z Flag  beq/bne 1
000026DA  65FE                    3272              bcs *                   * Check C Flag  bcc/bcs 1
000026DC  69FE                    3273              bvs *                   * Check V Flag  bvc/bvs 1
000026DE  4441                    3274              neg.w d1
000026E0  6AFE                    3275              bpl *                   * Check N Flag  bmi/bpl 1
000026E2  67FE                    3276              beq *                   * Check Z Flag  beq/bne 0
000026E4  64FE                    3277              bcc *                   * Check C Flag  bcc/bcs 0
000026E6  68FE                    3278              bvc *                   * Check V Flag  bvc/bvs 0       
000026E8  0C41 8000               3279              cmpi.w #$8000 , d1
000026EC  66FE                    3280              bne *                   * Check Z Flag  beq/bne
000026EE  30BC 7FFF               3281              move.w #$7FFF , (a0)
000026F2  4450                    3282              neg.w (a0)
000026F4  6AFE                    3283              bpl *                   * Check N Flag  bmi/bpl 1
000026F6  67FE                    3284              beq *                   * Check Z Flag  beq/bne 0
000026F8  64FE                    3285              bcc *                   * Check C Flag  bcc/bcs 0
000026FA  69FE                    3286              bvs *                   * Check V Flag  bvc/bvs 1          
000026FC  30BC F578               3287              move.w #$F578 , (a0)
00002700  4450                    3288              neg.w (a0)
00002702  6BFE                    3289              bmi *                   * Check N Flag  bmi/bpl 0
00002704  67FE                    3290              beq *                   * Check Z Flag  beq/bne 0
00002706  64FE                    3291              bcc *                   * Check C Flag  bcc/bcs 0
00002708  69FE                    3292              bvs *                   * Check V Flag  bvc/bvs 1       
0000270A  0C50 0A88               3293              cmpi.w #$0A88 , (a0)
0000270E  66FE                    3294              bne *                   * Check Z Flag  beq/bne
00002710                          3295  
00002710                          3296  * -----         
00002710                          3297  
00002710                          3298      * NEG - LONG
00002710  207C 00000100           3299              move.l #$00000100, a0
00002716  7000                    3300              move.l #$00000000, d0
00002718  223C 80000000           3301              move.l #$80000000, d1
0000271E  4480                    3302              neg.l d0
00002720  6BFE                    3303              bmi *                   * Check N Flag  bmi/bpl 0
00002722  66FE                    3304              bne *                   * Check Z Flag  beq/bne 1
00002724  65FE                    3305              bcs *                   * Check C Flag  bcc/bcs 1
00002726  69FE                    3306              bvs *                   * Check V Flag  bvc/bvs 1
00002728  4481                    3307              neg.l d1
0000272A  6AFE                    3308              bpl *                   * Check N Flag  bmi/bpl 1
0000272C  67FE                    3309              beq *                   * Check Z Flag  beq/bne 0
0000272E  64FE                    3310              bcc *                   * Check C Flag  bcc/bcs 0
00002730  68FE                    3311              bvc *                   * Check V Flag  bvc/bvs 0       
00002732  0C81 80000000           3312              cmpi.l #$80000000 , d1
00002738  66FE                    3313              bne *                   * Check Z Flag  beq/bne
0000273A  20BC 7FFFFFFF           3314              move.l #$7FFFFFFF , (a0)
00002740  4490                    3315              neg.l (a0)
00002742  6AFE                    3316              bpl *                   * Check N Flag  bmi/bpl 1
00002744  67FE                    3317              beq *                   * Check Z Flag  beq/bne 0
00002746  64FE                    3318              bcc *                   * Check C Flag  bcc/bcs 0
00002748  69FE                    3319              bvs *                   * Check V Flag  bvc/bvs 1          
0000274A  20BC F5781234           3320              move.l #$F5781234 , (a0)
00002750  4490                    3321              neg.l (a0)
00002752  6BFE                    3322              bmi *                   * Check N Flag  bmi/bpl 0
00002754  67FE                    3323              beq *                   * Check Z Flag  beq/bne 0
00002756  64FE                    3324              bcc *                   * Check C Flag  bcc/bcs 0
00002758  69FE                    3325              bvs *                   * Check V Flag  bvc/bvs 1       
0000275A  0C90 0A87EDCC           3326              cmpi.l #$0A87EDCC , (a0)
00002760  66FE                    3327              bne *                   * Check Z Flag  beq/bne
00002762                          3328  
00002762                          3329  
00002762                          3330  * -----         
00002762                          3331  
00002762                          3332      * NEGX - BYTE
00002762  207C 00000100           3333              move.l #$00000100, a0
00002768  7000                    3334              move.l #$00000000, d0
0000276A  223C 00000080           3335              move.l #$00000080, d1
00002770  003C 0010               3336              ori.b #$10 , CCR        * Set X Flag
00002774  4000                    3337              negx.b d0
00002776  6AFE                    3338              bpl *                   * Check N Flag  bmi/bpl 0
00002778  67FE                    3339              beq *                   * Check Z Flag  beq/bne 1
0000277A  64FE                    3340              bcc *                   * Check C Flag  bcc/bcs 1
0000277C  69FE                    3341              bvs *                   * Check V Flag  bvc/bvs 1           
0000277E  023C 00EF               3342              andi.b #$EF , CCR       * Clear X Flag
00002782  4000                    3343              negx.b d0
00002784  6BFE                    3344              bmi *                   * Check N Flag  bmi/bpl 0
00002786  67FE                    3345              beq *                   * Check Z Flag  beq/bne 1
00002788  64FE                    3346              bcc *                   * Check C Flag  bcc/bcs 1
0000278A  69FE                    3347              bvs *                   * Check V Flag  bvc/bvs 1
0000278C  003C 0010               3348              ori.b #$10 , CCR        * Set X Flag
00002790  4001                    3349              negx.b d1
00002792  6BFE                    3350              bmi *                   * Check N Flag  bmi/bpl 1
00002794  67FE                    3351              beq *                   * Check Z Flag  beq/bne 0
00002796  64FE                    3352              bcc *                   * Check C Flag  bcc/bcs 0
00002798  69FE                    3353              bvs *                   * Check V Flag  bvc/bvs 0       
0000279A  0C01 007F               3354              cmpi.b #$7F , d1
0000279E  66FE                    3355              bne *                   * Check Z Flag  beq/bne         
000027A0  023C 00EF               3356              andi.b #$EF , CCR       * Clear X Flag
000027A4  4001                    3357              negx.b d1
000027A6  6AFE                    3358              bpl *                   * Check N Flag  bmi/bpl 1
000027A8  67FE                    3359              beq *                   * Check Z Flag  beq/bne 0
000027AA  64FE                    3360              bcc *                   * Check C Flag  bcc/bcs 0
000027AC  69FE                    3361              bvs *                   * Check V Flag  bvc/bvs 0       
000027AE  0C01 0081               3362              cmpi.b #$81 , d1
000027B2  66FE                    3363              bne *                   * Check Z Flag  beq/bne
000027B4  10BC 007F               3364              move.b #$7F , (a0)
000027B8  003C 0010               3365              ori.b #$10 , CCR        * Set X Flag
000027BC  4010                    3366              negx.b (a0)
000027BE  6AFE                    3367              bpl *                   * Check N Flag  bmi/bpl 1
000027C0  67FE                    3368              beq *                   * Check Z Flag  beq/bne 0
000027C2  64FE                    3369              bcc *                   * Check C Flag  bcc/bcs 0
000027C4  69FE                    3370              bvs *                   * Check V Flag  bvc/bvs 1          
000027C6  10BC 007F               3371              move.b #$7F , (a0)
000027CA  023C 00EF               3372              andi.b #$EF , CCR       * Clear X Flag
000027CE  4010                    3373              negx.b (a0)
000027D0  6AFE                    3374              bpl *                   * Check N Flag  bmi/bpl 1
000027D2  67FE                    3375              beq *                   * Check Z Flag  beq/bne 0
000027D4  64FE                    3376              bcc *                   * Check C Flag  bcc/bcs 0
000027D6  69FE                    3377              bvs *                   * Check V Flag  bvc/bvs 1          
000027D8  10BC 00F5               3378              move.b #$F5 , (a0)
000027DC  003C 0010               3379              ori.b #$10 , CCR        * Set X Flag
000027E0  4010                    3380              negx.b (a0)
000027E2  6BFE                    3381              bmi *                   * Check N Flag  bmi/bpl 0
000027E4  67FE                    3382              beq *                   * Check Z Flag  beq/bne 0
000027E6  64FE                    3383              bcc *                   * Check C Flag  bcc/bcs 0
000027E8  69FE                    3384              bvs *                   * Check V Flag  bvc/bvs 1       
000027EA  0C10 000A               3385              cmpi.b #$0A , (a0)
000027EE  66FE                    3386              bne *                   * Check Z Flag  beq/bne
000027F0  023C 00EF               3387              andi.b #$EF , CCR       * Clear X Flag
000027F4  4010                    3388              negx.b (a0)
000027F6  6AFE                    3389              bpl *                   * Check N Flag  bmi/bpl 0
000027F8  67FE                    3390              beq *                   * Check Z Flag  beq/bne 0
000027FA  64FE                    3391              bcc *                   * Check C Flag  bcc/bcs 0
000027FC  69FE                    3392              bvs *                   * Check V Flag  bvc/bvs 1       
000027FE  0C10 00F6               3393              cmpi.b #$F6 , (a0)
00002802  66FE                    3394              bne *                   * Check Z Flag  beq/bne
00002804                          3395  
00002804                          3396      
00002804                          3397  
00002804                          3398  * -----         
00002804                          3399  
00002804                          3400      * NEGX - WORD
00002804  207C 00000100           3401              move.l #$00000100, a0
0000280A  7000                    3402              move.l #$00000000, d0
0000280C  223C 00008000           3403              move.l #$00008000, d1
00002812  003C 0010               3404              ori.b #$10 , CCR        * Set X Flag
00002816  4040                    3405              negx.w d0
00002818  6AFE                    3406              bpl *                   * Check N Flag  bmi/bpl 0
0000281A  67FE                    3407              beq *                   * Check Z Flag  beq/bne 1
0000281C  64FE                    3408              bcc *                   * Check C Flag  bcc/bcs 1
0000281E  69FE                    3409              bvs *                   * Check V Flag  bvc/bvs 1           
00002820  023C 00EF               3410              andi.b #$EF , CCR       * Clear X Flag
00002824  4040                    3411              negx.w d0
00002826  6BFE                    3412              bmi *                   * Check N Flag  bmi/bpl 0
00002828  67FE                    3413              beq *                   * Check Z Flag  beq/bne 1
0000282A  64FE                    3414              bcc *                   * Check C Flag  bcc/bcs 1
0000282C  69FE                    3415              bvs *                   * Check V Flag  bvc/bvs 1
0000282E  003C 0010               3416              ori.b #$10 , CCR        * Set X Flag
00002832  4041                    3417              negx.w d1
00002834  6BFE                    3418              bmi *                   * Check N Flag  bmi/bpl 1
00002836  67FE                    3419              beq *                   * Check Z Flag  beq/bne 0
00002838  64FE                    3420              bcc *                   * Check C Flag  bcc/bcs 0
0000283A  69FE                    3421              bvs *                   * Check V Flag  bvc/bvs 0       
0000283C  0C41 7FFF               3422              cmpi.w #$7FFF , d1
00002840  66FE                    3423              bne *                   * Check Z Flag  beq/bne         
00002842  023C 00EF               3424              andi.b #$EF , CCR       * Clear X Flag
00002846  4041                    3425              negx.w d1
00002848  6AFE                    3426              bpl *                   * Check N Flag  bmi/bpl 1
0000284A  67FE                    3427              beq *                   * Check Z Flag  beq/bne 0
0000284C  64FE                    3428              bcc *                   * Check C Flag  bcc/bcs 0
0000284E  69FE                    3429              bvs *                   * Check V Flag  bvc/bvs 0       
00002850  0C41 8001               3430              cmpi.w #$8001 , d1
00002854  66FE                    3431              bne *                   * Check Z Flag  beq/bne
00002856  30BC 7FFF               3432              move.w #$7FFF , (a0)
0000285A  003C 0010               3433              ori.b #$10 , CCR        * Set X Flag
0000285E  4050                    3434              negx.w (a0)
00002860  6AFE                    3435              bpl *                   * Check N Flag  bmi/bpl 1
00002862  67FE                    3436              beq *                   * Check Z Flag  beq/bne 0
00002864  64FE                    3437              bcc *                   * Check C Flag  bcc/bcs 0
00002866  69FE                    3438              bvs *                   * Check V Flag  bvc/bvs 1          
00002868  30BC F567               3439              move.w #$F567 , (a0)            
0000286C  023C 00EF               3440              andi.b #$EF , CCR       * Clear X Flag
00002870  4050                    3441              negx.w (a0)
00002872  6BFE                    3442              bmi *                   * Check N Flag  bmi/bpl 1
00002874  67FE                    3443              beq *                   * Check Z Flag  beq/bne 0
00002876  64FE                    3444              bcc *                   * Check C Flag  bcc/bcs 0
00002878  69FE                    3445              bvs *                   * Check V Flag  bvc/bvs 1          
0000287A  30BC F567               3446              move.w #$F567 , (a0)
0000287E  003C 0010               3447              ori.b #$10 , CCR        * Set X Flag
00002882  4050                    3448              negx.w (a0)
00002884  6BFE                    3449              bmi *                   * Check N Flag  bmi/bpl 0
00002886  67FE                    3450              beq *                   * Check Z Flag  beq/bne 0
00002888  64FE                    3451              bcc *                   * Check C Flag  bcc/bcs 0
0000288A  69FE                    3452              bvs *                   * Check V Flag  bvc/bvs 1       
0000288C  0C50 0A98               3453              cmpi.w #$0A98 , (a0)
00002890  66FE                    3454              bne *                   * Check Z Flag  beq/bne
00002892  023C 00EF               3455              andi.b #$EF , CCR       * Clear X Flag
00002896  4050                    3456              negx.w (a0)
00002898  6AFE                    3457              bpl *                   * Check N Flag  bmi/bpl 0
0000289A  67FE                    3458              beq *                   * Check Z Flag  beq/bne 0
0000289C  64FE                    3459              bcc *                   * Check C Flag  bcc/bcs 0
0000289E  69FE                    3460              bvs *                   * Check V Flag  bvc/bvs 1       
000028A0  0C50 F568               3461              cmpi.w #$F568 , (a0)
000028A4  66FE                    3462              bne *                   * Check Z Flag  beq/bne
000028A6                          3463  
000028A6                          3464              
000028A6                          3465  * -----         
000028A6                          3466  
000028A6                          3467      * NEGX - LONG
000028A6  207C 00000100           3468              move.l #$00000100, a0
000028AC  7000                    3469              move.l #$00000000, d0
000028AE  223C 80000000           3470              move.l #$80000000, d1
000028B4  003C 0010               3471              ori.b #$10 , CCR        * Set X Flag
000028B8  4080                    3472              negx.l d0
000028BA  6AFE                    3473              bpl *                   * Check N Flag  bmi/bpl 0
000028BC  67FE                    3474              beq *                   * Check Z Flag  beq/bne 1
000028BE  64FE                    3475              bcc *                   * Check C Flag  bcc/bcs 1
000028C0  69FE                    3476              bvs *                   * Check V Flag  bvc/bvs 1           
000028C2  023C 00EF               3477              andi.b #$EF , CCR       * Clear X Flag
000028C6  4080                    3478              negx.l d0
000028C8  6BFE                    3479              bmi *                   * Check N Flag  bmi/bpl 0
000028CA  67FE                    3480              beq *                   * Check Z Flag  beq/bne 1
000028CC  64FE                    3481              bcc *                   * Check C Flag  bcc/bcs 1
000028CE  69FE                    3482              bvs *                   * Check V Flag  bvc/bvs 1
000028D0  003C 0010               3483              ori.b #$10 , CCR        * Set X Flag
000028D4  4081                    3484              negx.l d1
000028D6  6BFE                    3485              bmi *                   * Check N Flag  bmi/bpl 1
000028D8  67FE                    3486              beq *                   * Check Z Flag  beq/bne 0
000028DA  64FE                    3487              bcc *                   * Check C Flag  bcc/bcs 0
000028DC  69FE                    3488              bvs *                   * Check V Flag  bvc/bvs 0       
000028DE  0C81 7FFFFFFF           3489              cmpi.l #$7FFFFFFF , d1
000028E4  66FE                    3490              bne *                   * Check Z Flag  beq/bne         
000028E6  023C 00EF               3491              andi.b #$EF , CCR       * Clear X Flag
000028EA  4081                    3492              negx.l d1
000028EC  6AFE                    3493              bpl *                   * Check N Flag  bmi/bpl 1
000028EE  67FE                    3494              beq *                   * Check Z Flag  beq/bne 0
000028F0  64FE                    3495              bcc *                   * Check C Flag  bcc/bcs 0
000028F2  69FE                    3496              bvs *                   * Check V Flag  bvc/bvs 0       
000028F4  0C81 80000001           3497              cmpi.l #$80000001 , d1
000028FA  66FE                    3498              bne *                   * Check Z Flag  beq/bne
000028FC  20BC 00007FFF           3499              move.l #$7FFF , (a0)
00002902  003C 0010               3500              ori.b #$10 , CCR        * Set X Flag
00002906  4090                    3501              negx.l (a0)
00002908  6AFE                    3502              bpl *                   * Check N Flag  bmi/bpl 1
0000290A  67FE                    3503              beq *                   * Check Z Flag  beq/bne 0
0000290C  64FE                    3504              bcc *                   * Check C Flag  bcc/bcs 0
0000290E  69FE                    3505              bvs *                   * Check V Flag  bvc/bvs 1          
00002910  20BC F5671234           3506              move.l #$F5671234 , (a0)            
00002916  023C 00EF               3507              andi.b #$EF , CCR       * Clear X Flag
0000291A  4090                    3508              negx.l (a0)
0000291C  6BFE                    3509              bmi *                   * Check N Flag  bmi/bpl 1
0000291E  67FE                    3510              beq *                   * Check Z Flag  beq/bne 0
00002920  64FE                    3511              bcc *                   * Check C Flag  bcc/bcs 0
00002922  69FE                    3512              bvs *                   * Check V Flag  bvc/bvs 1          
00002924  20BC F5675678           3513              move.l #$F5675678 , (a0)
0000292A  003C 0010               3514              ori.b #$10 , CCR        * Set X Flag
0000292E  4090                    3515              negx.l (a0)
00002930  6BFE                    3516              bmi *                   * Check N Flag  bmi/bpl 0
00002932  67FE                    3517              beq *                   * Check Z Flag  beq/bne 0
00002934  64FE                    3518              bcc *                   * Check C Flag  bcc/bcs 0
00002936  69FE                    3519              bvs *                   * Check V Flag  bvc/bvs 1       
00002938  0C90 0A98A987           3520              cmpi.l #$0A98A987 , (a0)
0000293E  66FE                    3521              bne *                   * Check Z Flag  beq/bne
00002940  023C 00EF               3522              andi.b #$EF , CCR       * Clear X Flag
00002944  4090                    3523              negx.l (a0)
00002946  6AFE                    3524              bpl *                   * Check N Flag  bmi/bpl 0
00002948  67FE                    3525              beq *                   * Check Z Flag  beq/bne 0
0000294A  64FE                    3526              bcc *                   * Check C Flag  bcc/bcs 0
0000294C  69FE                    3527              bvs *                   * Check V Flag  bvc/bvs 1       
0000294E  0C90 F5675679           3528              cmpi.l #$F5675679 , (a0)
00002954  66FE                    3529              bne *                   * Check Z Flag  beq/bne
00002956                          3530  
00002956                          3531              
00002956                          3532  * -----         
00002956                          3533  
00002956                          3534      * CLR - BYTE
00002956  207C 00000100           3535              move.l #$00000100, a0
0000295C  203C 12345678           3536              move.l #$12345678, d0
00002962  223C 12345678           3537              move.l #$12345678, d1                   
00002968  243C 12345678           3538              move.l #$12345678, d2                   
0000296E  283C 12345600           3539              move.l #$12345600, d4                   
00002974  2A3C 12340000           3540              move.l #$12340000, d5                   
0000297A  7C00                    3541              move.l #$00000000, d6                   
0000297C                          3542              
0000297C  4200                    3543              clr.b d0
0000297E  66FE                    3544              bne *                   * Check Z Flag  beq/bne 0
00002980  6BFE                    3545              bmi *                   * Check N Flag  bmi/bpl 0
00002982  B880                    3546              cmp.l d0 , d4
00002984  66FE                    3547              bne *                   * Check Z Flag  beq/bne 0
00002986                          3548              
00002986  4241                    3549              clr.w d1
00002988  66FE                    3550              bne *                   * Check Z Flag  beq/bne 0
0000298A  6BFE                    3551              bmi *                   * Check N Flag  bmi/bpl 0
0000298C  BA81                    3552              cmp.l d1 , d5
0000298E  66FE                    3553              bne *                   * Check Z Flag  beq/bne 0
00002990                          3554              
00002990  4282                    3555              clr.l d2
00002992  66FE                    3556              bne *                   * Check Z Flag  beq/bne 0
00002994  6BFE                    3557              bmi *                   * Check N Flag  bmi/bpl 0
00002996  BC82                    3558              cmp.l d2 , d6
00002998  66FE                    3559              bne *                   * Check Z Flag  beq/bne 0
0000299A                          3560  
0000299A  4E75                    3561              rts      
0000299C                          3562              
0000299C                          3563        
0000299C                          3564                            
0000299C                          3565  *-----------------------------------------------------------
0000299C                          3566  *-----------------------------------------------------------
0000299C                          3567  * OPCODE : MOVEM
0000299C                          3568  *-----------------------------------------------------------
0000299C                          3569  *-----------------------------------------------------------
0000299C                          3570  op_MOVEM: 
0000299C                          3571  
0000299C                          3572      * WORD  Registers --> Memory
0000299C  203C 0000D0D0           3573              move.l #$0000d0d0, d0
000029A2  223C 0000D1D1           3574              move.l #$0000d1d1, d1
000029A8  243C 0000D2D2           3575              move.l #$0000d2d2, d2
000029AE  263C 0000D3D3           3576              move.l #$0000d3d3, d3
000029B4  283C 0000D4D4           3577              move.l #$0000d4d4, d4
000029BA  2A3C 0000D5D5           3578              move.l #$0000d5d5, d5
000029C0  2C3C 0000D6D6           3579              move.l #$0000d6d6, d6
000029C6  2E3C 0000D7D7           3580              move.l #$0000d7d7, d7
000029CC  207C 00000A0A           3581              move.l #$00000a0a, a0
000029D2  227C 00001A1A           3582              move.l #$00001a1a, a1
000029D8  247C 00002A2A           3583              move.l #$00002a2a, a2
000029DE  267C 00003A3A           3584              move.l #$00003a3a, a3
000029E4  287C 00004A4A           3585              move.l #$00004a4a, a4
000029EA  2A7C 00005A5A           3586              move.l #$00005a5a, a5
000029F0  2C7C 00006A6A           3587              move.l #$00006a6a, a6
000029F6                          3588             *move.l #$00007a7a, a7  * Dont change the Stack Pointer
000029F6                          3589              
000029F6  48B8 FFFF 0100          3590              movem.w D0-D7/A0-A7 , $00000100  
000029FC                          3591              
000029FC  207C 00000100           3592              move.l #$00000100, a0
00002A02                          3593              
00002A02  B058                    3594              cmp.w (a0)+ , d0            
00002A04  66FE                    3595              bne *                   * Check Z Flag  beq/bne 0
00002A06  B258                    3596              cmp.w (a0)+ , d1            
00002A08  66FE                    3597              bne *                   * Check Z Flag  beq/bne 0
00002A0A  B458                    3598              cmp.w (a0)+ , d2            
00002A0C  66FE                    3599              bne *                   * Check Z Flag  beq/bne 0
00002A0E  B658                    3600              cmp.w (a0)+ , d3            
00002A10  66FE                    3601              bne *                   * Check Z Flag  beq/bne 0
00002A12  B858                    3602              cmp.w (a0)+ , d4            
00002A14  66FE                    3603              bne *                   * Check Z Flag  beq/bne 0
00002A16  BA58                    3604              cmp.w (a0)+ , d5            
00002A18  66FE                    3605              bne *                   * Check Z Flag  beq/bne 0
00002A1A  BC58                    3606              cmp.w (a0)+ , d6            
00002A1C  66FE                    3607              bne *                   * Check Z Flag  beq/bne 0
00002A1E  BE58                    3608              cmp.w (a0)+ , d7            
00002A20  66FE                    3609              bne *                   * Check Z Flag  beq/bne 0
00002A22                          3610  
00002A22  0C58 0A0A               3611              cmp.w #$0A0A , (a0)+    * Because we are using a0 as a pointer
00002A26  66FE                    3612              bne *                   * Check Z Flag  beq/bne 0
00002A28                          3613   
00002A28  B2D8                    3614              cmp.w (a0)+ , a1
00002A2A  66FE                    3615              bne *                   * Check Z Flag  beq/bne 0
00002A2C  B4D8                    3616              cmp.w (a0)+ , a2
00002A2E  66FE                    3617              bne *                   * Check Z Flag  beq/bne 0
00002A30  B6D8                    3618              cmp.w (a0)+ , a3
00002A32  66FE                    3619              bne *                   * Check Z Flag  beq/bne 0
00002A34  B8D8                    3620              cmp.w (a0)+ , a4
00002A36  66FE                    3621              bne *                   * Check Z Flag  beq/bne 0
00002A38  BAD8                    3622              cmp.w (a0)+ , a5
00002A3A  66FE                    3623              bne *                   * Check Z Flag  beq/bne 0
00002A3C  BCD8                    3624              cmp.w (a0)+ , a6
00002A3E  66FE                    3625              bne *                   * Check Z Flag  beq/bne 0
00002A40                          3626            
00002A40                          3627  
00002A40                          3628  
00002A40                          3629  
00002A40                          3630      * LONG  Registers --> Memory
00002A40  203C D0D0D0D0           3631              move.l #$d0d0d0d0, d0
00002A46  223C D1D1D1D1           3632              move.l #$d1d1d1d1, d1
00002A4C  243C D2D2D2D2           3633              move.l #$d2d2d2d2, d2
00002A52  263C D3D3D3D3           3634              move.l #$d3d3d3d3, d3
00002A58  283C D4D4D4D4           3635              move.l #$d4d4d4d4, d4
00002A5E  2A3C D5D5D5D5           3636              move.l #$d5d5d5d5, d5
00002A64  2C3C D6D6D6D6           3637              move.l #$d6d6d6d6, d6
00002A6A  2E3C D7D7D7D7           3638              move.l #$d7d7d7d7, d7
00002A70  207C 0A0A0A0A           3639              move.l #$0a0a0a0a, a0
00002A76  227C 1A1A1A1A           3640              move.l #$1a1a1a1a, a1
00002A7C  247C 2A2A2A2A           3641              move.l #$2a2a2a2a, a2
00002A82  267C 3A3A3A3A           3642              move.l #$3a3a3a3a, a3
00002A88  287C 4A4A4A4A           3643              move.l #$4a4a4a4a, a4
00002A8E  2A7C 5A5A5A5A           3644              move.l #$5a5a5a5a, a5
00002A94  2C7C 6A6A6A6A           3645              move.l #$6a6a6a6a, a6
00002A9A                          3646             *move.l #$7a7a7a7a, a7  * Dont change the Stack Pointer
00002A9A                          3647              
00002A9A                          3648              
00002A9A  48F8 FFFF 0120          3649              movem.l D0-D7/A0-A7 , $00000120  
00002AA0                          3650              
00002AA0  207C 00000120           3651              move.l #$00000120, a0
00002AA6                          3652              
00002AA6  B098                    3653              cmp.l (a0)+ , d0            
00002AA8  66FE                    3654              bne *                   * Check Z Flag  beq/bne 0
00002AAA  B298                    3655              cmp.l (a0)+ , d1            
00002AAC  66FE                    3656              bne *                   * Check Z Flag  beq/bne 0
00002AAE  B498                    3657              cmp.l (a0)+ , d2            
00002AB0  66FE                    3658              bne *                   * Check Z Flag  beq/bne 0
00002AB2  B698                    3659              cmp.l (a0)+ , d3            
00002AB4  66FE                    3660              bne *                   * Check Z Flag  beq/bne 0
00002AB6  B898                    3661              cmp.l (a0)+ , d4            
00002AB8  66FE                    3662              bne *                   * Check Z Flag  beq/bne 0
00002ABA  BA98                    3663              cmp.l (a0)+ , d5            
00002ABC  66FE                    3664              bne *                   * Check Z Flag  beq/bne 0
00002ABE  BC98                    3665              cmp.l (a0)+ , d6            
00002AC0  66FE                    3666              bne *                   * Check Z Flag  beq/bne 0
00002AC2  BE98                    3667              cmp.l (a0)+ , d7            
00002AC4  66FE                    3668              bne *                   * Check Z Flag  beq/bne 0
00002AC6                          3669  
00002AC6  0C98 0A0A0A0A           3670              cmp.l #$0A0A0A0A , (a0)+    * Because we are using a0 as a pointer
00002ACC  66FE                    3671              bne *                   * Check Z Flag  beq/bne 0
00002ACE                          3672   
00002ACE  B3D8                    3673              cmp.l (a0)+ , a1
00002AD0  66FE                    3674              bne *                   * Check Z Flag  beq/bne 0
00002AD2  B5D8                    3675              cmp.l (a0)+ , a2
00002AD4  66FE                    3676              bne *                   * Check Z Flag  beq/bne 0
00002AD6  B7D8                    3677              cmp.l (a0)+ , a3
00002AD8  66FE                    3678              bne *                   * Check Z Flag  beq/bne 0
00002ADA  B9D8                    3679              cmp.l (a0)+ , a4
00002ADC  66FE                    3680              bne *                   * Check Z Flag  beq/bne 0
00002ADE  BBD8                    3681              cmp.l (a0)+ , a5
00002AE0  66FE                    3682              bne *                   * Check Z Flag  beq/bne 0
00002AE2  BDD8                    3683              cmp.l (a0)+ , a6
00002AE4  66FE                    3684              bne *                   * Check Z Flag  beq/bne 0
00002AE6                          3685       * ----
00002AE6                          3686  
00002AE6                          3687  
00002AE6                          3688      * WORD  Registers --> Memory  -(An) EA Mode
00002AE6  203C 0000D0D0           3689              move.l #$0000d0d0, d0
00002AEC  223C 0000D1D1           3690              move.l #$0000d1d1, d1
00002AF2  243C 0000D2D2           3691              move.l #$0000d2d2, d2
00002AF8  263C 0000D3D3           3692              move.l #$0000d3d3, d3
00002AFE  283C 0000D4D4           3693              move.l #$0000d4d4, d4
00002B04  2A3C 0000D5D5           3694              move.l #$0000d5d5, d5
00002B0A  2C3C 0000D6D6           3695              move.l #$0000d6d6, d6
00002B10  2E3C 0000D7D7           3696              move.l #$0000d7d7, d7
00002B16  207C 00000A0A           3697              move.l #$00000a0a, a0
00002B1C  227C 00001A1A           3698              move.l #$00001a1a, a1
00002B22  247C 00002A2A           3699              move.l #$00002a2a, a2
00002B28  267C 00003A3A           3700              move.l #$00003a3a, a3
00002B2E  287C 00004A4A           3701              move.l #$00004a4a, a4
00002B34  2A7C 00005A5A           3702              move.l #$00005a5a, a5
00002B3A  2C7C 00006A6A           3703              move.l #$00006a6a, a6
00002B40                          3704             *move.l #$00007a7a, a7  * Dont change the Stack Pointer
00002B40                          3705             
00002B40  207C 000001A0           3706              move.l #$000001A0, a0
00002B46  48A0 FFFF               3707              movem.w D0-D7/A0-A7 , -(a0)  
00002B4A                          3708              
00002B4A  207C 0000019E           3709              move.l #$0000019E, a0
00002B50                          3710              
00002B50  BCE0                    3711              cmp.w -(a0) , a6            
00002B52  66FE                    3712              bne *                   * Check Z Flag  beq/bne 0
00002B54  BAE0                    3713              cmp.w -(a0) , a5            
00002B56  66FE                    3714              bne *                   * Check Z Flag  beq/bne 0
00002B58  B8E0                    3715              cmp.w -(a0) , a4            
00002B5A  66FE                    3716              bne *                   * Check Z Flag  beq/bne 0
00002B5C  B6E0                    3717              cmp.w -(a0) , a3            
00002B5E  66FE                    3718              bne *                   * Check Z Flag  beq/bne 0
00002B60  B4E0                    3719              cmp.w -(a0) , a2            
00002B62  66FE                    3720              bne *                   * Check Z Flag  beq/bne 0
00002B64  B2E0                    3721              cmp.w -(a0) , a1            
00002B66  66FE                    3722              bne *                   * Check Z Flag  beq/bne 0
00002B68  B0E0                    3723              cmp.w -(a0) , a0            
00002B6A                          3724             * bne *                   * Check Z Flag  beq/bne 0
00002B6A  BE60                    3725              cmp.w -(a0) , d7            
00002B6C  66FE                    3726              bne *                   * Check Z Flag  beq/bne 0
00002B6E  BC60                    3727              cmp.w -(a0) , d6
00002B70  66FE                    3728              bne *                   * Check Z Flag  beq/bne 0
00002B72  BA60                    3729              cmp.w -(a0) , d5
00002B74  66FE                    3730              bne *                   * Check Z Flag  beq/bne 0
00002B76  B860                    3731              cmp.w -(a0) , d4
00002B78  66FE                    3732              bne *                   * Check Z Flag  beq/bne 0
00002B7A  B660                    3733              cmp.w -(a0) , d3
00002B7C  66FE                    3734              bne *                   * Check Z Flag  beq/bne 0
00002B7E  B460                    3735              cmp.w -(a0) , d2
00002B80  66FE                    3736              bne *                   * Check Z Flag  beq/bne 0
00002B82  B260                    3737              cmp.w -(a0) , d1
00002B84  66FE                    3738              bne *                   * Check Z Flag  beq/bne 0
00002B86  B060                    3739              cmp.w -(a0) , d0
00002B88  66FE                    3740              bne *                   * Check Z Flag  beq/bne 0
00002B8A                          3741            
00002B8A                          3742  
00002B8A                          3743  
00002B8A                          3744  
00002B8A                          3745      * LONG  Registers --> Memory   -(An) EA Mode
00002B8A  203C D0D0D0D0           3746              move.l #$d0d0d0d0, d0
00002B90  223C D1D1D1D1           3747              move.l #$d1d1d1d1, d1
00002B96  243C D2D2D2D2           3748              move.l #$d2d2d2d2, d2
00002B9C  263C D3D3D3D3           3749              move.l #$d3d3d3d3, d3
00002BA2  283C D4D4D4D4           3750              move.l #$d4d4d4d4, d4
00002BA8  2A3C D5D5D5D5           3751              move.l #$d5d5d5d5, d5
00002BAE  2C3C D6D6D6D6           3752              move.l #$d6d6d6d6, d6
00002BB4  2E3C D7D7D7D7           3753              move.l #$d7d7d7d7, d7
00002BBA  207C 0A0A0A0A           3754              move.l #$0a0a0a0a, a0
00002BC0  227C 1A1A1A1A           3755              move.l #$1a1a1a1a, a1
00002BC6  247C 2A2A2A2A           3756              move.l #$2a2a2a2a, a2
00002BCC  267C 3A3A3A3A           3757              move.l #$3a3a3a3a, a3
00002BD2  287C 4A4A4A4A           3758              move.l #$4a4a4a4a, a4
00002BD8  2A7C 5A5A5A5A           3759              move.l #$5a5a5a5a, a5
00002BDE  2C7C 6A6A6A6A           3760              move.l #$6a6a6a6a, a6
00002BE4                          3761             *move.l #$7a7a7a7a, a7  * Dont change the Stack Pointer
00002BE4                          3762              
00002BE4                          3763           
00002BE4  207C 000001A0           3764              move.l #$000001A0, a0
00002BEA  48E0 FFFF               3765              movem.l D0-D7/A0-A7 , -(a0)  
00002BEE                          3766              
00002BEE  207C 0000019C           3767              move.l #$0000019C, a0
00002BF4                          3768              
00002BF4  BDE0                    3769              cmp.l -(a0) , a6            
00002BF6  66FE                    3770              bne *                   * Check Z Flag  beq/bne 0
00002BF8  BBE0                    3771              cmp.l -(a0) , a5            
00002BFA  66FE                    3772              bne *                   * Check Z Flag  beq/bne 0
00002BFC  B9E0                    3773              cmp.l -(a0) , a4            
00002BFE  66FE                    3774              bne *                   * Check Z Flag  beq/bne 0
00002C00  B7E0                    3775              cmp.l -(a0) , a3            
00002C02  66FE                    3776              bne *                   * Check Z Flag  beq/bne 0
00002C04  B5E0                    3777              cmp.l -(a0) , a2            
00002C06  66FE                    3778              bne *                   * Check Z Flag  beq/bne 0
00002C08  B3E0                    3779              cmp.l -(a0) , a1            
00002C0A  66FE                    3780              bne *                   * Check Z Flag  beq/bne 0
00002C0C  B1E0                    3781              cmp.l -(a0) , a0            
00002C0E                          3782             * bne *                   * Check Z Flag  beq/bne 0
00002C0E  BEA0                    3783              cmp.l -(a0) , d7            
00002C10  66FE                    3784              bne *                   * Check Z Flag  beq/bne 0
00002C12  BCA0                    3785              cmp.l -(a0) , d6
00002C14  66FE                    3786              bne *                   * Check Z Flag  beq/bne 0
00002C16  BAA0                    3787              cmp.l -(a0) , d5
00002C18  66FE                    3788              bne *                   * Check Z Flag  beq/bne 0
00002C1A  B8A0                    3789              cmp.l -(a0) , d4
00002C1C  66FE                    3790              bne *                   * Check Z Flag  beq/bne 0
00002C1E  B6A0                    3791              cmp.l -(a0) , d3
00002C20  66FE                    3792              bne *                   * Check Z Flag  beq/bne 0
00002C22  B4A0                    3793              cmp.l -(a0) , d2
00002C24  66FE                    3794              bne *                   * Check Z Flag  beq/bne 0
00002C26  B2A0                    3795              cmp.l -(a0) , d1
00002C28  66FE                    3796              bne *                   * Check Z Flag  beq/bne 0
00002C2A  B0A0                    3797              cmp.l -(a0) , d0
00002C2C  66FE                    3798              bne *                   * Check Z Flag  beq/bne 0
00002C2E                          3799            
00002C2E                          3800  
00002C2E                          3801  
00002C2E                          3802       *----     
00002C2E                          3803            
00002C2E                          3804      * WORD - Memory --> Registers
00002C2E  7000                    3805              move.l #$00000000, d0
00002C30  7200                    3806              move.l #$00000000, d1
00002C32  7400                    3807              move.l #$00000000, d2
00002C34  7600                    3808              move.l #$00000000, d3
00002C36  7800                    3809              move.l #$00000000, d4
00002C38  7A00                    3810              move.l #$00000000, d5
00002C3A  7C00                    3811              move.l #$00000000, d6
00002C3C  7E00                    3812              move.l #$00000000, d7
00002C3E  207C 00000000           3813              move.l #$00000000, a0
00002C44  227C 00000000           3814              move.l #$00000000, a1
00002C4A  247C 00000000           3815              move.l #$00000000, a2
00002C50  267C 00000000           3816              move.l #$00000000, a3
00002C56  287C 00000000           3817              move.l #$00000000, a4
00002C5C  2A7C 00000000           3818              move.l #$00000000, a5
00002C62  2C7C 00000000           3819              move.l #$00000000, a6
00002C68                          3820             *move.l #$00000000, a7  * Dont change the Stack Pointer
00002C68                          3821              
00002C68  4CB8 2A55 0100          3822              movem.w $00000100 , D0/D2/D4/D6/A1/A3/A5   
00002C6E                          3823              
00002C6E  B0BC FFFFD0D0           3824              cmp.l #$FFFFD0D0 , d0           
00002C74  66FE                    3825              bne *                   * Check Z Flag  beq/bne 0
00002C76  B4BC FFFFD1D1           3826              cmp.l #$FFFFD1D1 , d2           
00002C7C  66FE                    3827              bne *                  * Check Z Flag  beq/bne 0
00002C7E  B8BC FFFFD2D2           3828              cmp.l #$FFFFD2D2 , d4           
00002C84  66FE                    3829              bne *                   * Check Z Flag  beq/bne 0
00002C86  BCBC FFFFD3D3           3830              cmp.l #$FFFFD3D3 , d6           
00002C8C  66FE                    3831              bne *                   * Check Z Flag  beq/bne 0
00002C8E  B3FC FFFFD4D4           3832              cmp.l #$FFFFD4D4 , a1           
00002C94  66FE                    3833              bne *                   * Check Z Flag  beq/bne 0
00002C96  B7FC FFFFD5D5           3834              cmp.l #$FFFFD5D5 , a3           
00002C9C  66FE                    3835              bne *                   * Check Z Flag  beq/bne 0
00002C9E  BBFC FFFFD6D6           3836              cmp.l #$FFFFD6D6 , a5           
00002CA4  66FE                    3837              bne *                   * Check Z Flag  beq/bne 0
00002CA6                          3838              
00002CA6                          3839   
00002CA6                          3840      * LONG - Memory --> Registers
00002CA6  7000                    3841              move.l #$00000000, d0
00002CA8  7200                    3842              move.l #$00000000, d1
00002CAA  7400                    3843              move.l #$00000000, d2
00002CAC  7600                    3844              move.l #$00000000, d3
00002CAE  7800                    3845              move.l #$00000000, d4
00002CB0  7A00                    3846              move.l #$00000000, d5
00002CB2  7C00                    3847              move.l #$00000000, d6
00002CB4  7E00                    3848              move.l #$00000000, d7
00002CB6  207C 00000000           3849              move.l #$00000000, a0
00002CBC  227C 00000000           3850              move.l #$00000000, a1
00002CC2  247C 00000000           3851              move.l #$00000000, a2
00002CC8  267C 00000000           3852              move.l #$00000000, a3
00002CCE  287C 00000000           3853              move.l #$00000000, a4
00002CD4  2A7C 00000000           3854              move.l #$00000000, a5
00002CDA  2C7C 00000000           3855              move.l #$00000000, a6
00002CE0                          3856             *move.l #$00000000, a7  * Dont change the Stack Pointer
00002CE0                          3857              
00002CE0  4CF8 2A55 0120          3858              movem.l $00000120 , D0/D2/D4/D6/A1/A3/A5   
00002CE6                          3859              
00002CE6  B0BC D0D0D0D0           3860              cmp.l #$D0D0D0D0 , d0           
00002CEC  66FE                    3861              bne *                   * Check Z Flag  beq/bne 0
00002CEE  B4BC D1D1D1D1           3862              cmp.l #$D1D1D1D1 , d2           
00002CF4  66FE                    3863              bne *                  * Check Z Flag  beq/bne 0
00002CF6  B8BC D2D2D2D2           3864              cmp.l #$D2D2D2D2 , d4           
00002CFC  66FE                    3865              bne *                   * Check Z Flag  beq/bne 0
00002CFE  BCBC D3D3D3D3           3866              cmp.l #$D3D3D3D3 , d6           
00002D04  66FE                    3867              bne *                   * Check Z Flag  beq/bne 0
00002D06  B3FC D4D4D4D4           3868              cmp.l #$D4D4D4D4 , a1           
00002D0C  66FE                    3869              bne *                   * Check Z Flag  beq/bne 0
00002D0E  B7FC D5D5D5D5           3870              cmp.l #$D5D5D5D5 , a3           
00002D14  66FE                    3871              bne *                   * Check Z Flag  beq/bne 0
00002D16  BBFC D6D6D6D6           3872              cmp.l #$D6D6D6D6 , a5           
00002D1C  66FE                    3873              bne *                   * Check Z Flag  beq/bne 0
00002D1E                          3874              
00002D1E  4E75                    3875              rts     
00002D20                          3876  
00002D20                          3877                            
00002D20                          3878  *-----------------------------------------------------------
00002D20                          3879  *-----------------------------------------------------------
00002D20                          3880  * OPCODE : ABCD
00002D20                          3881  *-----------------------------------------------------------
00002D20                          3882  *-----------------------------------------------------------
00002D20                          3883  op_ABCD: 
00002D20                          3884      
00002D20                          3885      * Test with X Flag CLEARED
00002D20  207C 00000110           3886                  move.l #$00000110, a0 * Address pointer-X
00002D26  227C 00000120           3887                  move.l #$00000120, a1 * Address pointer-Y
00002D2C  7000                    3888                  move.l #$00000000, d0 * BCD byte-X
00002D2E  7200                    3889                  move.l #$00000000, d1 * BCD byte-Y
00002D30  7400                    3890                  move.l #$00000000, d2
00002D32  7600                    3891                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002D34  7800                    3892                  move.l #$00000000, d4 * Cumulative number of times C was set
00002D36  7A00                    3893                  move.l #$00000000, d5 * Cumulative Register BCD results
00002D38  2C3C 00000099           3894                  move.l #$00000099, d6 * Inner loop counter
00002D3E  2E3C 00000099           3895                  move.l #$00000099, d7 * Outer loop counter
00002D44                          3896  
00002D44  2007                    3897  ABCD_OUTER1:    move.l d7 , d0
00002D46  2206                    3898  ABCD_INNER1:    move.l d6 , d1
00002D48  023C 00EF               3899                  andi.b #$EF , CCR     * Clear X Flag
00002D4C  207C 00000110           3900                  move.l #$00000110, a0 * Address pointer-X
00002D52  227C 00000120           3901                  move.l #$00000120, a1 * Address pointer-Y
00002D58  1140 FFFF               3902                  move.b d0 , -1(a0)
00002D5C  1341 FFFF               3903                  move.b d1 , -1(a1)
00002D60                          3904                  
00002D60  C300                    3905                  abcd d0 , d1
00002D62  6400 0004               3906                  bcc ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00002D66  5284                    3907                  add.l #1 , d4
00002D68  DA81                    3908  ABCD_NO_C1:     add.l d1 , d5
00002D6A                          3909                  
00002D6A  C308                    3910                  abcd -(a0) , -(a1)
00002D6C  6400 0004               3911                  bcc ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00002D70  5284                    3912                  add.l #1 , d4
00002D72  D611                    3913  ABCD_NO_C2:     add.b (a1) , d3
00002D74                          3914  
00002D74                          3915  
00002D74  51CE FFD0               3916                  dbf d6 , ABCD_INNER1
00002D78  2C3C 00000099           3917                  move.l #$00000099, d6
00002D7E  51CF FFC4               3918                  dbf d7 , ABCD_OUTER1
00002D82  0C84 00005AFC           3919                  cmpi.l #$00005AFC , d4  * Check the cumulative results
00002D88  66FE                    3920                  bne *                 
00002D8A  0C85 001C9A34           3921                  cmpi.l #$001C9A34 , d5
00002D90  66FE                    3922                  bne *                
00002D92  0C83 00000034           3923                  cmpi.l #$00000034 , d3
00002D98  66FE                    3924                  bne *                
00002D9A                          3925  
00002D9A                          3926      * Test with X Flag SET
00002D9A  207C 00000110           3927                  move.l #$00000110, a0 * Address pointer-X
00002DA0  227C 00000120           3928                  move.l #$00000120, a1 * Address pointer-Y
00002DA6  7000                    3929                  move.l #$00000000, d0 * BCD byte-X
00002DA8  7200                    3930                  move.l #$00000000, d1 * BCD byte-Y
00002DAA  7400                    3931                  move.l #$00000000, d2
00002DAC  7600                    3932                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002DAE  7800                    3933                  move.l #$00000000, d4 * Cumulative number of times C was set
00002DB0  7A00                    3934                  move.l #$00000000, d5 * Cumulative Register BCD results
00002DB2  2C3C 00000099           3935                  move.l #$00000099, d6 * Inner loop counter
00002DB8  2E3C 00000099           3936                  move.l #$00000099, d7 * Outer loop counter
00002DBE                          3937  
00002DBE  2007                    3938  ABCD_OUTER2:    move.l d7 , d0
00002DC0  2206                    3939  ABCD_INNER2:    move.l d6 , d1
00002DC2  003C 0010               3940                  ori.b #$10 , CCR      * Set X Flag
00002DC6  207C 00000110           3941                  move.l #$00000110, a0 * Address pointer-X
00002DCC  227C 00000120           3942                  move.l #$00000120, a1 * Address pointer-Y
00002DD2  1140 FFFF               3943                  move.b d0 , -1(a0)
00002DD6  1341 FFFF               3944                  move.b d1 , -1(a1)
00002DDA                          3945                  
00002DDA  C300                    3946                  abcd d0 , d1
00002DDC  6400 0004               3947                  bcc ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00002DE0  5284                    3948                  add.l #1 , d4
00002DE2  DA81                    3949  ABCD_NO_C3:     add.l d1 , d5
00002DE4                          3950                  
00002DE4  C308                    3951                  abcd -(a0) , -(a1)
00002DE6  6400 0004               3952                  bcc ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00002DEA  5284                    3953                  add.l #1 , d4
00002DEC  D611                    3954  ABCD_NO_C4:     add.b (a1) , d3
00002DEE                          3955  
00002DEE                          3956  
00002DEE  51CE FFD0               3957                  dbf d6 , ABCD_INNER2
00002DF2  2C3C 00000099           3958                  move.l #$00000099, d6
00002DF8  51CF FFC4               3959                  dbf d7 , ABCD_OUTER2
00002DFC  0C84 00005B60           3960                  cmpi.l #$00005B60 , d4  * Check the cumulative results
00002E02  66FE                    3961                  bne *                 
00002E04  0C85 001CCFC8           3962                  cmpi.l #$001CCFC8 , d5
00002E0A  66FE                    3963                  bne *                
00002E0C  0C83 00000034           3964                  cmpi.l #$00000034 , d3
00002E12  66FE                    3965                  bne *                
00002E14                          3966  
00002E14                          3967              * Quick check of Z Flag
00002E14  103C 0000               3968                  move.b #$00, d0 
00002E18  123C 0000               3969                  move.b #$00, d1 
00002E1C  44FC 0000               3970                  move #$00, CCR              * Set Z flag to 0
00002E20  C101                    3971                  abcd d1,d0                  * Should NOT set Z Flag to 1
00002E22  67FE                    3972                  beq *                       * Check Z Flag  beq/bne
00002E24                          3973                  
00002E24  103C 0001               3974                  move.b #$01, d0 
00002E28  123C 0000               3975                  move.b #$00, d1 
00002E2C  44FC 0004               3976                  move #$04, CCR              * Set Z flag to 0
00002E30  C101                    3977                  abcd d1,d0                  * Should NOT set Z Flag to 1
00002E32  67FE                    3978                  beq *                       * Check Z Flag  beq/bne
00002E34                          3979                  
00002E34  4E75                    3980                  rts   
00002E36                          3981                            
00002E36                          3982  *-----------------------------------------------------------
00002E36                          3983  *-----------------------------------------------------------
00002E36                          3984  * OPCODE : SBCD
00002E36                          3985  *-----------------------------------------------------------
00002E36                          3986  *-----------------------------------------------------------
00002E36                          3987  op_SBCD: 
00002E36                          3988  
00002E36                          3989      * Test with X Flag CLEARED
00002E36  207C 00000110           3990                  move.l #$00000110, a0 * Address pointer-X
00002E3C  227C 00000120           3991                  move.l #$00000120, a1 * Address pointer-Y
00002E42  7000                    3992                  move.l #$00000000, d0 * BCD byte-X
00002E44  7200                    3993                  move.l #$00000000, d1 * BCD byte-Y
00002E46  7400                    3994                  move.l #$00000000, d2
00002E48  7600                    3995                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002E4A  7800                    3996                  move.l #$00000000, d4 * Cumulative number of times C was set
00002E4C  7A00                    3997                  move.l #$00000000, d5 * Cumulative Register BCD results
00002E4E  2C3C 00000099           3998                  move.l #$00000099, d6 * Inner loop counter
00002E54  2E3C 00000099           3999                  move.l #$00000099, d7 * Outer loop counter
00002E5A                          4000  
00002E5A  2007                    4001  SBCD_OUTER1:    move.l d7 , d0
00002E5C  2206                    4002  SBCD_INNER1:    move.l d6 , d1
00002E5E  023C 00EF               4003                  andi.b #$EF , CCR     * Clear X Flag
00002E62  207C 00000110           4004                  move.l #$00000110, a0 * Address pointer-X
00002E68  227C 00000120           4005                  move.l #$00000120, a1 * Address pointer-Y
00002E6E  1140 FFFF               4006                  move.b d0 , -1(a0)
00002E72  1341 FFFF               4007                  move.b d1 , -1(a1)
00002E76                          4008                  
00002E76  8300                    4009                  sbcd d0 , d1
00002E78  6400 0004               4010                  bcc SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00002E7C  5284                    4011                  add.l #1 , d4
00002E7E  DA81                    4012  SBCD_NO_C1:     add.l d1 , d5
00002E80                          4013                  
00002E80  8308                    4014                  sbcd -(a0) , -(a1)
00002E82  6400 0004               4015                  bcc SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00002E86  5284                    4016                  add.l #1 , d4
00002E88  D611                    4017  SBCD_NO_C2:     add.b (a1) , d3
00002E8A                          4018  
00002E8A                          4019  
00002E8A  51CE FFD0               4020                  dbf d6 , SBCD_INNER1
00002E8E  2C3C 00000099           4021                  move.l #$00000099, d6
00002E94  51CF FFC4               4022                  dbf d7 , SBCD_OUTER1
00002E98  0C84 00005C0A           4023                  cmpi.l #$00005C0A , d4  * Check the cumulative results
00002E9E  66FE                    4024                  bne *                 
00002EA0  0C85 001C459E           4025                  cmpi.l #$001C459E , d5
00002EA6  66FE                    4026                  bne *                
00002EA8  0C83 0000009E           4027                  cmpi.l #$0000009E , d3
00002EAE  66FE                    4028                  bne *                
00002EB0                          4029  
00002EB0                          4030      * Test with X Flag SET
00002EB0  207C 00000110           4031                  move.l #$00000110, a0 * Address pointer-X
00002EB6  227C 00000120           4032                  move.l #$00000120, a1 * Address pointer-Y
00002EBC  7000                    4033                  move.l #$00000000, d0 * BCD byte-X
00002EBE  7200                    4034                  move.l #$00000000, d1 * BCD byte-Y
00002EC0  7400                    4035                  move.l #$00000000, d2
00002EC2  7600                    4036                  move.l #$00000000, d3 * Cumulative -(An) BCD results
00002EC4  7800                    4037                  move.l #$00000000, d4 * Cumulative number of times C was set
00002EC6  7A00                    4038                  move.l #$00000000, d5 * Cumulative Register BCD results
00002EC8  2C3C 00000099           4039                  move.l #$00000099, d6 * Inner loop counter
00002ECE  2E3C 00000099           4040                  move.l #$00000099, d7 * Outer loop counter
00002ED4                          4041  
00002ED4  2007                    4042  SBCD_OUTER2:    move.l d7 , d0
00002ED6  2206                    4043  SBCD_INNER2:    move.l d6 , d1
00002ED8  003C 0010               4044                  ori.b #$10 , CCR      * Set X Flag
00002EDC  207C 00000110           4045                  move.l #$00000110, a0 * Address pointer-X
00002EE2  227C 00000120           4046                  move.l #$00000120, a1 * Address pointer-Y
00002EE8  1140 FFFF               4047                  move.b d0 , -1(a0)
00002EEC  1341 FFFF               4048                  move.b d1 , -1(a1)
00002EF0                          4049                  
00002EF0  8300                    4050                  sbcd d0 , d1
00002EF2  6400 0004               4051                  bcc SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00002EF6  5284                    4052                  add.l #1 , d4
00002EF8  DA81                    4053  SBCD_NO_C3:     add.l d1 , d5
00002EFA                          4054                  
00002EFA  8308                    4055                  sbcd -(a0) , -(a1)
00002EFC  6400 0004               4056                  bcc SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00002F00  5284                    4057                  add.l #1 , d4
00002F02  D611                    4058  SBCD_NO_C4:     add.b (a1) , d3
00002F04                          4059  
00002F04  51CE FFD0               4060                  dbf d6 , SBCD_INNER2
00002F08  2C3C 00000099           4061                  move.l #$00000099, d6
00002F0E  51CF FFC4               4062                  dbf d7 , SBCD_OUTER2
00002F12  0C84 00005CA4           4063                  cmpi.l #$00005CA4 , d4  * Check the cumulative results
00002F18  66FE                    4064                  bne *                 
00002F1A  0C85 001C5C66           4065                  cmpi.l #$001C5C66 , d5
00002F20  66FE                    4066                  bne *                
00002F22  0C83 0000009E           4067                  cmpi.l #$0000009E , d3
00002F28  66FE                    4068                  bne *                
00002F2A                          4069  
00002F2A                          4070  
00002F2A                          4071              * Quick check of Z Flag
00002F2A  103C 0000               4072                  move.b #$00, d0 
00002F2E  123C 0000               4073                  move.b #$00, d1 
00002F32  44FC 0000               4074                  move #$00, CCR              * Set Z flag to 0
00002F36  8101                    4075                  sbcd d1,d0                  * Should NOT set Z Flag to 1
00002F38  67FE                    4076                  beq *                       * Check Z Flag  beq/bne
00002F3A                          4077  
00002F3A  103C 0001               4078                  move.b #$01, d0 
00002F3E  123C 0000               4079                  move.b #$00, d1 
00002F42  44FC 0004               4080                  move #$04, CCR              * Set Z flag to 0
00002F46  8101                    4081                  sbcd d1,d0                  * Should NOT set Z Flag to 1
00002F48  67FE                    4082                  beq *                       * Check Z Flag  beq/bne
00002F4A                          4083  
00002F4A  4E75                    4084                  rts   
00002F4C                          4085                 
00002F4C                          4086  *-----------------------------------------------------------
00002F4C                          4087  *-----------------------------------------------------------
00002F4C                          4088  * OPCODE : NBCD
00002F4C                          4089  *-----------------------------------------------------------
00002F4C                          4090  *-----------------------------------------------------------
00002F4C                          4091  op_NBCD: 
00002F4C                          4092      
00002F4C                          4093         * NBCD to a  Register
00002F4C                          4094         
00002F4C  7000                    4095                  move.l #$00000000, d0 * BCD byte
00002F4E  7200                    4096                  move.l #$00000000, d1 
00002F50  7400                    4097                  move.l #$00000000, d2
00002F52  7600                    4098                  move.l #$00000000, d3 * Cumulative number of times Z was set
00002F54  7800                    4099                  move.l #$00000000, d4 * Cumulative number of times C was set
00002F56  7A00                    4100                  move.l #$00000000, d5 * Cumulative BCD results
00002F58  2C3C 00000099           4101                  move.l #$00000099, d6
00002F5E  2E3C 00000099           4102                  move.l #$00000099, d7 * Loop counter
00002F64                          4103  
00002F64  2007                    4104  NBCD_LOOP:      move.l d7 , d0
00002F66  44FC 0004               4105                  move #$04, CCR        * Set Z flag to 0
00002F6A                          4106  
00002F6A  4800                    4107                  nbcd d0
00002F6C                          4108                  
00002F6C  6400 0004               4109                  bcc NBCD_NO_C         * Check C Flag 
00002F70  5284                    4110                  add.l #1 , d4
00002F72  6600 0004               4111  NBCD_NO_C:      bne NBCD_NO_Z         * Check Z Flag 
00002F76  5283                    4112                  add.l #1 , d3
00002F78  DA80                    4113  NBCD_NO_Z:      add.l d0 , d5         * Add results into d5
00002F7A                          4114  
00002F7A  51CF FFE8               4115                  dbf d7 , NBCD_LOOP
00002F7E                          4116                  
00002F7E  0C83 00000001           4117                  cmpi.l #$00000001 , d3  * Check the cumulative results
00002F84  66FE                    4118                  bne *                 
00002F86  0C84 00000099           4119                  cmpi.l #$00000099 , d4
00002F8C  66FE                    4120                  bne *                
00002F8E  0C85 00002E3B           4121                  cmpi.l #$00002E3B , d5
00002F94  66FE                    4122                  bne *     
00002F96                          4123             
00002F96                          4124  
00002F96                          4125         * NBCD to a memory location
00002F96                          4126         
00002F96  7000                    4127                  move.l #$00000000, d0 * BCD byte
00002F98  7200                    4128                  move.l #$00000000, d1 
00002F9A  7400                    4129                  move.l #$00000000, d2
00002F9C  7600                    4130                  move.l #$00000000, d3 * Cumulative number of times Z was set
00002F9E  7800                    4131                  move.l #$00000000, d4 * Cumulative number of times C was set
00002FA0  7A00                    4132                  move.l #$00000000, d5 * Cumulative BCD results
00002FA2  2C3C 00000099           4133                  move.l #$00000099, d6
00002FA8  2E3C 00000099           4134                  move.l #$00000099, d7 * Loop counter
00002FAE                          4135  
00002FAE  11C7 0100               4136  NBCD_LOOP1:     move.b d7 , $00000100
00002FB2  44FC 0004               4137                  move #$04, CCR        * Set Z flag to 0
00002FB6                          4138  
00002FB6  4838 0100               4139                  nbcd $00000100
00002FBA  1038 0100               4140                  move.b $00000100 , d0
00002FBE                          4141                  
00002FBE  6400 0004               4142                  bcc NBCD_NO_C1        * Check C Flag 
00002FC2  5284                    4143                  add.l #1 , d4
00002FC4  6600 0004               4144  NBCD_NO_C1:     bne NBCD_NO_Z1        * Check Z Flag 
00002FC8  5283                    4145                  add.l #1 , d3
00002FCA  DA80                    4146  NBCD_NO_Z1:     add.l d0 , d5         * Add results into d5
00002FCC                          4147  
00002FCC  51CF FFE0               4148                  dbf d7 , NBCD_LOOP1
00002FD0                          4149                  
00002FD0  0C83 00000001           4150                  cmpi.l #$00000001 , d3  * Check the cumulative results
00002FD6  66FE                    4151                  bne *                 
00002FD8  0C84 00000000           4152                  cmpi.l #$00000000 , d4
00002FDE  66FE                    4153                  bne *                
00002FE0  0C85 00002E3B           4154                  cmpi.l #$00002E3B , d5
00002FE6  66FE                    4155                  bne *     
00002FE8                          4156             
00002FE8                          4157  
00002FE8  4E75                    4158                  rts   
00002FEA                          4159  
00002FEA                          4160  
00002FEA                          4161                 
00002FEA                          4162  *-----------------------------------------------------------
00002FEA                          4163  *-----------------------------------------------------------
00002FEA                          4164  * OPCODE : TRAPV
00002FEA                          4165  *-----------------------------------------------------------
00002FEA                          4166  *-----------------------------------------------------------
00002FEA                          4167  op_TRAPV: 
00002FEA                          4168  
00002FEA                          4169      * TRAPV will set d0 to 12345678 if V flag is set
00002FEA                          4170      
00002FEA  7000                    4171                  move.l #$00000000, d0 * Clear d0
00002FEC                          4172                  
00002FEC  44FC 0000               4173                  move #$00, CCR        * Clear V flag
00002FF0  4E76                    4174                  trapv
00002FF2  0C80 00000000           4175                  cmpi.l #$00000000 , d0  * Check of d0 was updated (should not be_)
00002FF8  66FE                    4176                  bne *       
00002FFA                          4177  
00002FFA                          4178                 * Easy658K does not use exception vectors
00002FFA  44FC 0002               4179                  move #$02, CCR        * Set V flag
00002FFE  4E76                    4180                  trapv
00003000  0C80 12345678           4181                  cmpi.l #$12345678 , d0  * Check of d0 was updated (should be)
00003006  66FE                    4182                  bne *       
00003008                          4183  
00003008                          4184  
00003008  4E75                    4185                  rts   
0000300A                          4186  
0000300A                          4187  
0000300A                          4188                 
0000300A                          4189  *-----------------------------------------------------------
0000300A                          4190  *-----------------------------------------------------------
0000300A                          4191  * OPCODE : RTR
0000300A                          4192  *-----------------------------------------------------------
0000300A                          4193  *-----------------------------------------------------------
0000300A                          4194  
0000300A                          4195  op_RTR: 
0000300A                          4196  
0000300A                          4197      * Leventhal claims only 5 LSB's are popped from the stack to the CCR
0000300A                          4198      
0000300A  41F9 00003018           4199                  lea RTR_DONE , a0
00003010  2F08                    4200                  move.l a0, -(a7)     * push destination PC to the stack
00003012  3F3C FF15               4201                  move.w #$FF15 , -(a7)       * push flags=0xFFFF to the stack
00003016  4E77                    4202                  rtr
00003018                          4203  
00003018  40C0                    4204  RTR_DONE:       move SR , d0
0000301A  0240 001F               4205                  andi #$1F , d0
0000301E  0C40 0015               4206                  cmpi #$15 , d0
00003022  66FE                    4207                  bne *
00003024                          4208                  
00003024  4E75                    4209                  rts   
00003026                          4210  
00003026                          4211     
00003026  283C 44444444           4212  BSR_FAR2:       move.l #$44444444 , d4
0000302C  4E75                    4213                  rts
0000302E                          4214  
0000302E                          4215                 
0000302E                          4216  *-----------------------------------------------------------
0000302E                          4217  *-----------------------------------------------------------
0000302E                          4218  * OPCODE : BCC
0000302E                          4219  *-----------------------------------------------------------
0000302E                          4220  *-----------------------------------------------------------
0000302E                          4221  
0000302E  44FC 0000               4222  op_BCC:         move #$00 , CCR
00003032  6202                    4223                  bhi.s BCC1            * Higher Than         C=0 AND Z=0
00003034  60FE                    4224                  bra *
00003036                          4225                  
00003036  44FC 0001               4226  BCC1:           move #$01 , CCR
0000303A  6300 0004               4227                  bls.w BCC2            * Lower or Same       C=1 OR Z=1
0000303E  60FE                    4228                  bra *
00003040                          4229                   
00003040  44FC 0000               4230  BCC2:           move #$00 , CCR
00003044  6402                    4231                  bcc.s BCC3            * Carry Clear         C=0
00003046  60FE                    4232                  bra *
00003048                          4233                     
00003048  44FC 0001               4234  BCC3:           move #$01 , CCR
0000304C  6500 0004               4235                  bcs.w BCC4            * Carry Set           C=1
00003050  60FE                    4236                  bra *
00003052                          4237                     
00003052  44FC 0000               4238  BCC4:           move #$00 , CCR
00003056  6602                    4239                  bne.s BCC5            * Not Equal           Z=0
00003058  60FE                    4240                  bra *
0000305A                          4241                       
0000305A  44FC 0004               4242  BCC5:           move #$04 , CCR
0000305E  6700 0004               4243                  beq.w BCC6            * Equal               Z=1
00003062  60FE                    4244                  bra *
00003064                          4245                         
00003064  44FC 0000               4246  BCC6:           move #$00 , CCR
00003068  6802                    4247                  bvc.s BCC7            * V Clear             V=0
0000306A  60FE                    4248                  bra *
0000306C                          4249                           
0000306C  44FC 0002               4250  BCC7:           move #$02 , CCR
00003070  6900 0004               4251                  bvs.w BCC8            * V Set               V=1
00003074  60FE                    4252                  bra *
00003076                          4253                            
00003076  44FC 0000               4254  BCC8:           move #$00 , CCR
0000307A  6A02                    4255                  bpl.s BCC9            * Plus                N=0
0000307C  60FE                    4256                  bra *
0000307E                          4257                             
0000307E  44FC 0008               4258  BCC9:           move #$08 , CCR
00003082  6B00 0004               4259                  bmi.w BCC10           * Minus               N=1
00003086  60FE                    4260                  bra *
00003088                          4261                              
00003088  44FC 0000               4262  BCC10:          move #$00 , CCR
0000308C  6C02                    4263                  bge.s BCC11           * Greater or Equal    N=V
0000308E  60FE                    4264                  bra *
00003090                          4265                               
00003090  44FC 0002               4266  BCC11:          move #$02 , CCR
00003094  6D00 0004               4267                  blt.w BCC12           * Less Than           N!=V
00003098  60FE                    4268                  bra *
0000309A                          4269                                 
0000309A  44FC 000A               4270  BCC12:          move #$0A , CCR
0000309E  6E02                    4271                  bgt.s BCC13           * Greater Than        N=V  AND Z=0
000030A0  60FE                    4272                  bra *
000030A2                          4273                                  
000030A2  44FC 0006               4274  BCC13:          move #$06 , CCR
000030A6  6F00 0004               4275                  ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
000030AA  60FE                    4276                  bra *
000030AC                          4277                 
000030AC                          4278  
000030AC  4E75                    4279  BCC14:          rts
000030AE                          4280    
000030AE                          4281    
000030AE                          4282  *-----------------------------------------------------------
000030AE                          4283  *-----------------------------------------------------------
000030AE                          4284  * OPCODE : DBCC
000030AE                          4285  *-----------------------------------------------------------
000030AE                          4286  *-----------------------------------------------------------
000030AE                          4287  
000030AE  7003                    4288  op_DBCC:        move.l #$00000003 , d0    * Loop counter
000030B0  7200                    4289                  move.l #$00000000 , d1    * Accumulator
000030B2  44FC 0000               4290                  move #$00 , CCR
000030B6                          4291                  
000030B6  5201                    4292  DBCC_LOOP1:     addi.b #$1 , d1
000030B8  51C8 FFFC               4293                  dbf d0 , DBCC_LOOP1
000030BC                          4294                  
000030BC  0C81 00000004           4295                  cmpi.l #$00000004 , d1  * Check Accumulator results
000030C2  66FE                    4296                  bne *       
000030C4                          4297                    
000030C4  5201                    4298  DBCC_LOOP2:     addi.b #$1 , d1
000030C6  54C8 FFFC               4299                  dbcc d0 , DBCC_LOOP2    * Dont loop
000030CA                          4300                  
000030CA  0C81 00000005           4301                  cmpi.l #$00000005 , d1  * Check Accumulator results
000030D0  66FE                    4302                  bne *       
000030D2                          4303              
000030D2  4E75                    4304                  rts
000030D4                          4305                  
000030D4                          4306  
000030D4                          4307  *-----------------------------------------------------------
000030D4                          4308  *-----------------------------------------------------------
000030D4                          4309  * OPCODE : SCC
000030D4                          4310  *-----------------------------------------------------------
000030D4                          4311  *-----------------------------------------------------------
000030D4                          4312  
000030D4  44FC 0001               4313  op_SCC:         move #$01 , CCR             
000030D8  54F9 00010000           4314                  scc $00010000                   * Clear the EA byte
000030DE  0C39 0000 00010000      4315                  cmpi.b #$00 , $00010000
000030E6  66FE                    4316                  bne *       
000030E8                          4317  
000030E8  44FC 0000               4318                  move #$00 , CCR
000030EC  54F9 00010000           4319                  scc $00010000                   * Set the EA byte to 0xFF
000030F2  0C39 00FF 00010000      4320                  cmpi.b #$FF , $00010000
000030FA  66FE                    4321                  bne *       
000030FC                          4322  
000030FC  4E75                    4323                  rts
000030FE                          4324                  
000030FE                          4325  
000030FE                          4326  
000030FE                          4327  *-----------------------------------------------------------
000030FE                          4328  *-----------------------------------------------------------
000030FE                          4329  * OPCODE : ADDQ
000030FE                          4330  *-----------------------------------------------------------
000030FE                          4331  *-----------------------------------------------------------
000030FE                          4332  
000030FE                          4333  op_ADDQ:       
000030FE                          4334  
000030FE                          4335      * BYTE
000030FE  203C 000000FF           4336                  move.l #$000000FF , d0    * Loop counter
00003104  7200                    4337                  move.l #$00000000 , d1    * Flag results accumulator
00003106  7400                    4338                  move.l #$00000000 , d2    * Data results accumulator
00003108  7600                    4339                  move.l #$00000000 , d3   
0000310A  7800                    4340                  move.l #$00000000 , d4    
0000310C  7A00                    4341                  move.l #$00000000 , d5    
0000310E  7C00                    4342                  move.l #$00000000 , d6    
00003110  7E00                    4343                  move.l #$00000000 , d7    
00003112                          4344  
00003112  5605                    4345  ADDQ_LOOP1:     addq.b #3 , d5          
00003114  40C6                    4346                  move SR , d6      
00003116  0286 0000001F           4347                  andi.l #$1F , d6        * Isolate flags
0000311C  D286                    4348                  add.l d6 , d1           * Copy flag results into accumulator
0000311E  D485                    4349                  add.l d5 , d2           * Copy data results into data accumulator
00003120  51C8 FFF0               4350                  dbf d0 , ADDQ_LOOP1
00003124                          4351                  
00003124  0C81 0000043D           4352                  cmpi.l #$0000043D , d1
0000312A  66FE                    4353                  bne *       
0000312C  0C82 00007F80           4354                  cmpi.l #$00007F80 , d2
00003132  66FE                    4355                  bne *       
00003134                          4356  
00003134                          4357  
00003134                          4358      * WORD
00003134  203C 000000FF           4359                  move.l #$000000FF , d0    * Loop counter
0000313A  7200                    4360                  move.l #$00000000 , d1    * Flag results accumulator
0000313C  7400                    4361                  move.l #$00000000 , d2    * Data results accumulator
0000313E  7600                    4362                  move.l #$00000000 , d3   
00003140  7800                    4363                  move.l #$00000000 , d4    
00003142  2A3C 0000FFF0           4364                  move.l #$0000FFF0 , d5    
00003148  7C00                    4365                  move.l #$00000000 , d6    
0000314A  7E00                    4366                  move.l #$00000000 , d7   
0000314C  207C 00000100           4367                  move.l #$00000100 , a0   
00003152                          4368  
00003152  5A45                    4369  ADDQ_LOOP2:     addq.w #5 , d5   
00003154  40C6                    4370                  move SR , d6      
00003156  0286 0000001F           4371                  andi.l #$1F , d6        * Isolate flags
0000315C  D286                    4372                  add.l d6 , d1           * Copy flag results into accumulator
0000315E  D485                    4373                  add.l d5 , d2           * Copy data results into data accumulator
00003160  51C8 FFF0               4374                  dbf d0 , ADDQ_LOOP2
00003164                          4375  
00003164  0C81 00000029           4376                  cmpi.l #$00000029 , d1
0000316A  66FE                    4377                  bne *       
0000316C  0C82 00057280           4378                  cmpi.l #$00057280 , d2
00003172  66FE                    4379                  bne *       
00003174                          4380  
00003174                          4381  
00003174                          4382      * LONG
00003174  203C 000000FF           4383                  move.l #$000000FF , d0    * Loop counter
0000317A  7200                    4384                  move.l #$00000000 , d1    * Flag results accumulator
0000317C  7400                    4385                  move.l #$00000000 , d2    * Data results accumulator
0000317E  7600                    4386                  move.l #$00000000 , d3   
00003180  7800                    4387                  move.l #$00000000 , d4    
00003182  7AF0                    4388                  move.l #$FFFFFFF0 , d5    
00003184  7C00                    4389                  move.l #$00000000 , d6    
00003186  7E00                    4390                  move.l #$00000000 , d7   
00003188                          4391  
00003188  5285                    4392  ADDQ_LOOP3:     addq.l #1 , d5          
0000318A  40C6                    4393                  move SR , d6      
0000318C  0286 0000001F           4394                  andi.l #$1F , d6        * Isolate flags
00003192  D286                    4395                  add.l d6 , d1           * Copy flag results into accumulator
00003194  D485                    4396                  add.l d5 , d2           * Copy data results into data accumulator
00003196  51C8 FFF0               4397                  dbf d0 , ADDQ_LOOP3
0000319A                          4398  
0000319A  0C81 0000008D           4399                  cmpi.l #$0000008D , d1
000031A0  66FE                    4400                  bne *       
000031A2  0C82 00007080           4401                  cmpi.l #$00007080 , d2
000031A8  66FE                    4402                  bne *      
000031AA                          4403  
000031AA                          4404      * Check that Flags are not updated for Address registers
000031AA  207C 0000FFFF           4405                  move.l #$0000FFFF , a0   
000031B0  44FC 0000               4406                  move #$00 , CCR         * Clear flags
000031B4  5E48                    4407                  addq.w #$7 , a0         
000031B6  65FE                    4408                  bcs *
000031B8                          4409  
000031B8  4E75                    4410                  rts
000031BA                          4411          
000031BA                          4412  
000031BA                          4413  
000031BA                          4414  *-----------------------------------------------------------
000031BA                          4415  *-----------------------------------------------------------
000031BA                          4416  * OPCODE : SUBQ
000031BA                          4417  *-----------------------------------------------------------
000031BA                          4418  *-----------------------------------------------------------
000031BA                          4419  
000031BA                          4420  op_SUBQ:       
000031BA                          4421  
000031BA                          4422      * BYTE
000031BA  203C 000000FF           4423                  move.l #$000000FF , d0    * Loop counter
000031C0  7200                    4424                  move.l #$00000000 , d1    * Flag results accumulator
000031C2  243C 00001234           4425                  move.l #$00001234 , d2    * Data results accumulator
000031C8  7600                    4426                  move.l #$00000000 , d3   
000031CA  7800                    4427                  move.l #$00000000 , d4    
000031CC  7A12                    4428                  move.l #$00000012 , d5    
000031CE  7C00                    4429                  move.l #$00000000 , d6    
000031D0  7E00                    4430                  move.l #$00000000 , d7    
000031D2                          4431  
000031D2  5305                    4432  SUBQ_LOOP1:     subq.b #1 , d5          
000031D4  40C6                    4433                  move SR , d6      
000031D6  0286 0000001F           4434                  andi.l #$1F , d6        * Isolate flags
000031DC  D286                    4435                  add.l d6 , d1           * Copy flag results into accumulator
000031DE  D485                    4436                  add.l d5 , d2           * Copy data results into data accumulator
000031E0  51C8 FFF0               4437                  dbf d0 , SUBQ_LOOP1
000031E4                          4438                  
000031E4  0C81 00000417           4439                  cmpi.l #$00000417 , d1
000031EA  66FE                    4440                  bne *       
000031EC  0C82 000091B4           4441                  cmpi.l #$000091B4 , d2
000031F2  66FE                    4442                  bne *       
000031F4                          4443  
000031F4                          4444  
000031F4                          4445      * WORD
000031F4  203C 000000FF           4446                  move.l #$000000FF , d0    * Loop counter
000031FA  7200                    4447                  move.l #$00000000 , d1    * Flag results accumulator
000031FC  7400                    4448                  move.l #$00000000 , d2    * Data results accumulator
000031FE  7600                    4449                  move.l #$00000000 , d3   
00003200  7800                    4450                  move.l #$00000000 , d4    
00003202  7A02                    4451                  move.l #$00000002 , d5    
00003204  7C00                    4452                  move.l #$00000000 , d6    
00003206  7E00                    4453                  move.l #$00000000 , d7   
00003208  207C 00000100           4454                  move.l #$00000100 , a0   
0000320E                          4455  
0000320E  5B45                    4456  SUBQ_LOOP2:     subq.w #5 , d5   
00003210  40C6                    4457                  move SR , d6      
00003212  0286 0000001F           4458                  andi.l #$1F , d6        * Isolate flags
00003218  D286                    4459                  add.l d6 , d1           * Copy flag results into accumulator
0000321A  D485                    4460                  add.l d5 , d2           * Copy data results into data accumulator
0000321C  51C8 FFF0               4461                  dbf d0 , SUBQ_LOOP2
00003220                          4462  
00003220  0C81 00000811           4463                  cmpi.l #$00000811 , d1
00003226  66FE                    4464                  bne *       
00003228  0C82 00FD7F80           4465                  cmpi.l #$00FD7F80 , d2
0000322E  66FE                    4466                  bne *       
00003230                          4467  
00003230                          4468  
00003230                          4469      * LONG
00003230  203C 000000FF           4470                  move.l #$000000FF , d0    * Loop counter
00003236  7200                    4471                  move.l #$00000000 , d1    * Flag results accumulator
00003238  7400                    4472                  move.l #$00000000 , d2    * Data results accumulator
0000323A  7600                    4473                  move.l #$00000000 , d3   
0000323C  7800                    4474                  move.l #$00000000 , d4    
0000323E  7A07                    4475                  move.l #$00000007 , d5    
00003240  7C00                    4476                  move.l #$00000000 , d6    
00003242  7E00                    4477                  move.l #$00000000 , d7   
00003244                          4478  
00003244  5385                    4479  SUBQ_LOOP3:     subq.l #1 , d5          
00003246  40C6                    4480                  move SR , d6      
00003248  0286 0000001F           4481                  andi.l #$1F , d6        * Isolate flags
0000324E  D286                    4482                  add.l d6 , d1           * Copy flag results into accumulator
00003250  D485                    4483                  add.l d5 , d2           * Copy data results into data accumulator
00003252  51C8 FFF0               4484                  dbf d0 , SUBQ_LOOP3
00003256                          4485  
00003256  0C81 000007DD           4486                  cmpi.l #$000007DD , d1
0000325C  66FE                    4487                  bne *       
0000325E  0C82 FFFF8680           4488                  cmpi.l #$FFFF8680 , d2
00003264  66FE                    4489                  bne *      
00003266                          4490  
00003266                          4491      * Check that Flags are not updated for Address registers
00003266  207C 0001FFFF           4492                  move.l #$0001FFFF , a0   
0000326C  44FC 0000               4493                  move #$00 , CCR         * Clear flags
00003270  5F48                    4494                  subq.w #$7 , a0         
00003272  65FE                    4495                  bcs *
00003274                          4496  
00003274  4E75                    4497                  rts
00003276                          4498          
00003276                          4499          
00003276                          4500  
00003276                          4501  
00003276                          4502  *-----------------------------------------------------------
00003276                          4503  *-----------------------------------------------------------
00003276                          4504  * OPCODE : MOVEQ
00003276                          4505  *-----------------------------------------------------------
00003276                          4506  *-----------------------------------------------------------
00003276                          4507  
00003276                          4508  op_MOVEQ:     
00003276  7000                    4509                  move.l #$00000000 , d0  
00003278  7000                    4510                  moveq #$0 , d0
0000327A  66FE                    4511                  bne *
0000327C  0C80 00000000           4512                  cmpi.l #$00000000 , d0
00003282  66FE                    4513                  bne *
00003284                          4514  
00003284  7000                    4515                  move.l #$00000000 , d0  
00003286  7080                    4516                  moveq #$80 , d0
00003288  67FE                    4517                  beq *
0000328A  6AFE                    4518                  bpl *
0000328C  0C80 FFFFFF80           4519                  cmpi.l #$FFFFFF80 , d0
00003292  66FE                    4520                  bne *
00003294                          4521  
00003294                          4522  
00003294  4E75                    4523                  rts
00003296                          4524     
00003296                          4525     
00003296                          4526  *-----------------------------------------------------------
00003296                          4527  *-----------------------------------------------------------
00003296                          4528  * OPCODE : DIVU
00003296                          4529  *-----------------------------------------------------------
00003296                          4530  *-----------------------------------------------------------
00003296                          4531  
00003296                          4532  op_DIVU:     
00003296                          4533  
00003296  203C A5A5A5A5           4534                  move.l #$a5a5a5a5, d0        * Initial Numerator
0000329C  223C 00005A5A           4535                  move.l #$00005a5a, d1        * Initial Divisor
000032A2  243C A5A5A5A5           4536                  move.l #$a5a5a5a5, d2
000032A8  7600                    4537                  move.l #$00000000, d3
000032AA  7800                    4538                  move.l #$00000000, d4        * Cumulative data results
000032AC  7A00                    4539                  move.l #$00000000, d5       * Cumulative flag results
000032AE  7C0E                    4540                  move.l #$0000000E, d6       * Inner loop counter
000032B0  7E1E                    4541                  move.l #$0000001E, d7       * Outer loop counter
000032B2                          4542  
000032B2                          4543  
000032B2  80C1                    4544  DIVU_OUTER1:    divu d1  , d0               * !! Easy68K C not always cleared
000032B4  40C3                    4545                  move SR , d3      
000032B6  0283 0000000C           4546                  andi.l #$0C , d3            * Isolate flags 
000032BC  DA83                    4547                  add.l d3 , d5               * Copy flag results into accumulator
000032BE  D880                    4548                  add.l d0 , d4               * Copy data results into data accumulator   
000032C0  E289                    4549                  lsr.l #$1 , d1
000032C2                          4550  
000032C2  51CE FFEE               4551                  dbf d6 , DIVU_OUTER1
000032C6  E28A                    4552                  lsr.l #$1 , d2
000032C8  2002                    4553                  move.l d2 , d0
000032CA  223C 00005A5A           4554                  move.l #$00005a5a, d1       * Initial Divisor
000032D0  7C0E                    4555                  move.l #$0000000E, d6       * Inner loop counter
000032D2  51CF FFDE               4556                  dbf d7 , DIVU_OUTER1
000032D6                          4557                  
000032D6  0C84 92FEDB89           4558                  cmpi.l #$92FEDB89 , d4      * Check the data results
000032DC  66FE                    4559                  bne *                
000032DE                          4560                       
000032DE  0C85 00000110           4561                  cmpi.l #$00000110 , d5      * Check the Flag results
000032E4  66FE                    4562                  bne *                 
000032E6                          4563            
000032E6                          4564  
000032E6  4E75                    4565                  rts
000032E8                          4566                  
000032E8                          4567    
000032E8                          4568     
000032E8                          4569  *-----------------------------------------------------------
000032E8                          4570  *-----------------------------------------------------------
000032E8                          4571  * OPCODE : DIVS
000032E8                          4572  *-----------------------------------------------------------
000032E8                          4573  *-----------------------------------------------------------
000032E8                          4574  
000032E8                          4575  op_DIVS:     
000032E8                          4576  
000032E8  203C A5A5A5A5           4577                  move.l #$a5a5a5a5, d0        * Initial Numerator
000032EE  223C 00005A5A           4578                  move.l #$00005a5a, d1        * Initial Divisor
000032F4  243C A5A5A5A5           4579                  move.l #$a5a5a5a5, d2
000032FA  7600                    4580                  move.l #$00000000, d3
000032FC  7800                    4581                  move.l #$00000000, d4        * Cumulative data results
000032FE  7A00                    4582                  move.l #$00000000, d5       * Cumulative flag results
00003300  7C0E                    4583                  move.l #$0000000E, d6       * Inner loop counter
00003302  7E1E                    4584                  move.l #$0000001E, d7       * Outer loop counter
00003304                          4585  
00003304                          4586  
00003304  81C1                    4587  DIVS_OUTER1:    divs d1  , d0               * !! Easy68K C not always cleared
00003306  40C3                    4588                  move SR , d3      
00003308  0283 0000000C           4589                  andi.l #$0C , d3            * Isolate flags 
0000330E  DA83                    4590                  add.l d3 , d5               * Copy flag results into accumulator
00003310  D880                    4591                  add.l d0 , d4               * Copy data results into data accumulator   
00003312  E289                    4592                  lsr.l #$1 , d1
00003314                          4593  
00003314  51CE FFEE               4594                  dbf d6 , DIVS_OUTER1
00003318  E28A                    4595                  lsr.l #$1 , d2
0000331A  2002                    4596                  move.l d2 , d0
0000331C  223C 00005A5A           4597                  move.l #$00005a5a, d1       * Initial Divisor
00003322  7C0E                    4598                  move.l #$0000000E, d6       * Inner loop counter
00003324  51CF FFDE               4599                  dbf d7 , DIVS_OUTER1
00003328                          4600                  
00003328  0C84 4EC5D057           4601                  cmpi.l #$4EC5D057 , d4      * Check the data results
0000332E  66FE                    4602                  bne *                
00003330                          4603                       
00003330  0C85 00000038           4604                  cmpi.l #$00000038 , d5      * Check the Flag results
00003336  66FE                    4605                  bne *                 
00003338                          4606            
00003338                          4607  
00003338  4E75                    4608                  rts
0000333A                          4609         
0000333A                          4610  
0000333A                          4611     
0000333A                          4612  *-----------------------------------------------------------
0000333A                          4613  *-----------------------------------------------------------
0000333A                          4614  * OPCODE : OR
0000333A                          4615  *-----------------------------------------------------------
0000333A                          4616  *-----------------------------------------------------------
0000333A                          4617  
0000333A                          4618  op_OR:   
0000333A                          4619  
0000333A                          4620    ** <EA> to Register
0000333A                          4621  
0000333A  203C A5A5A5A5           4622                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003340  223C 8167E123           4623                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003346  243C A5A5A5A5           4624                  move.l #$a5a5a5a5, d2
0000334C  7600                    4625                  move.l #$00000000, d3
0000334E  7800                    4626                  move.l #$00000000, d4       * Cumulative data results
00003350  7A00                    4627                  move.l #$00000000, d5       * Cumulative flag results
00003352  7C1E                    4628                  move.l #$0000001E, d6       * Inner loop counter
00003354  7E1E                    4629                  move.l #$0000001E, d7       * Outer loop counter
00003356  207C 00000100           4630                  move.l #$00000100, a0       * Address for memory EA operations
0000335C                          4631  
0000335C                          4632  
0000335C                          4633  OR_OUTER1:    
0000335C                          4634   
0000335C                          4635      * BYTE     
0000335C  2081                    4636                  move.l d1 , (a0)
0000335E  8010                    4637                  or.b (a0) , d0             
00003360  40C3                    4638                  move SR , d3      
00003362  0283 0000000C           4639                  andi.l #$0C , d3            * Isolate flags 
00003368  DA83                    4640                  add.l d3 , d5               * Copy flag results into accumulator
0000336A  D880                    4641                  add.l d0 , d4               * Copy data results into data accumulator   
0000336C                          4642   
0000336C                          4643      * WORD      
0000336C  2081                    4644                  move.l d1 , (a0)
0000336E  8050                    4645                  or.w (a0) , d0             
00003370  40C3                    4646                  move SR , d3      
00003372  0283 0000000C           4647                  andi.l #$0C , d3            * Isolate flags 
00003378  DA83                    4648                  add.l d3 , d5               * Copy flag results into accumulator
0000337A  D880                    4649                  add.l d0 , d4               * Copy data results into data accumulator   
0000337C                          4650   
0000337C                          4651      * LONG      
0000337C  2081                    4652                  move.l d1 , (a0)
0000337E  8090                    4653                  or.l (a0) , d0             
00003380  40C3                    4654                  move SR , d3      
00003382  0283 0000000F           4655                  andi.l #$0F , d3            * Isolate flags 
00003388  DA83                    4656                  add.l d3 , d5               * Copy flag results into accumulator
0000338A  D880                    4657                  add.l d0 , d4               * Copy data results into data accumulator   
0000338C                          4658                  
0000338C                          4659                  
0000338C  E289                    4660                  lsr.l #$1 , d1
0000338E  51CE FFCC               4661                  dbf d6 , OR_OUTER1
00003392  E28A                    4662                  lsr.l #$1 , d2
00003394  223C 8167E123           4663                  move.l #$8167E123, d1       * Initial Data-Y
0000339A  7C1E                    4664                  move.l #$0000001E, d6       * Inner loop counter
0000339C  51CF FFBE               4665                  dbf d7 , OR_OUTER1
000033A0                          4666                  
000033A0  0C84 76EAC803           4667                  cmpi.l #$76EAC803 , d4      * Check the data results
000033A6  66FE                    4668                  bne *                
000033A8  0C85 00005A18           4669                  cmpi.l #$00005A18 , d5      * Check the Flag results
000033AE  66FE                    4670                  bne *                
000033B0                          4671                     
000033B0                          4672                     
000033B0                          4673    ** Register to <EA>
000033B0                          4674  
000033B0  203C 86738374           4675                  move.l #$86738374, d0       * Initial Data-X  Inner loop
000033B6  223C FC55F2FE           4676                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
000033BC  243C 86738374           4677                  move.l #$86738374, d2
000033C2  7600                    4678                  move.l #$00000000, d3
000033C4  7800                    4679                  move.l #$00000000, d4       * Cumulative data results
000033C6  7A00                    4680                  move.l #$00000000, d5       * Cumulative flag results
000033C8  7C1E                    4681                  move.l #$0000001E, d6       * Inner loop counter
000033CA  7E1D                    4682                  move.l #$0000001D, d7       * Outer loop counter
000033CC  207C 00000100           4683                  move.l #$00000100, a0       * Address for memory EA operations
000033D2                          4684  
000033D2                          4685  
000033D2                          4686  OR_OUTER2:    
000033D2                          4687   
000033D2                          4688      * BYTE     
000033D2  2080                    4689                  move.l d0 , (a0)
000033D4  8310                    4690                  or.b d1 , (a0)             
000033D6  40C3                    4691                  move SR , d3      
000033D8  0283 0000000C           4692                  andi.l #$0C , d3            * Isolate flags 
000033DE  DA83                    4693                  add.l d3 , d5               * Copy flag results into accumulator
000033E0  D890                    4694                  add.l (a0) , d4             * Copy data results into data accumulator   
000033E2                          4695   
000033E2                          4696      * WORD      
000033E2  2080                    4697                  move.l d0 , (a0)
000033E4  8350                    4698                  or.w d1 , (a0)  
000033E6  40C3                    4699                  move SR , d3      
000033E8  0283 0000000C           4700                  andi.l #$0C , d3            * Isolate flags 
000033EE  DA83                    4701                  add.l d3 , d5               * Copy flag results into accumulator
000033F0  D890                    4702                  add.l (a0) , d4             * Copy data results into data accumulator   
000033F2                          4703   
000033F2                          4704      * LONG      
000033F2  2080                    4705                  move.l d0 , (a0)
000033F4  8390                    4706                  or.l d1 , (a0)  
000033F6  40C3                    4707                  move SR , d3      
000033F8  0283 0000000F           4708                  andi.l #$0F , d3            * Isolate flags 
000033FE  DA83                    4709                  add.l d3 , d5               * Copy flag results into accumulator
00003400  D890                    4710                  add.l (a0) , d4             * Copy data results into data accumulator   
00003402                          4711                  
00003402                          4712                  
00003402  E289                    4713                  lsr.l #$1 , d1
00003404  51CE FFCC               4714                  dbf d6 , OR_OUTER2
00003408  E28A                    4715                  lsr.l #$1 , d2
0000340A  223C 8167E123           4716                  move.l #$8167E123, d1       * Initial Data-Y
00003410  7C1E                    4717                  move.l #$0000001E, d6       * Inner loop counter
00003412  51CF FFBE               4718                  dbf d7 , OR_OUTER2
00003416                          4719                  
00003416  0C84 FA82B9E4           4720                  cmpi.l #$FA82B9E4 , d4      * Check the data results
0000341C  66FE                    4721                  bne *                
0000341E  0C85 00005730           4722                  cmpi.l #$00005730 , d5      * Check the Flag results
00003424  66FE                    4723                  bne *                 
00003426                          4724                     
00003426                          4725                     
00003426  4E75                    4726                  rts
00003428                          4727                  
00003428                          4728                  
00003428                          4729  
00003428                          4730  *-----------------------------------------------------------
00003428                          4731  *-----------------------------------------------------------
00003428                          4732  * OPCODE : AND
00003428                          4733  *-----------------------------------------------------------
00003428                          4734  *-----------------------------------------------------------
00003428                          4735  
00003428                          4736  op_AND:   
00003428                          4737  
00003428                          4738    ** <EA> to Register
00003428                          4739  
00003428  203C A5A5A5A5           4740                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
0000342E  223C 8167E123           4741                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003434  243C A5A5A5A5           4742                  move.l #$a5a5a5a5, d2
0000343A  7600                    4743                  move.l #$00000000, d3
0000343C  7800                    4744                  move.l #$00000000, d4       * Cumulative data results
0000343E  7A00                    4745                  move.l #$00000000, d5       * Cumulative flag results
00003440  7C1E                    4746                  move.l #$0000001E, d6       * Inner loop counter
00003442  7E1E                    4747                  move.l #$0000001E, d7       * Outer loop counter
00003444  207C 00000100           4748                  move.l #$00000100, a0       * Address for memory EA operations
0000344A                          4749  
0000344A                          4750  
0000344A                          4751  AND_OUTER1:    
0000344A                          4752   
0000344A                          4753      * BYTE     
0000344A  2081                    4754                  move.l d1 , (a0)
0000344C  C010                    4755                  and.b (a0) , d0             
0000344E  40C3                    4756                  move SR , d3      
00003450  0283 0000000C           4757                  andi.l #$0C , d3            * Isolate flags 
00003456  DA83                    4758                  add.l d3 , d5               * Copy flag results into accumulator
00003458  D880                    4759                  add.l d0 , d4               * Copy data results into data accumulator   
0000345A                          4760   
0000345A                          4761      * WORD      
0000345A  2081                    4762                  move.l d1 , (a0)
0000345C  C050                    4763                  and.w (a0) , d0             
0000345E  40C3                    4764                  move SR , d3      
00003460  0283 0000000C           4765                  andi.l #$0C , d3            * Isolate flags 
00003466  DA83                    4766                  add.l d3 , d5               * Copy flag results into accumulator
00003468  D880                    4767                  add.l d0 , d4               * Copy data results into data accumulator   
0000346A                          4768   
0000346A                          4769      * LONG      
0000346A  2081                    4770                  move.l d1 , (a0)
0000346C  C090                    4771                  and.l (a0) , d0             
0000346E  40C3                    4772                  move SR , d3      
00003470  0283 0000000F           4773                  andi.l #$0F , d3            * Isolate flags 
00003476  DA83                    4774                  add.l d3 , d5               * Copy flag results into accumulator
00003478  D880                    4775                  add.l d0 , d4               * Copy data results into data accumulator   
0000347A                          4776                  
0000347A                          4777                  
0000347A  E289                    4778                  lsr.l #$1 , d1
0000347C  51CE FFCC               4779                  dbf d6 , AND_OUTER1
00003480  E28A                    4780                  lsr.l #$1 , d2
00003482  223C 8167E123           4781                  move.l #$8167E123, d1       * Initial Data-Y
00003488  7C1E                    4782                  move.l #$0000001E, d6       * Inner loop counter
0000348A  51CF FFBE               4783                  dbf d7 , AND_OUTER1
0000348E                          4784                  
0000348E  0C84 CF212883           4785                  cmpi.l #$CF212883 , d4      * Check the data results
00003494  66FE                    4786                  bne *                
00003496  0C85 00002D10           4787                  cmpi.l #$00002D10 , d5      * Check the Flag results
0000349C  66FE                    4788                  bne *                
0000349E                          4789                     
0000349E                          4790                     
0000349E                          4791    ** Register to <EA>
0000349E                          4792  
0000349E  203C 86738374           4793                  move.l #$86738374, d0       * Initial Data-X  Inner loop
000034A4  223C FC55F2FE           4794                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
000034AA  243C 86738374           4795                  move.l #$86738374, d2
000034B0  7600                    4796                  move.l #$00000000, d3
000034B2  7800                    4797                  move.l #$00000000, d4       * Cumulative data results
000034B4  7A00                    4798                  move.l #$00000000, d5       * Cumulative flag results
000034B6  7C1E                    4799                  move.l #$0000001E, d6       * Inner loop counter
000034B8  7E1D                    4800                  move.l #$0000001D, d7       * Outer loop counter
000034BA  207C 00000100           4801                  move.l #$00000100, a0       * Address for memory EA operations
000034C0                          4802  
000034C0                          4803  
000034C0                          4804  AND_OUTER2:    
000034C0                          4805   
000034C0                          4806      * BYTE     
000034C0  2080                    4807                  move.l d0 , (a0)
000034C2  C310                    4808                  and.b d1 , (a0)             
000034C4  40C3                    4809                  move SR , d3      
000034C6  0283 0000000C           4810                  andi.l #$0C , d3            * Isolate flags 
000034CC  DA83                    4811                  add.l d3 , d5               * Copy flag results into accumulator
000034CE  D890                    4812                  add.l (a0) , d4             * Copy data results into data accumulator   
000034D0                          4813   
000034D0                          4814      * WORD      
000034D0  2080                    4815                  move.l d0 , (a0)
000034D2  C350                    4816                  and.w d1 , (a0)  
000034D4  40C3                    4817                  move SR , d3      
000034D6  0283 0000000C           4818                  andi.l #$0C , d3            * Isolate flags 
000034DC  DA83                    4819                  add.l d3 , d5               * Copy flag results into accumulator
000034DE  D890                    4820                  add.l (a0) , d4             * Copy data results into data accumulator   
000034E0                          4821   
000034E0                          4822      * LONG      
000034E0  2080                    4823                  move.l d0 , (a0)
000034E2  C390                    4824                  and.l d1 , (a0)  
000034E4  40C3                    4825                  move SR , d3      
000034E6  0283 0000000F           4826                  andi.l #$0F , d3            * Isolate flags 
000034EC  DA83                    4827                  add.l d3 , d5               * Copy flag results into accumulator
000034EE  D890                    4828                  add.l (a0) , d4             * Copy data results into data accumulator   
000034F0                          4829                  
000034F0                          4830                  
000034F0  E289                    4831                  lsr.l #$1 , d1
000034F2  51CE FFCC               4832                  dbf d6 , AND_OUTER2
000034F6  E28A                    4833                  lsr.l #$1 , d2
000034F8  223C 8167E123           4834                  move.l #$8167E123, d1       * Initial Data-Y
000034FE  7C1E                    4835                  move.l #$0000001E, d6       * Inner loop counter
00003500  51CF FFBE               4836                  dbf d7 , AND_OUTER2
00003504                          4837                  
00003504  0C84 4A3DE544           4838                  cmpi.l #$4A3DE544 , d4      * Check the data results
0000350A  66FE                    4839                  bne *                
0000350C  0C85 000018E8           4840                  cmpi.l #$000018E8 , d5      * Check the Flag results
00003512  66FE                    4841                  bne *                 
00003514                          4842                     
00003514                          4843                     
00003514  4E75                    4844                  rts
00003516                          4845                  
00003516                          4846                 
00003516                          4847  
00003516                          4848  *-----------------------------------------------------------
00003516                          4849  *-----------------------------------------------------------
00003516                          4850  * OPCODE : EOR
00003516                          4851  *-----------------------------------------------------------
00003516                          4852  *-----------------------------------------------------------
00003516                          4853  
00003516                          4854  op_EOR:   
00003516                          4855   
00003516                          4856    ** Register to <EA>
00003516                          4857  
00003516  203C 86738374           4858                  move.l #$86738374, d0       * Initial Data-X  Inner loop
0000351C  223C FC55F2FE           4859                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
00003522  243C 86738374           4860                  move.l #$86738374, d2
00003528  7600                    4861                  move.l #$00000000, d3
0000352A  7800                    4862                  move.l #$00000000, d4       * Cumulative data results
0000352C  7A00                    4863                  move.l #$00000000, d5       * Cumulative flag results
0000352E  7C1E                    4864                  move.l #$0000001E, d6       * Inner loop counter
00003530  7E1D                    4865                  move.l #$0000001D, d7       * Outer loop counter
00003532  207C 00000100           4866                  move.l #$00000100, a0       * Address for memory EA operations
00003538                          4867  
00003538                          4868  
00003538                          4869  EOR_OUTER2:    
00003538                          4870   
00003538                          4871      * BYTE     
00003538  2080                    4872                  move.l d0 , (a0)
0000353A  B310                    4873                  eor.b d1 , (a0)             
0000353C  40C3                    4874                  move SR , d3      
0000353E  0283 0000000C           4875                  andi.l #$0C , d3            * Isolate flags 
00003544  DA83                    4876                  add.l d3 , d5               * Copy flag results into accumulator
00003546  D890                    4877                  add.l (a0) , d4             * Copy data results into data accumulator   
00003548                          4878   
00003548                          4879      * WORD      
00003548  2080                    4880                  move.l d0 , (a0)
0000354A  B350                    4881                  eor.w d1 , (a0)  
0000354C  40C3                    4882                  move SR , d3      
0000354E  0283 0000000C           4883                  andi.l #$0C , d3            * Isolate flags 
00003554  DA83                    4884                  add.l d3 , d5               * Copy flag results into accumulator
00003556  D890                    4885                  add.l (a0) , d4             * Copy data results into data accumulator   
00003558                          4886   
00003558                          4887      * LONG      
00003558  2080                    4888                  move.l d0 , (a0)
0000355A  B390                    4889                  eor.l d1 , (a0)  
0000355C  40C3                    4890                  move SR , d3      
0000355E  0283 0000000F           4891                  andi.l #$0F , d3            * Isolate flags 
00003564  DA83                    4892                  add.l d3 , d5               * Copy flag results into accumulator
00003566  D890                    4893                  add.l (a0) , d4             * Copy data results into data accumulator   
00003568                          4894                  
00003568                          4895                  
00003568  E289                    4896                  lsr.l #$1 , d1
0000356A  51CE FFCC               4897                  dbf d6 , EOR_OUTER2
0000356E  E28A                    4898                  lsr.l #$1 , d2
00003570  223C 8167E123           4899                  move.l #$8167E123, d1       * Initial Data-Y
00003576  7C1E                    4900                  move.l #$0000001E, d6       * Inner loop counter
00003578  51CF FFBE               4901                  dbf d7 , EOR_OUTER2
0000357C                          4902                  
0000357C  0C84 55C5EB70           4903                  cmpi.l #$55C5EB70 , d4      * Check the data results
00003582  66FE                    4904                  bne *                
00003584  0C85 00004430           4905                  cmpi.l #$00004430 , d5      * Check the Flag results
0000358A  66FE                    4906                  bne *                 
0000358C                          4907                     
0000358C                          4908                     
0000358C  4E75                    4909                  rts
0000358E                          4910                  
0000358E                          4911  
0000358E                          4912  *-----------------------------------------------------------
0000358E                          4913  *-----------------------------------------------------------
0000358E                          4914  * OPCODE : CMP
0000358E                          4915  *-----------------------------------------------------------
0000358E                          4916  *-----------------------------------------------------------
0000358E                          4917  
0000358E                          4918  op_CMP:   
0000358E                          4919  
0000358E                          4920  
0000358E                          4921    ** <EA> to Register
0000358E                          4922  
0000358E  203C A5A5A5A5           4923                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003594  223C 8167E123           4924                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
0000359A  243C A5A5A5A5           4925                  move.l #$a5a5a5a5, d2
000035A0  7600                    4926                  move.l #$00000000, d3
000035A2  7800                    4927                  move.l #$00000000, d4       * Cumulative data results
000035A4  7A00                    4928                  move.l #$00000000, d5       * Cumulative flag results
000035A6  7C1E                    4929                  move.l #$0000001E, d6       * Inner loop counter
000035A8  7E1E                    4930                  move.l #$0000001E, d7       * Outer loop counter
000035AA  207C 00000100           4931                  move.l #$00000100, a0       * Address for memory EA operations
000035B0                          4932  
000035B0                          4933  
000035B0                          4934  CMP_OUTER1:    
000035B0                          4935   
000035B0                          4936      * BYTE     
000035B0  2081                    4937                  move.l d1 , (a0)
000035B2  B010                    4938                  cmp.b (a0) , d0             
000035B4  40C3                    4939                  move SR , d3      
000035B6  0283 0000000F           4940                  andi.l #$0F , d3            * Isolate flags 
000035BC  DA83                    4941                  add.l d3 , d5               * Copy flag results into accumulator
000035BE  D880                    4942                  add.l d0 , d4               * Copy data results into data accumulator   
000035C0                          4943   
000035C0                          4944      * WORD      
000035C0  2081                    4945                  move.l d1 , (a0)
000035C2  B050                    4946                  cmp.w (a0) , d0             
000035C4  40C3                    4947                  move SR , d3      
000035C6  0283 0000000F           4948                  andi.l #$0F , d3            * Isolate flags 
000035CC  DA83                    4949                  add.l d3 , d5               * Copy flag results into accumulator
000035CE  D880                    4950                  add.l d0 , d4               * Copy data results into data accumulator   
000035D0                          4951   
000035D0                          4952      * LONG      
000035D0  2081                    4953                  move.l d1 , (a0)
000035D2  B090                    4954                  cmp.l (a0) , d0             
000035D4  40C3                    4955                  move SR , d3      
000035D6  0283 0000000F           4956                  andi.l #$0F , d3            * Isolate flags 
000035DC  DA83                    4957                  add.l d3 , d5               * Copy flag results into accumulator
000035DE  D880                    4958                  add.l d0 , d4               * Copy data results into data accumulator   
000035E0                          4959                  
000035E0                          4960                  
000035E0  E289                    4961                  lsr.l #$1 , d1
000035E2  51CE FFCC               4962                  dbf d6 , CMP_OUTER1
000035E6  E28A                    4963                  lsr.l #$1 , d2
000035E8  223C 8167E123           4964                  move.l #$8167E123, d1       * Initial Data-Y
000035EE  7C1E                    4965                  move.l #$0000001E, d6       * Inner loop counter
000035F0  51CF FFBE               4966                  dbf d7 , CMP_OUTER1
000035F4                          4967                  
000035F4  0C84 7878712F           4968                  cmpi.l #$7878712F , d4      * Check the data results
000035FA  66FE                    4969                  bne *                
000035FC  0C85 00005502           4970                  cmpi.l #$00005502 , d5      * Check the Flag results
00003602  66FE                    4971                  bne *                
00003604                          4972                     
00003604                          4973                     
00003604                          4974  
00003604  4E75                    4975                  rts
00003606                          4976  
00003606                          4977  
00003606                          4978  *-----------------------------------------------------------
00003606                          4979  *-----------------------------------------------------------
00003606                          4980  * OPCODE : CMPA
00003606                          4981  *-----------------------------------------------------------
00003606                          4982  *-----------------------------------------------------------
00003606                          4983  
00003606                          4984  op_CMPA:   
00003606                          4985  
00003606                          4986  
00003606                          4987    ** <EA> to Register
00003606                          4988  
00003606  207C A5A5A5A5           4989                  move.l #$a5a5a5a5, a0       * Initial Data-X  Inner loop
0000360C  223C 8167E123           4990                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003612  243C A5A5A5A5           4991                  move.l #$a5a5a5a5, d2
00003618  7600                    4992                  move.l #$00000000, d3
0000361A  7800                    4993                  move.l #$00000000, d4       * Cumulative data results
0000361C  7A00                    4994                  move.l #$00000000, d5       * Cumulative flag results
0000361E  7C1E                    4995                  move.l #$0000001E, d6       * Inner loop counter
00003620  7E1E                    4996                  move.l #$0000001E, d7       * Outer loop counter
00003622  227C 00000100           4997                  move.l #$00000100, a1       * Address for memory EA operations
00003628                          4998  
00003628                          4999  
00003628                          5000  CMPA_OUTER1:    
00003628                          5001    
00003628                          5002   
00003628                          5003      * WORD      
00003628  2281                    5004                  move.l d1 , (a1)
0000362A  B0D1                    5005                  cmpa.w (a1) , a0             
0000362C  40C3                    5006                  move SR , d3      
0000362E  0283 0000000F           5007                  andi.l #$0F , d3            * Isolate flags 
00003634  DA83                    5008                  add.l d3 , d5               * Copy flag results into accumulator
00003636  D888                    5009                  add.l a0 , d4               * Copy data results into data accumulator   
00003638                          5010   
00003638                          5011      * LONG      
00003638  2281                    5012                  move.l d1 , (a1)
0000363A  B1D1                    5013                  cmpa.l (a1) , a0             
0000363C  40C3                    5014                  move SR , d3      
0000363E  0283 0000000F           5015                  andi.l #$0F , d3            * Isolate flags 
00003644  DA83                    5016                  add.l d3 , d5               * Copy flag results into accumulator
00003646  D888                    5017                  add.l a0 , d4               * Copy data results into data accumulator   
00003648                          5018                  
00003648                          5019                  
00003648  E289                    5020                  lsr.l #$1 , d1
0000364A  51CE FFDC               5021                  dbf d6 , CMPA_OUTER1
0000364E  E28A                    5022                  lsr.l #$1 , d2
00003650  223C 8167E123           5023                  move.l #$8167E123, d1       * Initial Data-Y
00003656  7C1E                    5024                  move.l #$0000001E, d6       * Inner loop counter
00003658  51CF FFCE               5025                  dbf d7 , CMPA_OUTER1
0000365C                          5026                  
0000365C  0C84 A5A5A0CA           5027                  cmpi.l #$a5a5a0ca , d4      * Check the data results
00003662  66FE                    5028                  bne *                
00003664  0C85 00003A7D           5029                  cmpi.l #$00003A7D , d5      * Check the Flag results
0000366A  66FE                    5030                  bne *                
0000366C                          5031                         
0000366C                          5032  
0000366C  4E75                    5033                  rts
0000366E                          5034  
0000366E                          5035  
0000366E                          5036  
0000366E                          5037  *-----------------------------------------------------------
0000366E                          5038  *-----------------------------------------------------------
0000366E                          5039  * OPCODE : CMPM
0000366E                          5040  *-----------------------------------------------------------
0000366E                          5041  *-----------------------------------------------------------
0000366E                          5042  
0000366E                          5043  op_CMPM: 
0000366E                          5044  
0000366E  207C 00000100           5045                  move.l #$00000100, a0       * Address for Data-X
00003674  227C 00000200           5046                  move.l #$00000200, a1       * Address for Data-Y
0000367A  7000                    5047                  move.l #$00000000, d0       
0000367C  7200                    5048                  move.l #$00000000, d1       
0000367E  7400                    5049                  move.l #$00000000, d2       
00003680                          5050                  
00003680  20FC 11FF5580           5051                  move.l #$11FF5580 , (a0)+   * Populate test data
00003686  20FC 1111FFFF           5052                  move.l #$1111FFFF , (a0)+   * Populate test data
0000368C  20FC 33333333           5053                  move.l #$33333333 , (a0)+   * Populate test data
00003692  20FC 44444444           5054                  move.l #$44444444 , (a0)+   * Populate test data
00003698                          5055                  
00003698  22FC 80FF337F           5056                  move.l #$80FF337F , (a1)+   * Populate test data
0000369E  22FC FFFF1111           5057                  move.l #$FFFF1111 , (a1)+   * Populate test data
000036A4  22FC 33333333           5058                  move.l #$33333333 , (a1)+   * Populate test data
000036AA  22FC 44444444           5059                  move.l #$44444444 , (a1)+   * Populate test data
000036B0                          5060                  
000036B0  207C 00000100           5061                  move.l #$00000100, a0       * Address for Data-X
000036B6  227C 00000200           5062                  move.l #$00000200, a1       * Address for Data-Y
000036BC  7C0F                    5063                  move.l #$0000000F, d6       * Loop counter
000036BE                          5064                  
000036BE  B308                    5065  CMPM_LOOP1:     cmpm.b (a0)+ , (a1)+
000036C0  40C3                    5066                  move SR , d3      
000036C2  0283 0000000F           5067                  andi.l #$0F , d3            * Isolate flags 
000036C8  D083                    5068                  add.l d3 , d0               * Copy flag results into accumulator                
000036CA  51CE FFF2               5069                  dbf d6 , CMPM_LOOP1
000036CE                          5070  
000036CE                          5071  
000036CE  207C 00000100           5072                  move.l #$00000100, a0       * Address for Data-X
000036D4  227C 00000200           5073                  move.l #$00000200, a1       * Address for Data-Y
000036DA  7C07                    5074                  move.l #$00000007, d6       * Loop counter
000036DC                          5075                  
000036DC  B348                    5076  CMPM_LOOP2:     cmpm.w (a0)+ , (a1)+
000036DE  40C3                    5077                  move SR , d3      
000036E0  0283 0000000F           5078                  andi.l #$0F , d3            * Isolate flags 
000036E6  D283                    5079                  add.l d3 , d1               * Copy flag results into accumulator                
000036E8  51CE FFF2               5080                  dbf d6 , CMPM_LOOP2
000036EC                          5081  
000036EC                          5082  
000036EC  207C 00000100           5083                  move.l #$00000100, a0       * Address for Data-X
000036F2  227C 00000200           5084                  move.l #$00000200, a1       * Address for Data-Y
000036F8  7C03                    5085                  move.l #$00000003, d6       * Loop counter
000036FA                          5086                  
000036FA  B388                    5087  CMPM_LOOP3:     cmpm.l (a0)+ , (a1)+
000036FC  40C3                    5088                  move SR , d3      
000036FE  0283 0000000F           5089                  andi.l #$0F , d3            * Isolate flags 
00003704  D483                    5090                  add.l d3 , d2               * Copy flag results into accumulator                
00003706  51CE FFF2               5091                  dbf d6 , CMPM_LOOP3
0000370A                          5092  
0000370A                          5093  
0000370A  0C80 0000004C           5094                  cmpi.l #$0000004C , d0      * Check the data results
00003710  66FE                    5095                  bne *                
00003712  0C81 00000024           5096                  cmpi.l #$00000024 , d1      
00003718  66FE                    5097                  bne *                
0000371A  0C82 00000012           5098                  cmpi.l #$00000012 , d2      
00003720  66FE                    5099                  bne *                
00003722                          5100          
00003722  4E75                    5101                  rts
00003724                          5102  
00003724                          5103  
00003724                          5104  *-----------------------------------------------------------
00003724                          5105  *-----------------------------------------------------------
00003724                          5106  * OPCODE : ADD
00003724                          5107  *-----------------------------------------------------------
00003724                          5108  *-----------------------------------------------------------
00003724                          5109  
00003724                          5110  op_ADD: 
00003724                          5111  
00003724                          5112  
00003724                          5113    ** <EA> to Register
00003724  203C A5A5A5A5           5114                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
0000372A  223C 8167E123           5115                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003730  243C A5A5A5A5           5116                  move.l #$a5a5a5a5, d2
00003736  7600                    5117                  move.l #$00000000, d3
00003738  7800                    5118                  move.l #$00000000, d4       * Cumulative data results
0000373A  7A00                    5119                  move.l #$00000000, d5       * Cumulative flag results
0000373C  7C1E                    5120                  move.l #$0000001E, d6       * Inner loop counter
0000373E  7E1E                    5121                  move.l #$0000001E, d7       * Outer loop counter
00003740  207C 00000100           5122                  move.l #$00000100, a0       * Address for memory EA operations
00003746                          5123  
00003746                          5124  
00003746                          5125  ADD_OUTER1:    
00003746                          5126   
00003746                          5127      * BYTE     
00003746  2081                    5128                  move.l d1 , (a0)
00003748  D010                    5129                  add.b (a0) , d0             
0000374A  40C3                    5130                  move SR , d3      
0000374C  0283 0000001F           5131                  andi.l #$1F , d3            * Isolate flags 
00003752  DA83                    5132                  add.l d3 , d5               * Copy flag results into accumulator
00003754  D880                    5133                  add.l d0 , d4               * Copy data results into data accumulator   
00003756                          5134   
00003756                          5135      * WORD      
00003756  2081                    5136                  move.l d1 , (a0)
00003758  D050                    5137                  add.w (a0) , d0             
0000375A  40C3                    5138                  move SR , d3      
0000375C  0283 0000000C           5139                  andi.l #$0C , d3            * Isolate flags 
00003762  DA83                    5140                  add.l d3 , d5               * Copy flag results into accumulator
00003764  D880                    5141                  add.l d0 , d4               * Copy data results into data accumulator   
00003766                          5142   
00003766                          5143      * LONG      
00003766  2081                    5144                  move.l d1 , (a0)
00003768  D090                    5145                  add.l (a0) , d0             
0000376A  40C3                    5146                  move SR , d3      
0000376C  0283 0000000F           5147                  andi.l #$0F , d3            * Isolate flags 
00003772  DA83                    5148                  add.l d3 , d5               * Copy flag results into accumulator
00003774  D880                    5149                  add.l d0 , d4               * Copy data results into data accumulator   
00003776                          5150                  
00003776                          5151                  
00003776  E299                    5152                  ror.l #$1 , d1
00003778  51CE FFCC               5153                  dbf d6 , ADD_OUTER1
0000377C  E29A                    5154                  ror.l #$1 , d2
0000377E  223C 8167E123           5155                  move.l #$8167E123, d1       * Initial Data-Y
00003784  7C1E                    5156                  move.l #$0000001E, d6       * Inner loop counter
00003786  51CF FFBE               5157                  dbf d7 , ADD_OUTER1
0000378A                          5158                  
0000378A  0C84 23ED428F           5159                  cmpi.l #$23ED428F , d4      * Check the data results
00003790  66FE                    5160                  bne *                
00003792  0C85 00004C96           5161                  cmpi.l #$00004C96 , d5      * Check the Flag results
00003798  66FE                    5162                  bne *                
0000379A                          5163                     
0000379A                          5164                     
0000379A                          5165    ** Register to <EA>
0000379A  203C 86738374           5166                  move.l #$86738374, d0       * Initial Data-X  Inner loop
000037A0  223C FC55F2FE           5167                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
000037A6  243C 86738374           5168                  move.l #$86738374, d2
000037AC  7600                    5169                  move.l #$00000000, d3
000037AE  7800                    5170                  move.l #$00000000, d4       * Cumulative data results
000037B0  7A00                    5171                  move.l #$00000000, d5       * Cumulative flag results
000037B2  7C1E                    5172                  move.l #$0000001E, d6       * Inner loop counter
000037B4  7E1D                    5173                  move.l #$0000001D, d7       * Outer loop counter
000037B6  207C 00000100           5174                  move.l #$00000100, a0       * Address for memory EA operations
000037BC                          5175  
000037BC                          5176  
000037BC                          5177  ADD_OUTER2:    
000037BC                          5178   
000037BC                          5179      * BYTE     
000037BC  2080                    5180                  move.l d0 , (a0)
000037BE  D310                    5181                  add.b d1 , (a0)             
000037C0  40C3                    5182                  move SR , d3      
000037C2  0283 0000000C           5183                  andi.l #$0C , d3            * Isolate flags 
000037C8  DA83                    5184                  add.l d3 , d5               * Copy flag results into accumulator
000037CA  D890                    5185                  add.l (a0) , d4             * Copy data results into data accumulator   
000037CC                          5186   
000037CC                          5187      * WORD      
000037CC  2080                    5188                  move.l d0 , (a0)
000037CE  D350                    5189                  add.w d1 , (a0)  
000037D0  40C3                    5190                  move SR , d3      
000037D2  0283 0000001F           5191                  andi.l #$1F , d3            * Isolate flags 
000037D8  DA83                    5192                  add.l d3 , d5               * Copy flag results into accumulator
000037DA  D890                    5193                  add.l (a0) , d4             * Copy data results into data accumulator   
000037DC                          5194   
000037DC                          5195      * LONG      
000037DC  2080                    5196                  move.l d0 , (a0)
000037DE  D390                    5197                  add.l d1 , (a0)  
000037E0  40C3                    5198                  move SR , d3      
000037E2  0283 0000000F           5199                  andi.l #$0F , d3            * Isolate flags 
000037E8  DA83                    5200                  add.l d3 , d5               * Copy flag results into accumulator
000037EA  D890                    5201                  add.l (a0) , d4             * Copy data results into data accumulator   
000037EC                          5202                  
000037EC                          5203                  
000037EC  E299                    5204                  ror.l #$1 , d1
000037EE  51CE FFCC               5205                  dbf d6 , ADD_OUTER2
000037F2  E29A                    5206                  ror.l #$1 , d2
000037F4  223C 8167E123           5207                  move.l #$8167E123, d1       * Initial Data-Y
000037FA  7C1E                    5208                  move.l #$0000001E, d6       * Inner loop counter
000037FC  51CF FFBE               5209                  dbf d7 , ADD_OUTER2
00003800                          5210                  
00003800  0C84 6701B884           5211                  cmpi.l #$6701B884 , d4      * Check the data results
00003806  66FE                    5212                  bne *                
00003808  0C85 00005467           5213                  cmpi.l #$00005467 , d5      * Check the Flag results
0000380E  66FE                    5214                  bne *                 
00003810                          5215                     
00003810  4E75                    5216                  rts
00003812                          5217  
00003812                          5218  *-----------------------------------------------------------
00003812                          5219  *-----------------------------------------------------------
00003812                          5220  * OPCODE : SUB
00003812                          5221  *-----------------------------------------------------------
00003812                          5222  *-----------------------------------------------------------
00003812                          5223  
00003812                          5224  op_SUB: 
00003812                          5225  
00003812                          5226    ** <EA> to Register
00003812  203C A5A5A5A5           5227                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003818  223C 8167E123           5228                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
0000381E  243C A5A5A5A5           5229                  move.l #$a5a5a5a5, d2
00003824  7600                    5230                  move.l #$00000000, d3
00003826  7800                    5231                  move.l #$00000000, d4       * Cumulative data results
00003828  7A00                    5232                  move.l #$00000000, d5       * Cumulative flag results
0000382A  7C1E                    5233                  move.l #$0000001E, d6       * Inner loop counter
0000382C  7E1E                    5234                  move.l #$0000001E, d7       * Outer loop counter
0000382E  207C 00000100           5235                  move.l #$00000100, a0       * Address for memory EA operations
00003834                          5236  
00003834                          5237  
00003834                          5238  SUB_OUTER1:    
00003834                          5239   
00003834                          5240      * BYTE     
00003834  2081                    5241                  move.l d1 , (a0)
00003836  9010                    5242                  sub.b (a0) , d0             
00003838  40C3                    5243                  move SR , d3      
0000383A  0283 0000001F           5244                  andi.l #$1F , d3            * Isolate flags 
00003840  DA83                    5245                  add.l d3 , d5               * Copy flag results into accumulator
00003842  D880                    5246                  add.l d0 , d4               * Copy data results into data accumulator   
00003844                          5247   
00003844                          5248      * WORD      
00003844  2081                    5249                  move.l d1 , (a0)
00003846  9050                    5250                  sub.w (a0) , d0             
00003848  40C3                    5251                  move SR , d3      
0000384A  0283 0000000C           5252                  andi.l #$0C , d3            * Isolate flags 
00003850  DA83                    5253                  add.l d3 , d5               * Copy flag results into accumulator
00003852  D880                    5254                  add.l d0 , d4               * Copy data results into data accumulator   
00003854                          5255   
00003854                          5256      * LONG      
00003854  2081                    5257                  move.l d1 , (a0)
00003856  9090                    5258                  sub.l (a0) , d0             
00003858  40C3                    5259                  move SR , d3      
0000385A  0283 0000000F           5260                  andi.l #$0F , d3            * Isolate flags 
00003860  DA83                    5261                  add.l d3 , d5               * Copy flag results into accumulator
00003862  D880                    5262                  add.l d0 , d4               * Copy data results into data accumulator   
00003864                          5263                  
00003864                          5264                  
00003864  E299                    5265                  ror.l #$1 , d1
00003866  51CE FFCC               5266                  dbf d6 , SUB_OUTER1
0000386A  E29A                    5267                  ror.l #$1 , d2
0000386C  223C 8167E123           5268                  move.l #$8167E123, d1       * Initial Data-Y
00003872  7C1E                    5269                  move.l #$0000001E, d6       * Inner loop counter
00003874  51CF FFBE               5270                  dbf d7 , SUB_OUTER1
00003878                          5271                  
00003878  0C84 1A8D14CF           5272                  cmpi.l #$1A8D14CF , d4      * Check the data results
0000387E  66FE                    5273                  bne *                
00003880  0C85 00004FC4           5274                  cmpi.l #$00004FC4 , d5      * Check the Flag results
00003886  66FE                    5275                  bne *                
00003888                          5276                     
00003888                          5277                     
00003888                          5278    ** Register to <EA>
00003888  203C 86738374           5279                  move.l #$86738374, d0       * Initial Data-X  Inner loop
0000388E  223C FC55F2FE           5280                  move.l #$FC55F2FE, d1       * Initial Data-Y  Outer loop
00003894  243C 86738374           5281                  move.l #$86738374, d2
0000389A  7600                    5282                  move.l #$00000000, d3
0000389C  7800                    5283                  move.l #$00000000, d4       * Cumulative data results
0000389E  7A00                    5284                  move.l #$00000000, d5       * Cumulative flag results
000038A0  7C1E                    5285                  move.l #$0000001E, d6       * Inner loop counter
000038A2  7E1D                    5286                  move.l #$0000001D, d7       * Outer loop counter
000038A4  207C 00000100           5287                  move.l #$00000100, a0       * Address for memory EA operations
000038AA                          5288  
000038AA                          5289  
000038AA                          5290  SUB_OUTER2:    
000038AA                          5291   
000038AA                          5292      * BYTE     
000038AA  2080                    5293                  move.l d0 , (a0)
000038AC  9310                    5294                  sub.b d1 , (a0)             
000038AE  40C3                    5295                  move SR , d3      
000038B0  0283 0000000C           5296                  andi.l #$0C , d3            * Isolate flags 
000038B6  DA83                    5297                  add.l d3 , d5               * Copy flag results into accumulator
000038B8  D890                    5298                  add.l (a0) , d4             * Copy data results into data accumulator   
000038BA                          5299   
000038BA                          5300      * WORD      
000038BA  2080                    5301                  move.l d0 , (a0)
000038BC  9350                    5302                  sub.w d1 , (a0)  
000038BE  40C3                    5303                  move SR , d3      
000038C0  0283 0000001F           5304                  andi.l #$1F , d3            * Isolate flags 
000038C6  DA83                    5305                  add.l d3 , d5               * Copy flag results into accumulator
000038C8  D890                    5306                  add.l (a0) , d4             * Copy data results into data accumulator   
000038CA                          5307   
000038CA                          5308      * LONG      
000038CA  2080                    5309                  move.l d0 , (a0)
000038CC  9390                    5310                  sub.l d1 , (a0)  
000038CE  40C3                    5311                  move SR , d3      
000038D0  0283 0000000F           5312                  andi.l #$0F , d3            * Isolate flags 
000038D6  DA83                    5313                  add.l d3 , d5               * Copy flag results into accumulator
000038D8  D890                    5314                  add.l (a0) , d4             * Copy data results into data accumulator   
000038DA                          5315                  
000038DA                          5316                  
000038DA  E299                    5317                  ror.l #$1 , d1
000038DC  51CE FFCC               5318                  dbf d6 , SUB_OUTER2
000038E0  E29A                    5319                  ror.l #$1 , d2
000038E2  223C 8167E123           5320                  move.l #$8167E123, d1       * Initial Data-Y
000038E8  7C1E                    5321                  move.l #$0000001E, d6       * Inner loop counter
000038EA  51CF FFBE               5322                  dbf d7 , SUB_OUTER2
000038EE                          5323                  
000038EE  0C84 36D38BEC           5324                  cmpi.l #$36D38BEC , d4      * Check the data results
000038F4  66FE                    5325                  bne *                
000038F6  0C85 000045A5           5326                  cmpi.l #$000045A5 , d5      * Check the Flag results
000038FC  66FE                    5327                  bne *                 
000038FE                          5328                     
000038FE                          5329  
000038FE                          5330  
000038FE                          5331  
000038FE  4E75                    5332                  rts
00003900                          5333  
00003900                          5334  
00003900                          5335  
00003900                          5336  *-----------------------------------------------------------
00003900                          5337  *-----------------------------------------------------------
00003900                          5338  * OPCODE : ADDA
00003900                          5339  *-----------------------------------------------------------
00003900                          5340  *-----------------------------------------------------------
00003900                          5341  
00003900                          5342  op_ADDA: 
00003900                          5343  
00003900                          5344    ** <EA> to Register
00003900  203C A5A5A5A5           5345                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003906  223C 8167E123           5346                  move.l #$8167E123, d1       
0000390C  243C A5A5A5A5           5347                  move.l #$a5a5a5a5, d2
00003912  7600                    5348                  move.l #$00000000, d3
00003914  7800                    5349                  move.l #$00000000, d4       * Cumulative data results
00003916  7A00                    5350                  move.l #$00000000, d5       * Cumulative flag results
00003918  7C1E                    5351                  move.l #$0000001E, d6       * Inner loop counter
0000391A  7E1E                    5352                  move.l #$0000001E, d7       * Outer loop counter
0000391C  207C 00000100           5353                  move.l #$00000100, a0       * Address for memory EA operations
00003922  227C 8167E123           5354                  move.l #$8167E123, a1       * Initial Data-Y  Outer loop
00003928                          5355  
00003928                          5356  ADDA_OUTER1:    
00003928                          5357  
00003928                          5358      * WORD      
00003928                          5359                *  move.l d1 , (a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
00003928                          5360                * adda.w (a0) , a1             
00003928                          5361                * add.l a1 , d4               * Copy data results into data accumulator   
00003928                          5362   
00003928                          5363      * LONG      
00003928  2081                    5364                  move.l d1 , (a0)
0000392A  D3D0                    5365                  adda.l (a0) , a1             
0000392C  D889                    5366                  add.l a1 , d4               * Copy data results into data accumulator   
0000392E                          5367                  
0000392E  E299                    5368                  ror.l #$1 , d1
00003930  51CE FFF6               5369                  dbf d6 , ADDA_OUTER1
00003934  E299                    5370                  ror.l #$1 , d1
00003936  2241                    5371                  move.l d1 , a1
00003938  223C 8167E123           5372                  move.l #$8167E123, d1       * Initial Data-Y
0000393E  7C1E                    5373                  move.l #$0000001E, d6       * Inner loop counter
00003940  51CF FFE6               5374                  dbf d7 , ADDA_OUTER1
00003944                          5375                  
00003944  0C84 AC04DB4C           5376                  cmpi.l #$AC04DB4C , d4      * Check the data results
0000394A  66FE                    5377                  bne *                
0000394C                          5378                
0000394C                          5379                   
0000394C  4E75                    5380                  rts
0000394E                          5381  
0000394E                          5382  
0000394E                          5383  *-----------------------------------------------------------
0000394E                          5384  *-----------------------------------------------------------
0000394E                          5385  * OPCODE : SUBA
0000394E                          5386  *-----------------------------------------------------------
0000394E                          5387  *-----------------------------------------------------------
0000394E                          5388  
0000394E                          5389  op_SUBA: 
0000394E                          5390  
0000394E                          5391    ** <EA> to Register
0000394E  203C A5A5A5A5           5392                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003954  223C 8167E123           5393                  move.l #$8167E123, d1       
0000395A  243C A5A5A5A5           5394                  move.l #$a5a5a5a5, d2
00003960  7600                    5395                  move.l #$00000000, d3
00003962  7800                    5396                  move.l #$00000000, d4       * Cumulative data results
00003964  7A00                    5397                  move.l #$00000000, d5       * Cumulative flag results
00003966  7C1E                    5398                  move.l #$0000001E, d6       * Inner loop counter
00003968  7E1E                    5399                  move.l #$0000001E, d7       * Outer loop counter
0000396A  207C 00000100           5400                  move.l #$00000100, a0       * Address for memory EA operations
00003970  227C 8167E123           5401                  move.l #$8167E123, a1       * Initial Data-Y  Outer loop
00003976                          5402  
00003976                          5403  SUBA_OUTER1:    
00003976                          5404  
00003976                          5405      * WORD      
00003976                          5406                *  move.l d1 , (a0) * !!! Easy68K is not altering the whole 32-bits of the address register
00003976                          5407                *  suba.w (a0) , a1             
00003976                          5408                *  add.l a1 , d4               * Copy data results into data accumulator   
00003976                          5409   
00003976                          5410      * LONG      
00003976  2081                    5411                  move.l d1 , (a0)
00003978  93D0                    5412                  suba.l (a0) , a1             
0000397A  D889                    5413                  add.l a1 , d4               * Copy data results into data accumulator   
0000397C                          5414                  
0000397C  E299                    5415                  ror.l #$1 , d1
0000397E  51CE FFF6               5416                  dbf d6 , SUBA_OUTER1
00003982  E299                    5417                  ror.l #$1 , d1
00003984  2241                    5418                  move.l d1 , a1
00003986  223C 8167E123           5419                  move.l #$8167E123, d1       * Initial Data-Y
0000398C  7C1E                    5420                  move.l #$0000001E, d6       * Inner loop counter
0000398E  51CF FFE6               5421                  dbf d7 , SUBA_OUTER1
00003992                          5422                  
00003992  0C84 E1E36D7A           5423                  cmpi.l #$E1E36D7A , d4      * Check the data results
00003998  66FE                    5424                  bne *                
0000399A                          5425                
0000399A                          5426                   
0000399A  4E75                    5427                  rts
0000399C                          5428  
0000399C                          5429  
0000399C                          5430  
0000399C                          5431  *-----------------------------------------------------------
0000399C                          5432  *-----------------------------------------------------------
0000399C                          5433  * OPCODE : ADDX
0000399C                          5434  *-----------------------------------------------------------
0000399C                          5435  *-----------------------------------------------------------
0000399C                          5436  
0000399C                          5437  op_ADDX: 
0000399C                          5438  
0000399C                          5439  
0000399C                          5440    ** Register to Register
0000399C  203C A5A5A5A5           5441                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
000039A2  223C 8167E123           5442                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
000039A8  243C A5A5A5A5           5443                  move.l #$a5a5a5a5, d2
000039AE  7600                    5444                  move.l #$00000000, d3
000039B0  7800                    5445                  move.l #$00000000, d4       * Cumulative data results
000039B2  7A00                    5446                  move.l #$00000000, d5       * Cumulative flag results
000039B4  7C1E                    5447                  move.l #$0000001E, d6       * Inner loop counter
000039B6  7E1E                    5448                  move.l #$0000001E, d7       * Outer loop counter
000039B8  207C 00000100           5449                  move.l #$00000100, a0       * Address for memory EA operations
000039BE                          5450  
000039BE                          5451  
000039BE                          5452  ADDX_OUTER1:    
000039BE                          5453   
000039BE                          5454      * BYTE    
000039BE  2002                    5455                  move.l d2 , d0
000039C0  D101                    5456                  addx.b d1 , d0             
000039C2  40C3                    5457                  move SR , d3      
000039C4  0283 0000001F           5458                  andi.l #$1F , d3            * Isolate flags 
000039CA  DA83                    5459                  add.l d3 , d5               * Copy flag results into accumulator
000039CC  D880                    5460                  add.l d0 , d4               * Copy data results into data accumulator   
000039CE                          5461   
000039CE                          5462      * WORD      
000039CE  2002                    5463                  move.l d2 , d0
000039D0  D141                    5464                  addx.w d1 , d0             
000039D2  40C3                    5465                  move SR , d3      
000039D4  0283 0000001F           5466                  andi.l #$1F , d3            * Isolate flags 
000039DA  DA83                    5467                  add.l d3 , d5               * Copy flag results into accumulator
000039DC  D880                    5468                  add.l d0 , d4               * Copy data results into data accumulator   
000039DE                          5469   
000039DE                          5470      * LONG      
000039DE  2002                    5471                  move.l d2 , d0
000039E0  D181                    5472                  addx.l d1 , d0             
000039E2  40C3                    5473                  move SR , d3      
000039E4  0283 0000001F           5474                  andi.l #$1F , d3            * Isolate flags 
000039EA  DA83                    5475                  add.l d3 , d5               * Copy flag results into accumulator
000039EC  D880                    5476                  add.l d0 , d4               * Copy data results into data accumulator   
000039EE                          5477                  
000039EE  E299                    5478                  ror.l #$1 , d1
000039F0  51CE FFCC               5479                  dbf d6 , ADDX_OUTER1
000039F4  E29A                    5480                  ror.l #$1 , d2
000039F6  223C 8167E123           5481                  move.l #$8167E123, d1       * Initial Data-Y
000039FC  7C1E                    5482                  move.l #$0000001E, d6       * Inner loop counter
000039FE  51CF FFBE               5483                  dbf d7 , ADDX_OUTER1
00003A02                          5484                  
00003A02  0C84 4E96A4D9           5485                  cmpi.l #$4E96A4D9 , d4      * Check the data results
00003A08  66FE                    5486                  bne *                
00003A0A  0C85 000085CD           5487                  cmpi.l #$000085CD , d5      * Check the Flag results
00003A10  66FE                    5488                  bne *                
00003A12                          5489                     
00003A12                          5490      
00003A12                          5491      
00003A12                          5492      * -(An) , -(An)
00003A12                          5493      
00003A12  7000                    5494                  move.l #$00000000, d0       * BYTE Flag Results Accumulator     
00003A14  7200                    5495                  move.l #$00000000, d1        
00003A16  7400                    5496                  move.l #$00000000, d2      
00003A18  207C 00000100           5497                  move.l #$00000100, a0       * Address for Data-X
00003A1E  227C 00000200           5498                  move.l #$00000200, a1       * Address for Data-Y
00003A24  20FC 11FF5580           5499                  move.l #$11FF5580 , (a0)+   * Populate test data
00003A2A  20FC 1111FFFF           5500                  move.l #$1111FFFF , (a0)+   * Populate test data
00003A30  20FC 33333333           5501                  move.l #$33333333 , (a0)+   * Populate test data
00003A36  20FC 44444444           5502                  move.l #$44444444 , (a0)+   * Populate test data
00003A3C  22FC 80FF337F           5503                  move.l #$80FF337F , (a1)+   * Populate test data
00003A42  22FC FFFF1111           5504                  move.l #$FFFF1111 , (a1)+   * Populate test data
00003A48  22FC 33333333           5505                  move.l #$33333333 , (a1)+   * Populate test data
00003A4E  22FC 44444444           5506                  move.l #$44444444 , (a1)+   * Populate test data
00003A54                          5507                  
00003A54                          5508  
00003A54  7C0F                    5509                  move.l #$0000000F, d6       * Loop counter
00003A56                          5510                  
00003A56  D308                    5511  ADDX_LOOP3:     addx.b -(a0) , -(a1)
00003A58  40C3                    5512                  move SR , d3      
00003A5A  0283 0000000F           5513                  andi.l #$0F , d3            * Isolate flags 
00003A60  D083                    5514                  add.l d3 , d0               * Copy flag results into accumulator    
00003A62  D211                    5515                  add.b (a1) , d1     
00003A64  51CE FFF0               5516                  dbf d6 , ADDX_LOOP3
00003A68                          5517  
00003A68                          5518  
00003A68  207C 00000110           5519                  move.l #$00000110, a0       * Address for Data-X
00003A6E  227C 00000210           5520                  move.l #$00000210, a1       * Address for Data-Y
00003A74  7C07                    5521                  move.l #$00000007, d6       * Loop counter
00003A76                          5522                  
00003A76  D348                    5523  ADDX_LOOP4:     addx.w -(a0) , -(a1)
00003A78  40C3                    5524                  move SR , d3      
00003A7A  0283 0000000F           5525                  andi.l #$0F , d3            * Isolate flags 
00003A80  D083                    5526                  add.l d3 , d0               * Copy flag results into accumulator    
00003A82  D251                    5527                  add.w (a1) , d1     
00003A84  51CE FFF0               5528                  dbf d6 , ADDX_LOOP4
00003A88                          5529  
00003A88                          5530  
00003A88  207C 00000110           5531                  move.l #$00000110, a0       * Address for Data-X
00003A8E  227C 00000210           5532                  move.l #$00000210, a1       * Address for Data-Y
00003A94  7C03                    5533                  move.l #$00000003, d6       * Loop counter
00003A96                          5534                  
00003A96  D388                    5535  ADDX_LOOP5:     addx.l -(a0) , -(a1)
00003A98  40C3                    5536                  move SR , d3      
00003A9A  0283 0000000F           5537                  andi.l #$0F , d3            * Isolate flags 
00003AA0  D083                    5538                  add.l d3 , d0               * Copy flag results into accumulator    
00003AA2  D291                    5539                  add.l (a1) , d1     
00003AA4  51CE FFF0               5540                  dbf d6 , ADDX_LOOP5
00003AA8                          5541  
00003AA8                          5542  
00003AA8  0C80 00000095           5543                  cmpi.l #$00000095 , d0      * Check the flag results
00003AAE  66FE                    5544                  bne *                
00003AB0  0C81 C812A682           5545                  cmpi.l #$C812A682 , d1      * Check the data results 
00003AB6  66FE                    5546                  bne *                
00003AB8                          5547   
00003AB8  4E75                    5548                  rts
00003ABA                          5549  
00003ABA                          5550  
00003ABA                          5551  
00003ABA                          5552  
00003ABA                          5553  *-----------------------------------------------------------
00003ABA                          5554  *-----------------------------------------------------------
00003ABA                          5555  * OPCODE : SUBX
00003ABA                          5556  *-----------------------------------------------------------
00003ABA                          5557  *-----------------------------------------------------------
00003ABA                          5558  
00003ABA                          5559  op_SUBX: 
00003ABA                          5560  
00003ABA                          5561  
00003ABA                          5562    ** Register to Register
00003ABA  203C A5A5A5A5           5563                  move.l #$a5a5a5a5, d0       * Initial Data-X  Inner loop
00003AC0  223C 8167E123           5564                  move.l #$8167E123, d1       * Initial Data-Y  Outer loop
00003AC6  243C A5A5A5A5           5565                  move.l #$a5a5a5a5, d2
00003ACC  7600                    5566                  move.l #$00000000, d3
00003ACE  7800                    5567                  move.l #$00000000, d4       * Cumulative data results
00003AD0  7A00                    5568                  move.l #$00000000, d5       * Cumulative flag results
00003AD2  7C1E                    5569                  move.l #$0000001E, d6       * Inner loop counter
00003AD4  7E1E                    5570                  move.l #$0000001E, d7       * Outer loop counter
00003AD6  207C 00000100           5571                  move.l #$00000100, a0       * Address for memory EA operations
00003ADC                          5572  
00003ADC                          5573  
00003ADC                          5574  SUBX_OUTER1:    
00003ADC                          5575   
00003ADC                          5576      * BYTE    
00003ADC  2002                    5577                  move.l d2 , d0
00003ADE  9101                    5578                  subx.b d1 , d0             
00003AE0  40C3                    5579                  move SR , d3      
00003AE2  0283 0000001F           5580                  andi.l #$1F , d3            * Isolate flags 
00003AE8  DA83                    5581                  add.l d3 , d5               * Copy flag results into accumulator
00003AEA  D880                    5582                  add.l d0 , d4               * Copy data results into data accumulator   
00003AEC                          5583   
00003AEC                          5584      * WORD      
00003AEC  2002                    5585                  move.l d2 , d0
00003AEE  9141                    5586                  subx.w d1 , d0             
00003AF0  40C3                    5587                  move SR , d3      
00003AF2  0283 0000001F           5588                  andi.l #$1F , d3            * Isolate flags 
00003AF8  DA83                    5589                  add.l d3 , d5               * Copy flag results into accumulator
00003AFA  D880                    5590                  add.l d0 , d4               * Copy data results into data accumulator   
00003AFC                          5591   
00003AFC                          5592      * LONG      
00003AFC  2002                    5593                  move.l d2 , d0
00003AFE  9181                    5594                  subx.l d1 , d0             
00003B00  40C3                    5595                  move SR , d3      
00003B02  0283 0000001F           5596                  andi.l #$1F , d3            * Isolate flags 
00003B08  DA83                    5597                  add.l d3 , d5               * Copy flag results into accumulator
00003B0A  D880                    5598                  add.l d0 , d4               * Copy data results into data accumulator   
00003B0C                          5599                  
00003B0C  E299                    5600                  ror.l #$1 , d1
00003B0E  51CE FFCC               5601                  dbf d6 , SUBX_OUTER1
00003B12  E29A                    5602                  ror.l #$1 , d2
00003B14  223C 8167E123           5603                  move.l #$8167E123, d1       * Initial Data-Y
00003B1A  7C1E                    5604                  move.l #$0000001E, d6       * Inner loop counter
00003B1C  51CF FFBE               5605                  dbf d7 , SUBX_OUTER1
00003B20                          5606                  
00003B20  0C84 FCAA913E           5607                  cmpi.l #$FCAA913E , d4      * Check the data results
00003B26  66FE                    5608                  bne *                
00003B28  0C85 00007E89           5609                  cmpi.l #$00007E89 , d5      * Check the Flag results
00003B2E  66FE                    5610                  bne *                
00003B30                          5611                     
00003B30                          5612      
00003B30                          5613      
00003B30                          5614      * -(An) , -(An)
00003B30                          5615      
00003B30  7000                    5616                  move.l #$00000000, d0       * BYTE Flag Results Accumulator     
00003B32  7200                    5617                  move.l #$00000000, d1        
00003B34  7400                    5618                  move.l #$00000000, d2      
00003B36  207C 00000100           5619                  move.l #$00000100, a0       * Address for Data-X
00003B3C  227C 00000200           5620                  move.l #$00000200, a1       * Address for Data-Y
00003B42  20FC 11FF5580           5621                  move.l #$11FF5580 , (a0)+   * Populate test data
00003B48  20FC 1111FFFF           5622                  move.l #$1111FFFF , (a0)+   * Populate test data
00003B4E  20FC 80FF337F           5623                  move.l #$80FF337F , (a0)+   * Populate test data
00003B54  20FC 44444444           5624                  move.l #$44444444 , (a0)+   * Populate test data
00003B5A  22FC 80FF337F           5625                  move.l #$80FF337F , (a1)+   * Populate test data
00003B60  22FC 1111FFFF           5626                  move.l #$1111FFFF , (a1)+   * Populate test data
00003B66  22FC 33333333           5627                  move.l #$33333333 , (a1)+   * Populate test data
00003B6C  22FC 5580EECC           5628                  move.l #$5580EECC , (a1)+   * Populate test data
00003B72                          5629                  
00003B72                          5630  
00003B72  7C0F                    5631                  move.l #$0000000F, d6       * Loop counter
00003B74                          5632                  
00003B74  9308                    5633  SUBX_LOOP3:     subx.b -(a0) , -(a1)
00003B76  40C3                    5634                  move SR , d3      
00003B78  0283 0000000F           5635                  andi.l #$0F , d3            * Isolate flags 
00003B7E  D083                    5636                  add.l d3 , d0               * Copy flag results into accumulator    
00003B80  D211                    5637                  add.b (a1) , d1     
00003B82  51CE FFF0               5638                  dbf d6 , SUBX_LOOP3
00003B86                          5639  
00003B86                          5640  
00003B86  207C 00000110           5641                  move.l #$00000110, a0       * Address for Data-X
00003B8C  227C 00000210           5642                  move.l #$00000210, a1       * Address for Data-Y
00003B92  7C07                    5643                  move.l #$00000007, d6       * Loop counter
00003B94                          5644                  
00003B94  9348                    5645  SUBX_LOOP4:     subx.w -(a0) , -(a1)
00003B96  40C3                    5646                  move SR , d3      
00003B98  0283 0000000F           5647                  andi.l #$0F , d3            * Isolate flags 
00003B9E  D083                    5648                  add.l d3 , d0               * Copy flag results into accumulator    
00003BA0  D251                    5649                  add.w (a1) , d1     
00003BA2  51CE FFF0               5650                  dbf d6 , SUBX_LOOP4
00003BA6                          5651  
00003BA6                          5652  
00003BA6  207C 00000110           5653                  move.l #$00000110, a0       * Address for Data-X
00003BAC  227C 00000210           5654                  move.l #$00000210, a1       * Address for Data-Y
00003BB2  7C03                    5655                  move.l #$00000003, d6       * Loop counter
00003BB4                          5656                  
00003BB4  9388                    5657  SUBX_LOOP5:     subx.l -(a0) , -(a1)
00003BB6  40C3                    5658                  move SR , d3      
00003BB8  0283 0000000F           5659                  andi.l #$0F , d3            * Isolate flags 
00003BBE  D083                    5660                  add.l d3 , d0               * Copy flag results into accumulator    
00003BC0  D291                    5661                  add.l (a1) , d1     
00003BC2  51CE FFF0               5662                  dbf d6 , SUBX_LOOP5
00003BC6                          5663  
00003BC6                          5664  
00003BC6  0C80 000000B1           5665                  cmpi.l #$000000B1 , d0      * Check the flag results
00003BCC  66FE                    5666                  bne *                
00003BCE  0C81 62C6F417           5667                  cmpi.l #$62C6F417 , d1      * Check the data results 
00003BD4  66FE                    5668                  bne *                
00003BD6                          5669   
00003BD6  4E75                    5670                  rts
00003BD8                          5671  
00003BD8                          5672  
00003BD8                          5673  *-----------------------------------------------------------
00003BD8                          5674  *-----------------------------------------------------------
00003BD8                          5675  * OPCODE : MULU
00003BD8                          5676  *-----------------------------------------------------------
00003BD8                          5677  *-----------------------------------------------------------
00003BD8                          5678  
00003BD8                          5679  op_MULU:     
00003BD8                          5680  
00003BD8  203C FE805501           5681                  move.l #$FE805501, d0        * Initial 
00003BDE  223C 5697EDB6           5682                  move.l #$5697EDB6, d1        * Initial Y
00003BE4  243C FE805501           5683                  move.l #$FE805501, d2
00003BEA  7600                    5684                  move.l #$00000000, d3
00003BEC  7800                    5685                  move.l #$00000000, d4        * Cumulative data results
00003BEE  7A00                    5686                  move.l #$00000000, d5       * Cumulative flag results
00003BF0  7C0E                    5687                  move.l #$0000000E, d6       * Inner loop counter
00003BF2  7E0E                    5688                  move.l #$0000000E, d7       * Outer loop counter
00003BF4                          5689  
00003BF4                          5690  
00003BF4  C0C1                    5691  MULU_OUTER1:    mulu d1  , d0             
00003BF6  40C3                    5692                  move SR , d3      
00003BF8  0283 0000000C           5693                  andi.l #$0C , d3            * Isolate flags 
00003BFE  DA83                    5694                  add.l d3 , d5               * Copy flag results into accumulator
00003C00  D880                    5695                  add.l d0 , d4               * Copy data results into data accumulator   
00003C02  E299                    5696                  ror.l #$1 , d1
00003C04                          5697  
00003C04  51CE FFEE               5698                  dbf d6 , MULU_OUTER1
00003C08  E29A                    5699                  ror.l #$1 , d2
00003C0A  2002                    5700                  move.l d2 , d0
00003C0C  7C0E                    5701                  move.l #$0000000E, d6       * Inner loop counter
00003C0E  51CF FFE4               5702                  dbf d7 , MULU_OUTER1
00003C12                          5703                  
00003C12  0C84 76FB988C           5704                  cmpi.l #$76FB988C , d4      * Check the data results
00003C18  66FE                    5705                  bne *                
00003C1A                          5706                       
00003C1A  0C85 00000170           5707                  cmpi.l #$00000170 , d5      * Check the Flag results
00003C20  66FE                    5708                  bne *                 
00003C22                          5709            
00003C22                          5710  
00003C22  4E75                    5711                  rts
00003C24                          5712                  
00003C24                          5713                  
00003C24                          5714  *-----------------------------------------------------------
00003C24                          5715  *-----------------------------------------------------------
00003C24                          5716  * OPCODE : MULS
00003C24                          5717  *-----------------------------------------------------------
00003C24                          5718  *-----------------------------------------------------------
00003C24                          5719  
00003C24                          5720  op_MULS:     
00003C24                          5721  
00003C24  203C FE805501           5722                  move.l #$FE805501, d0        * Initial 
00003C2A  223C 5697EDB6           5723                  move.l #$5697EDB6, d1        * Initial Y
00003C30  243C FE805501           5724                  move.l #$FE805501, d2
00003C36  7600                    5725                  move.l #$00000000, d3
00003C38  7800                    5726                  move.l #$00000000, d4        * Cumulative data results
00003C3A  7A00                    5727                  move.l #$00000000, d5       * Cumulative flag results
00003C3C  7C0E                    5728                  move.l #$0000000E, d6       * Inner loop counter
00003C3E  7E0E                    5729                  move.l #$0000000E, d7       * Outer loop counter
00003C40                          5730  
00003C40                          5731  
00003C40  C1C1                    5732  MULS_OUTER1:    muls d1  , d0             
00003C42  40C3                    5733                  move SR , d3      
00003C44  0283 0000000C           5734                  andi.l #$0C , d3            * Isolate flags 
00003C4A  DA83                    5735                  add.l d3 , d5               * Copy flag results into accumulator
00003C4C  D880                    5736                  add.l d0 , d4               * Copy data results into data accumulator   
00003C4E  E299                    5737                  ror.l #$1 , d1
00003C50                          5738  
00003C50  51CE FFEE               5739                  dbf d6 , MULS_OUTER1
00003C54  E29A                    5740                  ror.l #$1 , d2
00003C56  2002                    5741                  move.l d2 , d0
00003C58  7C0E                    5742                  move.l #$0000000E, d6       * Inner loop counter
00003C5A  51CF FFE4               5743                  dbf d7 , MULS_OUTER1
00003C5E                          5744                  
00003C5E  0C84 D4E2988C           5745                  cmpi.l #$D4E2988C , d4      * Check the data results
00003C64  66FE                    5746                  bne *                
00003C66                          5747                       
00003C66  0C85 000003E0           5748                  cmpi.l #$000003E0 , d5      * Check the Flag results
00003C6C  66FE                    5749                  bne *                 
00003C6E                          5750            
00003C6E                          5751  
00003C6E  4E75                    5752                  rts
00003C70                          5753                  
00003C70                          5754    
00003C70                          5755                  
00003C70                          5756  *-----------------------------------------------------------
00003C70                          5757  *-----------------------------------------------------------
00003C70                          5758  * OPCODE : EXG
00003C70                          5759  *-----------------------------------------------------------
00003C70                          5760  *-----------------------------------------------------------
00003C70                          5761  
00003C70                          5762  op_EXG:     
00003C70  223C D1D1D1D1           5763                  move.l #$d1d1d1d1, d1      
00003C76  243C D2D2D2D2           5764                  move.l #$d2d2d2d2, d2      
00003C7C  263C D3D3D3D3           5765                  move.l #$d3d3d3d3, d3      
00003C82  227C A1A1A1A1           5766                  move.l #$a1a1a1a1, a1      
00003C88  247C A2A2A2A2           5767                  move.l #$a2a2a2a2, a2  
00003C8E  267C A3A3A3A3           5768                  move.l #$a3a3a3a3, a3  
00003C94                          5769                  
00003C94  C342                    5770                  exg d1 , d2    
00003C96  C34A                    5771                  exg a1 , a2    
00003C98  C78B                    5772                  exg d3 , a3  
00003C9A                          5773  
00003C9A  0C81 D2D2D2D2           5774                  cmpi.l #$d2d2d2d2 , d1      * Check the results
00003CA0  66FE                    5775                  bne *                 
00003CA2  0C82 D1D1D1D1           5776                  cmpi.l #$d1d1d1d1 , d2    
00003CA8  66FE                    5777                  bne *                 
00003CAA  0C83 A3A3A3A3           5778                  cmpi.l #$a3a3a3a3 , d3    
00003CB0  66FE                    5779                  bne *                 
00003CB2                          5780                  
00003CB2  2209                    5781                  move.l a1 , d1
00003CB4  240A                    5782                  move.l a2 , d2
00003CB6  260B                    5783                  move.l a3 , d3
00003CB8                          5784   
00003CB8  0C81 A2A2A2A2           5785                  cmpi.l #$a2a2a2a2 , d1    
00003CBE  66FE                    5786                  bne *                 
00003CC0  0C82 A1A1A1A1           5787                  cmpi.l #$a1a1a1a1 , d2     
00003CC6  66FE                    5788                  bne *                 
00003CC8  0C83 D3D3D3D3           5789                  cmpi.l #$d3d3d3d3 , d3     
00003CCE  66FE                    5790                  bne *                 
00003CD0                          5791   
00003CD0  4E75                    5792                  rts
00003CD2                          5793        
00003CD2                          5794                  
00003CD2                          5795  *-----------------------------------------------------------
00003CD2                          5796  *-----------------------------------------------------------
00003CD2                          5797  * OPCODE : ROx
00003CD2                          5798  *-----------------------------------------------------------
00003CD2                          5799  *-----------------------------------------------------------
00003CD2                          5800  
00003CD2                          5801      * Subroutine to check and accumulate the flags 
00003CD2  40C3                    5802  ROx_FLAGS:      move SR , d3      
00003CD4  0283 0000000F           5803                  andi.l #$0F , d3            * Isolate flags 
00003CDA  DA83                    5804                  add.l d3 , d5               * Copy flag results into accumulator
00003CDC  4E75                    5805                  rts
00003CDE                          5806      
00003CDE                          5807  op_ROx:   
00003CDE                          5808             
00003CDE                          5809      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
00003CDE                          5810      
00003CDE                          5811         * BYTE LEFT
00003CDE  203C 80018FF1           5812                  move.l #$80018FF1, d0   
00003CE4  7A00                    5813                  move.l #$00000000, d5  
00003CE6  7C11                    5814                  move.l #$00000011, d6  
00003CE8                          5815  ROx_LOOP1:
00003CE8  ED38                    5816                  rol.b d6 , d0       
00003CEA  4EB8 3CD2               5817                  jsr ROx_FLAGS
00003CEE  51CE FFF8               5818                  dbf d6 , ROx_LOOP1
00003CF2  0C80 80018FE3           5819                  cmpi.l #$80018FE3 , d0     
00003CF8  66FE                    5820                  bne *                 
00003CFA  0C85 0000006B           5821                  cmpi.l #$0000006B, d5     
00003D00  66FE                    5822                  bne *      
00003D02                          5823      
00003D02                          5824         * BYTE RIGHT
00003D02  203C 80018FF1           5825                  move.l #$80018FF1, d0   
00003D08  7C12                    5826                  move.l #$00000012, d6  
00003D0A                          5827  ROx_LOOP2:
00003D0A  EC38                    5828                  ror.b d6 , d0       
00003D0C  4EB8 3CD2               5829                  jsr ROx_FLAGS
00003D10  51CE FFF8               5830                  dbf d6 , ROx_LOOP2
00003D14  0C80 80018F3E           5831                  cmpi.l #$80018F3E , d0     
00003D1A  66FE                    5832                  bne *                 
00003D1C  0C85 000000C5           5833                  cmpi.l #$000000C5, d5     
00003D22  66FE                    5834                  bne *      
00003D24                          5835  
00003D24                          5836      
00003D24                          5837         * WORD LEFT
00003D24  203C 80018FF1           5838                  move.l #$80018FF1, d0   
00003D2A  7C13                    5839                  move.l #$00000013, d6  
00003D2C                          5840  ROx_LOOP3:
00003D2C  ED78                    5841                  rol.w d6 , d0       
00003D2E  4EB8 3CD2               5842                  jsr ROx_FLAGS
00003D32  51CE FFF8               5843                  dbf d6 , ROx_LOOP3
00003D36  0C80 800163FC           5844                  cmpi.l #$800163FC , d0     
00003D3C  66FE                    5845                  bne *                 
00003D3E  0C85 00000131           5846                  cmpi.l #$00000131, d5     
00003D44  66FE                    5847                  bne *      
00003D46                          5848      
00003D46                          5849         * WORD RIGHT
00003D46  203C 80018FF1           5850                  move.l #$80018FF1, d0   
00003D4C  7C1E                    5851                  move.l #$0000001E, d6  
00003D4E                          5852  ROx_LOOP4:
00003D4E  EC78                    5853                  ror.w d6 , d0       
00003D50  4EB8 3CD2               5854                  jsr ROx_FLAGS
00003D54  51CE FFF8               5855                  dbf d6 , ROx_LOOP4
00003D58  0C80 8001C7F8           5856                  cmpi.l #$8001C7F8 , d0     
00003D5E  66FE                    5857                  bne *                 
00003D60  0C85 000001DB           5858                  cmpi.l #$000001DB, d5     
00003D66  66FE                    5859                  bne *      
00003D68                          5860  
00003D68                          5861      
00003D68                          5862         * LONG LEFT
00003D68  203C 80018FF1           5863                  move.l #$80018FF1, d0   
00003D6E  7C15                    5864                  move.l #$00000015, d6  
00003D70                          5865  ROx_LOOP5:
00003D70  EDB8                    5866                  rol.l d6 , d0       
00003D72  4EB8 3CD2               5867                  jsr ROx_FLAGS
00003D76  51CE FFF8               5868                  dbf d6 , ROx_LOOP5
00003D7A  0C80 00C7F8C0           5869                  cmpi.l #$00C7F8C0 , d0     
00003D80  66FE                    5870                  bne *                 
00003D82  0C85 0000021A           5871                  cmpi.l #$0000021A, d5     
00003D88  66FE                    5872                  bne *      
00003D8A                          5873      
00003D8A                          5874         * LONG RIGHT
00003D8A  203C 80018FF1           5875                  move.l #$80018FF1, d0   
00003D90  7C16                    5876                  move.l #$00000016, d6  
00003D92                          5877  ROx_LOOP6:
00003D92  ECB8                    5878                  ror.l d6 , d0       
00003D94  4EB8 3CD2               5879                  jsr ROx_FLAGS
00003D98  51CE FFF8               5880                  dbf d6 , ROx_LOOP6
00003D9C  0C80 000C7F8C           5881                  cmpi.l #$000C7F8C , d0     
00003DA2  66FE                    5882                  bne *                 
00003DA4  0C85 00000250           5883                  cmpi.l #$00000250, d5     
00003DAA  66FE                    5884                  bne *      
00003DAC                          5885  
00003DAC                          5886              
00003DAC                          5887      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00003DAC                          5888      
00003DAC  203C 80018FF1           5889                  move.l #$80018FF1, d0   
00003DB2  7A00                    5890                  move.l #$00000000, d5   
00003DB4                          5891  
00003DB4                          5892         * BYTE LEFT
00003DB4  E318                    5893                  rol.b #1 , d0       
00003DB6  4EB8 3CD2               5894                  jsr ROx_FLAGS
00003DBA  EB18                    5895                  rol.b #5 , d0      
00003DBC  4EB8 3CD2               5896                  jsr ROx_FLAGS
00003DC0  EF18                    5897                  rol.b #7 , d0   
00003DC2  4EB8 3CD2               5898                  jsr ROx_FLAGS
00003DC6  E118                    5899                  rol.b #8 , d0   
00003DC8  4EB8 3CD2               5900                  jsr ROx_FLAGS
00003DCC  0C80 80018F3E           5901                  cmpi.l #$80018F3E , d0     
00003DD2  66FE                    5902                  bne *                 
00003DD4  0C85 00000009           5903                  cmpi.l #$00000009, d5     
00003DDA  66FE                    5904                  bne *                 
00003DDC                          5905       
00003DDC                          5906         * BYTE RIGHT
00003DDC  E218                    5907                  ror.b #1 , d0       
00003DDE  4EB8 3CD2               5908                  jsr ROx_FLAGS
00003DE2  EA18                    5909                  ror.b #5 , d0      
00003DE4  4EB8 3CD2               5910                  jsr ROx_FLAGS
00003DE8  EE18                    5911                  ror.b #7 , d0   
00003DEA  4EB8 3CD2               5912                  jsr ROx_FLAGS
00003DEE  E018                    5913                  ror.b #8 , d0   
00003DF0  4EB8 3CD2               5914                  jsr ROx_FLAGS
00003DF4  0C80 80018FF1           5915                  cmpi.l #$80018FF1 , d0     
00003DFA  66FE                    5916                  bne *                 
00003DFC  0C85 00000024           5917                  cmpi.l #$00000024, d5     
00003E02  66FE                    5918                  bne *                 
00003E04                          5919       
00003E04                          5920         * WORD LEFT
00003E04  E358                    5921                  rol.w #1 , d0       
00003E06  4EB8 3CD2               5922                  jsr ROx_FLAGS
00003E0A  EB58                    5923                  rol.w #5 , d0      
00003E0C  4EB8 3CD2               5924                  jsr ROx_FLAGS
00003E10  EF58                    5925                  rol.w #7 , d0   
00003E12  4EB8 3CD2               5926                  jsr ROx_FLAGS
00003E16  E158                    5927                  rol.w #8 , d0   
00003E18  4EB8 3CD2               5928                  jsr ROx_FLAGS
00003E1C  0C80 8001FE31           5929                  cmpi.l #$8001FE31 , d0     
00003E22  66FE                    5930                  bne *                 
00003E24  0C85 00000037           5931                  cmpi.l #$00000037, d5     
00003E2A  66FE                    5932                  bne *                 
00003E2C                          5933                    
00003E2C                          5934         * WORD RIGHT
00003E2C  E258                    5935                  ror.w #1 , d0       
00003E2E  4EB8 3CD2               5936                  jsr ROx_FLAGS
00003E32  EA58                    5937                  ror.w #5 , d0      
00003E34  4EB8 3CD2               5938                  jsr ROx_FLAGS
00003E38  EE58                    5939                  ror.w #7 , d0   
00003E3A  4EB8 3CD2               5940                  jsr ROx_FLAGS
00003E3E  E058                    5941                  ror.w #8 , d0   
00003E40  4EB8 3CD2               5942                  jsr ROx_FLAGS
00003E44  0C80 80018FF1           5943                  cmpi.l #$80018FF1 , d0     
00003E4A  66FE                    5944                  bne *                 
00003E4C  0C85 0000005B           5945                  cmpi.l #$0000005B, d5     
00003E52  66FE                    5946                  bne *                 
00003E54                          5947                 
00003E54                          5948         * LONG LEFT
00003E54  E398                    5949                  rol.l #1 , d0       
00003E56  4EB8 3CD2               5950                  jsr ROx_FLAGS
00003E5A  EB98                    5951                  rol.l #5 , d0      
00003E5C  4EB8 3CD2               5952                  jsr ROx_FLAGS
00003E60  EF98                    5953                  rol.l #7 , d0   
00003E62  4EB8 3CD2               5954                  jsr ROx_FLAGS
00003E66  E198                    5955                  rol.l #8 , d0   
00003E68  4EB8 3CD2               5956                  jsr ROx_FLAGS
00003E6C  0C80 FE300031           5957                  cmpi.l #$FE300031 , d0     
00003E72  66FE                    5958                  bne *                 
00003E74  0C85 00000065           5959                  cmpi.l #$00000065, d5     
00003E7A  66FE                    5960                  bne *                 
00003E7C                          5961                                  
00003E7C                          5962         * LONG RIGHT
00003E7C  E298                    5963                  ror.l #1 , d0       
00003E7E  4EB8 3CD2               5964                  jsr ROx_FLAGS
00003E82  EA98                    5965                  ror.l #5 , d0      
00003E84  4EB8 3CD2               5966                  jsr ROx_FLAGS
00003E88  EE98                    5967                  ror.l #7 , d0   
00003E8A  4EB8 3CD2               5968                  jsr ROx_FLAGS
00003E8E  E098                    5969                  ror.l #8 , d0   
00003E90  4EB8 3CD2               5970                  jsr ROx_FLAGS
00003E94  0C80 80018FF1           5971                  cmpi.l #$80018FF1 , d0     
00003E9A  66FE                    5972                  bne *                 
00003E9C  0C85 00000080           5973                  cmpi.l #$00000080, d5     
00003EA2  66FE                    5974                  bne *                 
00003EA4                          5975     
00003EA4                          5976              
00003EA4                          5977      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
00003EA4                          5978      
00003EA4  7A00                    5979                  move.l #$00000000, d5   
00003EA6  207C 00000100           5980                  move.l #$00000100, a0 
00003EAC  30BC 8FF1               5981                  move.w #$8FF1 , (a0)
00003EB0                          5982                  
00003EB0                          5983         * WORD LEFT
00003EB0  E7D0                    5984                  rol (a0)       
00003EB2  4EB8 3CD2               5985                  jsr ROx_FLAGS
00003EB6  E7D0                    5986                  rol (a0)       
00003EB8  4EB8 3CD2               5987                  jsr ROx_FLAGS
00003EBC  E7D0                    5988                  rol (a0)       
00003EBE  4EB8 3CD2               5989                  jsr ROx_FLAGS
00003EC2  E7D0                    5990                  rol (a0)       
00003EC4  4EB8 3CD2               5991                  jsr ROx_FLAGS
00003EC8  3010                    5992                  move.w (a0) , d0
00003ECA  0C80 8001FF18           5993                  cmpi.l #$8001FF18 , d0     
00003ED0  66FE                    5994                  bne *                 
00003ED2  0C85 00000009           5995                  cmpi.l #$00000009, d5     
00003ED8  66FE                    5996                  bne *                 
00003EDA                          5997                    
00003EDA                          5998         * WORD RIGHT
00003EDA  E6D0                    5999                  ror (a0)       
00003EDC  4EB8 3CD2               6000                  jsr ROx_FLAGS
00003EE0  E6D0                    6001                  ror (a0)       
00003EE2  4EB8 3CD2               6002                  jsr ROx_FLAGS
00003EE6  E6D0                    6003                  ror (a0)       
00003EE8  4EB8 3CD2               6004                  jsr ROx_FLAGS                
00003EEC  E6D0                    6005                  ror (a0)       
00003EEE  4EB8 3CD2               6006                  jsr ROx_FLAGS               
00003EF2  E6D0                    6007                  ror (a0)       
00003EF4  4EB8 3CD2               6008                  jsr ROx_FLAGS
00003EF8  E6D0                    6009                  ror (a0)       
00003EFA  4EB8 3CD2               6010                  jsr ROx_FLAGS
00003EFE  3010                    6011                  move.w (a0) , d0
00003F00  0C80 800163FC           6012                  cmpi.l #$800163FC , d0     
00003F06  66FE                    6013                  bne *                 
00003F08  0C85 0000001B           6014                  cmpi.l #$0000001B, d5     
00003F0E  66FE                    6015                  bne *                 
00003F10                          6016  
00003F10  4E75                    6017                  rts
00003F12                          6018        
00003F12                          6019       
00003F12                          6020                  
00003F12                          6021  *-----------------------------------------------------------
00003F12                          6022  *-----------------------------------------------------------
00003F12                          6023  * OPCODE : ROXx
00003F12                          6024  *-----------------------------------------------------------
00003F12                          6025  *-----------------------------------------------------------
00003F12                          6026  
00003F12                          6027      * Subroutine to check and accumulate the flags 
00003F12  40C3                    6028  ROXx_FLAGS:     move SR , d3      
00003F14  0283 0000000F           6029                  andi.l #$0F , d3            * Isolate flags 
00003F1A  DA83                    6030                  add.l d3 , d5               * Copy flag results into accumulator
00003F1C  4E75                    6031                  rts
00003F1E                          6032      
00003F1E                          6033  op_ROXx:   
00003F1E                          6034             
00003F1E                          6035      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
00003F1E                          6036      
00003F1E                          6037         * BYTE LEFT
00003F1E  203C 80018FF1           6038                  move.l #$80018FF1, d0   
00003F24  7A00                    6039                  move.l #$00000000, d5  
00003F26  7C11                    6040                  move.l #$00000011, d6  
00003F28                          6041  ROXx_LOOP1:
00003F28  ED30                    6042                  roxl.b d6 , d0       
00003F2A  4EB8 3F12               6043                  jsr ROXx_FLAGS
00003F2E  51CE FFF8               6044                  dbf d6 , ROXx_LOOP1
00003F32  0C80 80018FD0           6045                  cmpi.l #$80018FD0 , d0     
00003F38  66FE                    6046                  bne *                 
00003F3A  0C85 00000042           6047                  cmpi.l #$00000042, d5     
00003F40  66FE                    6048                  bne *      
00003F42                          6049      
00003F42                          6050         * BYTE RIGHT
00003F42  203C 80018FF1           6051                  move.l #$80018FF1, d0   
00003F48  7C12                    6052                  move.l #$00000012, d6  
00003F4A                          6053  ROXx_LOOP2:
00003F4A  EC30                    6054                  roxr.b d6 , d0       
00003F4C  4EB8 3F12               6055                  jsr ROXx_FLAGS
00003F50  51CE FFF8               6056                  dbf d6 , ROXx_LOOP2
00003F54  0C80 80018F51           6057                  cmpi.l #$80018F51 , d0     
00003F5A  66FE                    6058                  bne *                 
00003F5C  0C85 0000009C           6059                  cmpi.l #$0000009C, d5     
00003F62  66FE                    6060                  bne *      
00003F64                          6061  
00003F64                          6062      
00003F64                          6063         * WORD LEFT
00003F64  203C 80018FF1           6064                  move.l #$80018FF1, d0   
00003F6A  7C13                    6065                  move.l #$00000013, d6  
00003F6C                          6066  ROXx_LOOP3:
00003F6C  ED70                    6067                  roxl.w d6 , d0       
00003F6E  4EB8 3F12               6068                  jsr ROXx_FLAGS
00003F72  51CE FFF8               6069                  dbf d6 , ROXx_LOOP3
00003F76  0C80 80013980           6070                  cmpi.l #$80013980 , d0     
00003F7C  66FE                    6071                  bne *                 
00003F7E  0C85 000000C9           6072                  cmpi.l #$000000C9, d5     
00003F84  66FE                    6073                  bne *      
00003F86                          6074      
00003F86                          6075         * WORD RIGHT
00003F86  203C 80018FF1           6076                  move.l #$80018FF1, d0   
00003F8C  7C1E                    6077                  move.l #$0000001E, d6  
00003F8E                          6078  ROXx_LOOP4:
00003F8E  EC70                    6079                  roxr.w d6 , d0       
00003F90  4EB8 3F12               6080                  jsr ROXx_FLAGS
00003F94  51CE FFF8               6081                  dbf d6 , ROXx_LOOP4
00003F98  0C80 80010A1D           6082                  cmpi.l #$80010A1D , d0     
00003F9E  66FE                    6083                  bne *                 
00003FA0  0C85 0000014D           6084                  cmpi.l #$0000014D, d5     
00003FA6  66FE                    6085                  bne *      
00003FA8                          6086  
00003FA8                          6087      
00003FA8                          6088         * LONG LEFT
00003FA8  203C 80018FF1           6089                  move.l #$80018FF1, d0   
00003FAE  7C15                    6090                  move.l #$00000015, d6  
00003FB0                          6091  ROXx_LOOP5:
00003FB0  EDB0                    6092                  roxl.l d6 , d0       
00003FB2  4EB8 3F12               6093                  jsr ROXx_FLAGS
00003FB6  51CE FFF8               6094                  dbf d6 , ROXx_LOOP5
00003FBA  0C80 800185D0           6095                  cmpi.l #$800185D0 , d0     
00003FC0  66FE                    6096                  bne *                 
00003FC2  0C85 000001A1           6097                  cmpi.l #$000001A1, d5     
00003FC8  66FE                    6098                  bne *      
00003FCA                          6099      
00003FCA                          6100         * LONG RIGHT
00003FCA  203C 80018FF1           6101                  move.l #$80018FF1, d0   
00003FD0  7C16                    6102                  move.l #$00000016, d6  
00003FD2                          6103  ROXx_LOOP6:
00003FD2  ECB0                    6104                  roxr.l d6 , d0       
00003FD4  4EB8 3F12               6105                  jsr ROXx_FLAGS
00003FD8  51CE FFF8               6106                  dbf d6 , ROXx_LOOP6
00003FDC  0C80 082D8200           6107                  cmpi.l #$082D8200 , d0     
00003FE2  66FE                    6108                  bne *                 
00003FE4  0C85 000001DE           6109                  cmpi.l #$000001DE, d5     
00003FEA  66FE                    6110                  bne *      
00003FEC                          6111  
00003FEC                          6112              
00003FEC                          6113      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00003FEC                          6114      
00003FEC  203C 80018FF1           6115                  move.l #$80018FF1, d0   
00003FF2  7A00                    6116                  move.l #$00000000, d5   
00003FF4                          6117  
00003FF4                          6118         * BYTE LEFT
00003FF4  E310                    6119                  roxl.b #1 , d0       
00003FF6  4EB8 3F12               6120                  jsr ROXx_FLAGS
00003FFA  EB10                    6121                  roxl.b #5 , d0      
00003FFC  4EB8 3F12               6122                  jsr ROXx_FLAGS
00004000  EF10                    6123                  roxl.b #7 , d0   
00004002  4EB8 3F12               6124                  jsr ROXx_FLAGS
00004006  E110                    6125                  roxl.b #8 , d0   
00004008  4EB8 3F12               6126                  jsr ROXx_FLAGS
0000400C  0C80 80018F09           6127                  cmpi.l #$80018F09 , d0     
00004012  66FE                    6128                  bne *                 
00004014  0C85 0000000B           6129                  cmpi.l #$0000000B, d5     
0000401A  66FE                    6130                  bne *                 
0000401C                          6131       
0000401C                          6132         * BYTE RIGHT
0000401C  E210                    6133                  roxr.b #1 , d0       
0000401E  4EB8 3F12               6134                  jsr ROXx_FLAGS
00004022  EA10                    6135                  roxr.b #5 , d0      
00004024  4EB8 3F12               6136                  jsr ROXx_FLAGS
00004028  EE10                    6137                  roxr.b #7 , d0   
0000402A  4EB8 3F12               6138                  jsr ROXx_FLAGS
0000402E  E010                    6139                  roxr.b #8 , d0   
00004030  4EB8 3F12               6140                  jsr ROXx_FLAGS
00004034  0C80 80018F00           6141                  cmpi.l #$80018F00 , d0     
0000403A  66FE                    6142                  bne *                 
0000403C  0C85 00000015           6143                  cmpi.l #$00000015, d5     
00004042  66FE                    6144                  bne *                 
00004044                          6145       
00004044                          6146         * WORD LEFT
00004044  E350                    6147                  roxl.w #1 , d0       
00004046  4EB8 3F12               6148                  jsr ROXx_FLAGS
0000404A  EB50                    6149                  roxl.w #5 , d0      
0000404C  4EB8 3F12               6150                  jsr ROXx_FLAGS
00004050  EF50                    6151                  roxl.w #7 , d0   
00004052  4EB8 3F12               6152                  jsr ROXx_FLAGS
00004056  E150                    6153                  roxl.w #8 , d0   
00004058  4EB8 3F12               6154                  jsr ROXx_FLAGS
0000405C  0C80 8001B000           6155                  cmpi.l #$8001B000 , d0     
00004062  66FE                    6156                  bne *                 
00004064  0C85 00000027           6157                  cmpi.l #$00000027, d5     
0000406A  66FE                    6158                  bne *                 
0000406C                          6159                    
0000406C                          6160         * WORD RIGHT
0000406C  E250                    6161                  roxr.w #1 , d0       
0000406E  4EB8 3F12               6162                  jsr ROXx_FLAGS
00004072  EA50                    6163                  roxr.w #5 , d0      
00004074  4EB8 3F12               6164                  jsr ROXx_FLAGS
00004078  EE50                    6165                  roxr.w #7 , d0   
0000407A  4EB8 3F12               6166                  jsr ROXx_FLAGS
0000407E  E050                    6167                  roxr.w #8 , d0   
00004080  4EB8 3F12               6168                  jsr ROXx_FLAGS
00004084  0C80 80010A00           6169                  cmpi.l #$80010A00 , d0     
0000408A  66FE                    6170                  bne *                 
0000408C  0C85 00000028           6171                  cmpi.l #$00000028, d5     
00004092  66FE                    6172                  bne *                 
00004094                          6173                 
00004094                          6174         * LONG LEFT
00004094  E390                    6175                  roxl.l #1 , d0       
00004096  4EB8 3F12               6176                  jsr ROXx_FLAGS
0000409A  EB90                    6177                  roxl.l #5 , d0      
0000409C  4EB8 3F12               6178                  jsr ROXx_FLAGS
000040A0  EF90                    6179                  roxl.l #7 , d0   
000040A2  4EB8 3F12               6180                  jsr ROXx_FLAGS
000040A6  E190                    6181                  roxl.l #8 , d0   
000040A8  4EB8 3F12               6182                  jsr ROXx_FLAGS
000040AC  0C80 40000010           6183                  cmpi.l #$40000010 , d0     
000040B2  66FE                    6184                  bne *                 
000040B4  0C85 0000002A           6185                  cmpi.l #$0000002A, d5     
000040BA  66FE                    6186                  bne *                 
000040BC                          6187                                  
000040BC                          6188         * LONG RIGHT
000040BC  E290                    6189                  roxr.l #1 , d0       
000040BE  4EB8 3F12               6190                  jsr ROXx_FLAGS
000040C2  EA90                    6191                  roxr.l #5 , d0      
000040C4  4EB8 3F12               6192                  jsr ROXx_FLAGS
000040C8  EE90                    6193                  roxr.l #7 , d0   
000040CA  4EB8 3F12               6194                  jsr ROXx_FLAGS
000040CE  E090                    6195                  roxr.l #8 , d0   
000040D0  4EB8 3F12               6196                  jsr ROXx_FLAGS
000040D4  0C80 00010200           6197                  cmpi.l #$00010200 , d0     
000040DA  66FE                    6198                  bne *                 
000040DC  0C85 00000032           6199                  cmpi.l #$00000032, d5     
000040E2  66FE                    6200                  bne *                 
000040E4                          6201     
000040E4                          6202              
000040E4                          6203      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
000040E4                          6204      
000040E4  7A00                    6205                  move.l #$00000000, d5   
000040E6  207C 00000100           6206                  move.l #$00000100, a0 
000040EC  30BC 8FF1               6207                  move.w #$8FF1 , (a0)
000040F0                          6208                  
000040F0                          6209         * WORD LEFT
000040F0  E5D0                    6210                  roxl (a0)       
000040F2  4EB8 3F12               6211                  jsr ROXx_FLAGS
000040F6  E5D0                    6212                  roxl (a0)       
000040F8  4EB8 3F12               6213                  jsr ROXx_FLAGS
000040FC  E5D0                    6214                  roxl (a0)       
000040FE  4EB8 3F12               6215                  jsr ROXx_FLAGS
00004102  E5D0                    6216                  roxl (a0)       
00004104  4EB8 3F12               6217                  jsr ROXx_FLAGS
00004108  3010                    6218                  move.w (a0) , d0
0000410A  0C80 0001FF10           6219                  cmpi.l #$0001FF10 , d0     
00004110  66FE                    6220                  bne *                 
00004112  0C85 00000009           6221                  cmpi.l #$00000009, d5     
00004118  66FE                    6222                  bne *                 
0000411A                          6223                    
0000411A                          6224         * WORD RIGHT
0000411A  E4D0                    6225                  roxr (a0)       
0000411C  4EB8 3F12               6226                  jsr ROXx_FLAGS
00004120  E4D0                    6227                  roxr (a0)       
00004122  4EB8 3F12               6228                  jsr ROXx_FLAGS
00004126  E4D0                    6229                  roxr (a0)       
00004128  4EB8 3F12               6230                  jsr ROXx_FLAGS                
0000412C  E4D0                    6231                  roxr (a0)       
0000412E  4EB8 3F12               6232                  jsr ROXx_FLAGS               
00004132  E4D0                    6233                  roxr (a0)       
00004134  4EB8 3F12               6234                  jsr ROXx_FLAGS
00004138  E4D0                    6235                  roxr (a0)       
0000413A  4EB8 3F12               6236                  jsr ROXx_FLAGS
0000413E  3010                    6237                  move.w (a0) , d0
00004140  0C80 000103FC           6238                  cmpi.l #$000103FC , d0     
00004146  66FE                    6239                  bne *                 
00004148  0C85 0000000A           6240                  cmpi.l #$0000000A, d5     
0000414E  66FE                    6241                  bne *                 
00004150                          6242  
00004150  4E75                    6243                  rts        
00004152                          6244  
00004152                          6245  
00004152                          6246   
00004152                          6247                  
00004152                          6248  *-----------------------------------------------------------
00004152                          6249  *-----------------------------------------------------------
00004152                          6250  * OPCODE : SHIFTS
00004152                          6251  *-----------------------------------------------------------
00004152                          6252  *-----------------------------------------------------------
00004152                          6253  
00004152                          6254      * Subroutine to check and accumulate the flags 
00004152  40C3                    6255  SHIFTS_FLAGS:   move SR , d3      
00004154  0283 0000000F           6256                  andi.l #$0F , d3            * Isolate flags 
0000415A  DA83                    6257                  add.l d3 , d5               * Copy flag results into accumulator
0000415C  4E75                    6258                  rts
0000415E                          6259      
0000415E                          6260  op_SHIFTS:   
0000415E                          6261             
0000415E                          6262      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
0000415E                          6263      
0000415E                          6264         * BYTE LEFT
0000415E  203C 80018F81           6265                  move.l #$80018F81, d0   
00004164  7A00                    6266                  move.l #$00000000, d5  
00004166  7C02                    6267                  move.l #$00000002, d6  
00004168                          6268  SHIFTS_LOOP1:
00004168  ED20                    6269                  asl.b d6 , d0       
0000416A  4EB8 4152               6270                  jsr SHIFTS_FLAGS
0000416E  51CE FFF8               6271                  dbf d6 , SHIFTS_LOOP1
00004172  0C80 80018F08           6272                  cmpi.l #$80018F08 , d0     
00004178  66FE                    6273                  bne *                 
0000417A  0C85 00000002           6274                  cmpi.l #$00000002, d5     
00004180  66FE                    6275                  bne *      
00004182                          6276      
00004182                          6277         * BYTE RIGHT
00004182  203C 80018F81           6278                  move.l #$80018F81, d0   
00004188  7C02                    6279                  move.l #$00000002, d6  
0000418A                          6280  SHIFTS_LOOP2:
0000418A  EC20                    6281                  asr.b d6 , d0       
0000418C  4EB8 4152               6282                  jsr SHIFTS_FLAGS
00004190  51CE FFF8               6283                  dbf d6 , SHIFTS_LOOP2
00004194  0C80 80018FF0           6284                  cmpi.l #$80018FF0 , d0     
0000419A  66FE                    6285                  bne *                 
0000419C  0C85 0000001A           6286                  cmpi.l #$0000001A, d5     
000041A2  66FE                    6287                  bne *      
000041A4                          6288  
000041A4                          6289      
000041A4                          6290         * WORD LEFT
000041A4  203C 80018FF1           6291                  move.l #$80018FF1, d0   
000041AA  7C02                    6292                  move.l #$00000002, d6  
000041AC                          6293  SHIFTS_LOOP3:
000041AC  ED60                    6294                  asl.w d6 , d0       
000041AE  4EB8 4152               6295                  jsr SHIFTS_FLAGS
000041B2  51CE FFF8               6296                  dbf d6 , SHIFTS_LOOP3
000041B6  0C80 80017F88           6297                  cmpi.l #$80017F88 , d0     
000041BC  66FE                    6298                  bne *                 
000041BE  0C85 0000001C           6299                  cmpi.l #$0000001C, d5     
000041C4  66FE                    6300                  bne *      
000041C6                          6301      
000041C6                          6302         * WORD RIGHT
000041C6  203C 80018FF1           6303                  move.l #$80018FF1, d0   
000041CC  7C02                    6304                  move.l #$00000002, d6  
000041CE                          6305  SHIFTS_LOOP4:
000041CE  EC60                    6306                  asr.w d6 , d0       
000041D0  4EB8 4152               6307                  jsr SHIFTS_FLAGS
000041D4  51CE FFF8               6308                  dbf d6 , SHIFTS_LOOP4
000041D8  0C80 8001F1FE           6309                  cmpi.l #$8001F1FE , d0     
000041DE  66FE                    6310                  bne *                 
000041E0  0C85 00000034           6311                  cmpi.l #$00000034, d5     
000041E6  66FE                    6312                  bne *      
000041E8                          6313  
000041E8                          6314      
000041E8                          6315         * LONG LEFT
000041E8  203C 80018FF1           6316                  move.l #$80018FF1, d0   
000041EE  7C02                    6317                  move.l #$00000002, d6  
000041F0                          6318  SHIFTS_LOOP5:
000041F0  EDA0                    6319                  asl.l d6 , d0       
000041F2  4EB8 4152               6320                  jsr SHIFTS_FLAGS
000041F6  51CE FFF8               6321                  dbf d6 , SHIFTS_LOOP5
000041FA  0C80 000C7F88           6322                  cmpi.l #$000C7F88 , d0     
00004200  66FE                    6323                  bne *                 
00004202  0C85 00000036           6324                  cmpi.l #$00000036, d5     
00004208  66FE                    6325                  bne *      
0000420A                          6326      
0000420A                          6327         * LONG RIGHT
0000420A  203C 80018FF1           6328                  move.l #$80018FF1, d0   
00004210  7C02                    6329                  move.l #$00000002, d6  
00004212                          6330  SHIFTS_LOOP6:
00004212  ECA0                    6331                  asr.l d6 , d0       
00004214  4EB8 4152               6332                  jsr SHIFTS_FLAGS
00004218  51CE FFF8               6333                  dbf d6 , SHIFTS_LOOP6
0000421C  0C80 F00031FE           6334                  cmpi.l #$F00031FE , d0     
00004222  66FE                    6335                  bne *                 
00004224  0C85 0000004E           6336                  cmpi.l #$0000004E, d5     
0000422A  66FE                    6337                  bne *      
0000422C                          6338  
0000422C                          6339              
0000422C                          6340      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
0000422C                          6341      
0000422C  203C 80018FF1           6342                  move.l #$80018FF1, d0   
00004232  7A00                    6343                  move.l #$00000000, d5   
00004234                          6344  
00004234                          6345         * BYTE LEFT
00004234  E300                    6346                  asl.b #1 , d0       
00004236  4EB8 4152               6347                  jsr SHIFTS_FLAGS
0000423A  E500                    6348                  asl.b #2 , d0      
0000423C  4EB8 4152               6349                  jsr SHIFTS_FLAGS
00004240  E300                    6350                  asl.b #1 , d0   
00004242  4EB8 4152               6351                  jsr SHIFTS_FLAGS
00004246  E700                    6352                  asl.b #3 , d0   
00004248  4EB8 4152               6353                  jsr SHIFTS_FLAGS
0000424C  0C80 80018F80           6354                  cmpi.l #$80018F80 , d0     
00004252  66FE                    6355                  bne *                 
00004254  0C85 0000001F           6356                  cmpi.l #$0000001F, d5     
0000425A  66FE                    6357                  bne *                 
0000425C                          6358       
0000425C                          6359         * BYTE RIGHT
0000425C  E200                    6360                  asr.b #1 , d0       
0000425E  4EB8 4152               6361                  jsr SHIFTS_FLAGS
00004262  E400                    6362                  asr.b #2 , d0      
00004264  4EB8 4152               6363                  jsr SHIFTS_FLAGS
00004268  E600                    6364                  asr.b #3 , d0   
0000426A  4EB8 4152               6365                  jsr SHIFTS_FLAGS
0000426E  E200                    6366                  asr.b #1 , d0   
00004270  4EB8 4152               6367                  jsr SHIFTS_FLAGS
00004274  0C80 80018FFF           6368                  cmpi.l #$80018FFF , d0     
0000427A  66FE                    6369                  bne *                 
0000427C  0C85 0000003F           6370                  cmpi.l #$0000003F, d5     
00004282  66FE                    6371                  bne *                 
00004284                          6372       
00004284                          6373         * WORD LEFT
00004284  E340                    6374                  asl.w #1 , d0       
00004286  4EB8 4152               6375                  jsr SHIFTS_FLAGS
0000428A  E540                    6376                  asl.w #2 , d0      
0000428C  4EB8 4152               6377                  jsr SHIFTS_FLAGS
00004290  E740                    6378                  asl.w #3 , d0   
00004292  4EB8 4152               6379                  jsr SHIFTS_FLAGS
00004296  EB40                    6380                  asl.w #5 , d0   
00004298  4EB8 4152               6381                  jsr SHIFTS_FLAGS
0000429C  0C80 8001F800           6382                  cmpi.l #$8001F800 , d0     
000042A2  66FE                    6383                  bne *                 
000042A4  0C85 00000056           6384                  cmpi.l #$00000056, d5     
000042AA  66FE                    6385                  bne *                 
000042AC                          6386                    
000042AC                          6387         * WORD RIGHT
000042AC  EA40                    6388                  asr.w #5 , d0       
000042AE  4EB8 4152               6389                  jsr SHIFTS_FLAGS
000042B2  E240                    6390                  asr.w #1 , d0      
000042B4  4EB8 4152               6391                  jsr SHIFTS_FLAGS
000042B8  E440                    6392                  asr.w #2 , d0   
000042BA  4EB8 4152               6393                  jsr SHIFTS_FLAGS
000042BE  E840                    6394                  asr.w #4 , d0   
000042C0  4EB8 4152               6395                  jsr SHIFTS_FLAGS
000042C4  0C80 8001FFFF           6396                  cmpi.l #$8001FFFF , d0     
000042CA  66FE                    6397                  bne *                 
000042CC  0C85 00000077           6398                  cmpi.l #$00000077, d5     
000042D2  66FE                    6399                  bne *                 
000042D4                          6400                 
000042D4                          6401         * LONG LEFT
000042D4  203C 80018FF1           6402                  move.l #$80018FF1, d0   
000042DA  E380                    6403                  asl.l #1 , d0       
000042DC  4EB8 4152               6404                  jsr SHIFTS_FLAGS
000042E0  E580                    6405                  asl.l #2 , d0      
000042E2  4EB8 4152               6406                  jsr SHIFTS_FLAGS
000042E6  EF80                    6407                  asl.l #7 , d0   
000042E8  4EB8 4152               6408                  jsr SHIFTS_FLAGS
000042EC  E980                    6409                  asl.l #4 , d0   
000042EE  4EB8 4152               6410                  jsr SHIFTS_FLAGS
000042F2  0C80 63FC4000           6411                  cmpi.l #$63FC4000  , d0     
000042F8  66FE                    6412                  bne *                 
000042FA  0C85 0000007A           6413                  cmpi.l #$0000007A, d5     
00004300  66FE                    6414                  bne *                 
00004302                          6415                                  
00004302                          6416         * LONG RIGHT
00004302  203C 80018FF1           6417                  move.l #$80018FF1, d0   
00004308  E280                    6418                  asr.l #1 , d0       
0000430A  4EB8 4152               6419                  jsr SHIFTS_FLAGS
0000430E  EA80                    6420                  asr.l #5 , d0      
00004310  4EB8 4152               6421                  jsr SHIFTS_FLAGS
00004314  EE80                    6422                  asr.l #7 , d0   
00004316  4EB8 4152               6423                  jsr SHIFTS_FLAGS
0000431A  E080                    6424                  asr.l #8 , d0   
0000431C  4EB8 4152               6425                  jsr SHIFTS_FLAGS
00004320  0C80 FFFFFC00           6426                  cmpi.l #$FFFFFC00 , d0     
00004326  66FE                    6427                  bne *                 
00004328  0C85 0000009C           6428                  cmpi.l #$0000009C, d5     
0000432E  66FE                    6429                  bne *                 
00004330                          6430     
00004330                          6431              
00004330                          6432      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
00004330                          6433      
00004330  7A00                    6434                  move.l #$00000000, d5   
00004332  207C 00000100           6435                  move.l #$00000100, a0 
00004338  30BC 8FF1               6436                  move.w #$8FF1 , (a0)
0000433C                          6437                  
0000433C                          6438         * WORD LEFT
0000433C  E1D0                    6439                  asl  (a0)       
0000433E  4EB8 4152               6440                  jsr SHIFTS_FLAGS
00004342  E1D0                    6441                  asl  (a0)       
00004344  4EB8 4152               6442                  jsr SHIFTS_FLAGS
00004348  E1D0                    6443                  asl  (a0)       
0000434A  4EB8 4152               6444                  jsr SHIFTS_FLAGS
0000434E  E1D0                    6445                  asl  (a0)       
00004350  4EB8 4152               6446                  jsr SHIFTS_FLAGS
00004354  3010                    6447                  move.w (a0) , d0
00004356  0C80 FFFFFF10           6448                  cmpi.l #$FFFFFF10 , d0     
0000435C  66FE                    6449                  bne *                 
0000435E  0C85 0000000D           6450                  cmpi.l #$0000000D, d5     
00004364  66FE                    6451                  bne *                 
00004366                          6452                    
00004366                          6453         * WORD RIGHT
00004366  E0D0                    6454                  asr (a0)       
00004368  4EB8 4152               6455                  jsr SHIFTS_FLAGS
0000436C  E0D0                    6456                  asr (a0)       
0000436E  4EB8 4152               6457                  jsr SHIFTS_FLAGS
00004372  E0D0                    6458                  asr (a0)       
00004374  4EB8 4152               6459                  jsr SHIFTS_FLAGS                
00004378  E0D0                    6460                  asr (a0)       
0000437A  4EB8 4152               6461                  jsr SHIFTS_FLAGS               
0000437E  E0D0                    6462                  asr (a0)       
00004380  4EB8 4152               6463                  jsr SHIFTS_FLAGS
00004384  E0D0                    6464                  asr (a0)       
00004386  4EB8 4152               6465                  jsr SHIFTS_FLAGS
0000438A  3010                    6466                  move.w (a0) , d0
0000438C  0C80 FFFFFFFC           6467                  cmpi.l #$FFFFFFFC , d0     
00004392  66FE                    6468                  bne *                 
00004394  0C85 0000003E           6469                  cmpi.l #$0000003E, d5     
0000439A  66FE                    6470                  bne *                 
0000439C                          6471  
0000439C  4E75                    6472                  rts      
0000439E                          6473          
0000439E                          6474  
0000439E                          6475                  
0000439E                          6476  *-----------------------------------------------------------
0000439E                          6477  *-----------------------------------------------------------
0000439E                          6478  * OPCODE : SHIFTS2
0000439E                          6479  *-----------------------------------------------------------
0000439E                          6480  *-----------------------------------------------------------
0000439E                          6481  
0000439E                          6482      * Subroutine to check and accumulate the flags 
0000439E  40C3                    6483  SHIFTS2_FLAGS:  move SR , d3      
000043A0  0283 0000000F           6484                  andi.l #$0F , d3            * Isolate flags 
000043A6  DA83                    6485                  add.l d3 , d5               * Copy flag results into accumulator
000043A8  4E75                    6486                  rts
000043AA                          6487      
000043AA                          6488  op_SHIFTS2:   
000043AA                          6489             
000043AA                          6490      * Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
000043AA                          6491      
000043AA                          6492         * BYTE LEFT
000043AA  203C 80018F81           6493                  move.l #$80018F81, d0   
000043B0  7A00                    6494                  move.l #$00000000, d5  
000043B2  7C02                    6495                  move.l #$00000002, d6  
000043B4                          6496  SHIFTS2_LOOP1:
000043B4  ED28                    6497                  lsl.b d6 , d0       
000043B6  4EB8 439E               6498                  jsr SHIFTS2_FLAGS
000043BA  51CE FFF8               6499                  dbf d6 , SHIFTS2_LOOP1
000043BE  0C80 80018F08           6500                  cmpi.l #$80018F08 , d0     
000043C4  66FE                    6501                  bne *                 
000043C6  0C85 00000000           6502                  cmpi.l #$00000000, d5     
000043CC  66FE                    6503                  bne *      
000043CE                          6504      
000043CE                          6505         * BYTE RIGHT
000043CE  203C 80018F81           6506                  move.l #$80018F81, d0   
000043D4  7C02                    6507                  move.l #$00000002, d6  
000043D6                          6508  SHIFTS2_LOOP2:
000043D6  EC28                    6509                  lsr.b d6 , d0       
000043D8  4EB8 439E               6510                  jsr SHIFTS2_FLAGS
000043DC  51CE FFF8               6511                  dbf d6 , SHIFTS2_LOOP2
000043E0  0C80 80018F10           6512                  cmpi.l #$80018F10 , d0     
000043E6  66FE                    6513                  bne *                 
000043E8  0C85 00000000           6514                  cmpi.l #$00000000, d5     
000043EE  66FE                    6515                  bne *      
000043F0                          6516  
000043F0                          6517      
000043F0                          6518         * WORD LEFT
000043F0  203C 80018FF1           6519                  move.l #$80018FF1, d0   
000043F6  7C02                    6520                  move.l #$00000002, d6  
000043F8                          6521  SHIFTS2_LOOP3:
000043F8  ED68                    6522                  lsl.w d6 , d0       
000043FA  4EB8 439E               6523                  jsr SHIFTS2_FLAGS
000043FE  51CE FFF8               6524                  dbf d6 , SHIFTS2_LOOP3
00004402  0C80 80017F88           6525                  cmpi.l #$80017F88 , d0     
00004408  66FE                    6526                  bne *                 
0000440A  0C85 00000000           6527                  cmpi.l #$00000000, d5     
00004410  66FE                    6528                  bne *      
00004412                          6529      
00004412                          6530         * WORD RIGHT
00004412  203C 80018FF1           6531                  move.l #$80018FF1, d0   
00004418  7C02                    6532                  move.l #$00000002, d6  
0000441A                          6533  SHIFTS2_LOOP4:
0000441A  EC68                    6534                  lsr.w d6 , d0       
0000441C  4EB8 439E               6535                  jsr SHIFTS2_FLAGS
00004420  51CE FFF8               6536                  dbf d6 , SHIFTS2_LOOP4
00004424  0C80 800111FE           6537                  cmpi.l #$800111FE , d0     
0000442A  66FE                    6538                  bne *                 
0000442C  0C85 00000000           6539                  cmpi.l #$00000000, d5     
00004432  66FE                    6540                  bne *      
00004434                          6541  
00004434                          6542      
00004434                          6543         * LONG LEFT
00004434  203C 80018FF1           6544                  move.l #$80018FF1, d0   
0000443A  7C02                    6545                  move.l #$00000002, d6  
0000443C                          6546  SHIFTS2_LOOP5:
0000443C  EDA8                    6547                  lsl.l d6 , d0       
0000443E  4EB8 439E               6548                  jsr SHIFTS2_FLAGS
00004442  51CE FFF8               6549                  dbf d6 , SHIFTS2_LOOP5
00004446  0C80 000C7F88           6550                  cmpi.l #$000C7F88 , d0     
0000444C  66FE                    6551                  bne *                 
0000444E  0C85 00000000           6552                  cmpi.l #$00000000, d5     
00004454  66FE                    6553                  bne *      
00004456                          6554      
00004456                          6555         * LONG RIGHT
00004456  203C 80018FF1           6556                  move.l #$80018FF1, d0   
0000445C  7C02                    6557                  move.l #$00000002, d6  
0000445E                          6558  SHIFTS2_LOOP6:
0000445E  ECA8                    6559                  lsr.l d6 , d0       
00004460  4EB8 439E               6560                  jsr SHIFTS2_FLAGS
00004464  51CE FFF8               6561                  dbf d6 , SHIFTS2_LOOP6
00004468  0C80 100031FE           6562                  cmpi.l #$100031FE , d0     
0000446E  66FE                    6563                  bne *                 
00004470  0C85 00000000           6564                  cmpi.l #$00000000, d5     
00004476  66FE                    6565                  bne *      
00004478                          6566  
00004478                          6567              
00004478                          6568      * Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
00004478                          6569      
00004478  203C 80018FF1           6570                  move.l #$80018FF1, d0   
0000447E  7A00                    6571                  move.l #$00000000, d5   
00004480                          6572  
00004480                          6573         * BYTE LEFT
00004480  E308                    6574                  lsl.b #1 , d0       
00004482  4EB8 439E               6575                  jsr SHIFTS2_FLAGS
00004486  E508                    6576                  lsl.b #2 , d0      
00004488  4EB8 439E               6577                  jsr SHIFTS2_FLAGS
0000448C  E308                    6578                  lsl.b #1 , d0   
0000448E  4EB8 439E               6579                  jsr SHIFTS2_FLAGS
00004492  E708                    6580                  lsl.b #3 , d0   
00004494  4EB8 439E               6581                  jsr SHIFTS2_FLAGS
00004498  0C80 80018F80           6582                  cmpi.l #$80018F80 , d0     
0000449E  66FE                    6583                  bne *                 
000044A0  0C85 0000001B           6584                  cmpi.l #$0000001B, d5     
000044A6  66FE                    6585                  bne *                 
000044A8                          6586       
000044A8                          6587         * BYTE RIGHT
000044A8  E208                    6588                  lsr.b #1 , d0       
000044AA  4EB8 439E               6589                  jsr SHIFTS2_FLAGS
000044AE  E408                    6590                  lsr.b #2 , d0      
000044B0  4EB8 439E               6591                  jsr SHIFTS2_FLAGS
000044B4  E608                    6592                  lsr.b #3 , d0   
000044B6  4EB8 439E               6593                  jsr SHIFTS2_FLAGS
000044BA  E208                    6594                  lsr.b #1 , d0   
000044BC  4EB8 439E               6595                  jsr SHIFTS2_FLAGS
000044C0  0C80 80018F01           6596                  cmpi.l #$80018F01 , d0     
000044C6  66FE                    6597                  bne *                 
000044C8  0C85 0000001B           6598                  cmpi.l #$0000001B, d5     
000044CE  66FE                    6599                  bne *                 
000044D0                          6600       
000044D0                          6601         * WORD LEFT
000044D0  E348                    6602                  lsl.w #1 , d0       
000044D2  4EB8 439E               6603                  jsr SHIFTS2_FLAGS
000044D6  E548                    6604                  lsl.w #2 , d0      
000044D8  4EB8 439E               6605                  jsr SHIFTS2_FLAGS
000044DC  E748                    6606                  lsl.w #3 , d0   
000044DE  4EB8 439E               6607                  jsr SHIFTS2_FLAGS
000044E2  EB48                    6608                  lsl.w #5 , d0   
000044E4  4EB8 439E               6609                  jsr SHIFTS2_FLAGS
000044E8  0C80 80010800           6610                  cmpi.l #$80010800 , d0     
000044EE  66FE                    6611                  bne *                 
000044F0  0C85 00000025           6612                  cmpi.l #$00000025, d5     
000044F6  66FE                    6613                  bne *                 
000044F8                          6614                    
000044F8                          6615         * WORD RIGHT
000044F8  EA48                    6616                  lsr.w #5 , d0       
000044FA  4EB8 439E               6617                  jsr SHIFTS2_FLAGS
000044FE  E248                    6618                  lsr.w #1 , d0      
00004500  4EB8 439E               6619                  jsr SHIFTS2_FLAGS
00004504  E448                    6620                  lsr.w #2 , d0   
00004506  4EB8 439E               6621                  jsr SHIFTS2_FLAGS
0000450A  E848                    6622                  lsr.w #4 , d0   
0000450C  4EB8 439E               6623                  jsr SHIFTS2_FLAGS
00004510  0C80 80010000           6624                  cmpi.l #$80010000 , d0     
00004516  66FE                    6625                  bne *                 
00004518  0C85 0000002A           6626                  cmpi.l #$0000002A, d5     
0000451E  66FE                    6627                  bne *                 
00004520                          6628                 
00004520                          6629         * LONG LEFT
00004520  203C 80018FF1           6630                  move.l #$80018FF1, d0   
00004526  E388                    6631                  lsl.l #1 , d0       
00004528  4EB8 439E               6632                  jsr SHIFTS2_FLAGS
0000452C  E588                    6633                  lsl.l #2 , d0      
0000452E  4EB8 439E               6634                  jsr SHIFTS2_FLAGS
00004532  EF88                    6635                  lsl.l #7 , d0   
00004534  4EB8 439E               6636                  jsr SHIFTS2_FLAGS
00004538  E988                    6637                  lsl.l #4 , d0   
0000453A  4EB8 439E               6638                  jsr SHIFTS2_FLAGS
0000453E  0C80 63FC4000           6639                  cmpi.l #$63FC4000  , d0     
00004544  66FE                    6640                  bne *                 
00004546  0C85 0000002B           6641                  cmpi.l #$0000002B, d5     
0000454C  66FE                    6642                  bne *                 
0000454E                          6643                                  
0000454E                          6644         * LONG RIGHT
0000454E  203C 80018FF1           6645                  move.l #$80018FF1, d0   
00004554  E288                    6646                  lsr.l #1 , d0       
00004556  4EB8 439E               6647                  jsr SHIFTS2_FLAGS
0000455A  EA88                    6648                  lsr.l #5 , d0      
0000455C  4EB8 439E               6649                  jsr SHIFTS2_FLAGS
00004560  EE88                    6650                  lsr.l #7 , d0   
00004562  4EB8 439E               6651                  jsr SHIFTS2_FLAGS
00004566  E088                    6652                  lsr.l #8 , d0   
00004568  4EB8 439E               6653                  jsr SHIFTS2_FLAGS
0000456C  0C80 00000400           6654                  cmpi.l #$00000400 , d0     
00004572  66FE                    6655                  bne *                 
00004574  0C85 0000002D           6656                  cmpi.l #$0000002D, d5     
0000457A  66FE                    6657                  bne *                 
0000457C                          6658     
0000457C                          6659              
0000457C                          6660      * Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
0000457C                          6661      
0000457C  7A00                    6662                  move.l #$00000000, d5   
0000457E  207C 00000100           6663                  move.l #$00000100, a0 
00004584  30BC 8FF1               6664                  move.w #$8FF1 , (a0)
00004588                          6665                  
00004588                          6666         * WORD LEFT
00004588  E3D0                    6667                  lsl  (a0)       
0000458A  4EB8 439E               6668                  jsr SHIFTS2_FLAGS
0000458E  E3D0                    6669                  lsl  (a0)       
00004590  4EB8 439E               6670                  jsr SHIFTS2_FLAGS
00004594  E3D0                    6671                  lsl  (a0)       
00004596  4EB8 439E               6672                  jsr SHIFTS2_FLAGS
0000459A  E3D0                    6673                  lsl  (a0)       
0000459C  4EB8 439E               6674                  jsr SHIFTS2_FLAGS
000045A0  3010                    6675                  move.w (a0) , d0
000045A2  0C80 0000FF10           6676                  cmpi.l #$0000FF10 , d0     
000045A8  66FE                    6677                  bne *                 
000045AA  0C85 00000009           6678                  cmpi.l #$00000009, d5     
000045B0  66FE                    6679                  bne *                 
000045B2                          6680                    
000045B2                          6681         * WORD RIGHT
000045B2  E2D0                    6682                  lsr (a0)       
000045B4  4EB8 439E               6683                  jsr SHIFTS2_FLAGS
000045B8  E2D0                    6684                  lsr (a0)       
000045BA  4EB8 439E               6685                  jsr SHIFTS2_FLAGS
000045BE  E2D0                    6686                  lsr (a0)       
000045C0  4EB8 439E               6687                  jsr SHIFTS2_FLAGS                
000045C4  E2D0                    6688                  lsr (a0)       
000045C6  4EB8 439E               6689                  jsr SHIFTS2_FLAGS               
000045CA  E2D0                    6690                  lsr (a0)       
000045CC  4EB8 439E               6691                  jsr SHIFTS2_FLAGS
000045D0  E2D0                    6692                  lsr (a0)       
000045D2  4EB8 439E               6693                  jsr SHIFTS2_FLAGS
000045D6  3010                    6694                  move.w (a0) , d0
000045D8  0C80 000003FC           6695                  cmpi.l #$000003FC , d0     
000045DE  66FE                    6696                  bne *                 
000045E0  0C85 0000000A           6697                  cmpi.l #$0000000A, d5     
000045E6  66FE                    6698                  bne *                 
000045E8                          6699  
000045E8  4E75                    6700                  rts      
000045EA                          6701          
000045EA                          6702  
000045EA                          6703  *------------------------------------------------------   
000045EA                          6704  *------------------------------------------------------   
000045EA  FFFF FFFF               6705    SIMHALT            
000045EE                          6706  
000045EE                          6707    END     START       

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABCD_INNER1         2D46
ABCD_INNER2         2DC0
ABCD_NO_C1          2D68
ABCD_NO_C2          2D72
ABCD_NO_C3          2DE2
ABCD_NO_C4          2DEC
ABCD_OUTER1         2D44
ABCD_OUTER2         2DBE
ADDA_OUTER1         3928
ADDQ_LOOP1          3112
ADDQ_LOOP2          3152
ADDQ_LOOP3          3188
ADDX_LOOP3          3A56
ADDX_LOOP4          3A76
ADDX_LOOP5          3A96
ADDX_OUTER1         39BE
ADD_OUTER1          3746
ADD_OUTER2          37BC
ALL_DONE            F000
ANDI_TO_CCR_FAIL    672
ANDI_TO_SR_FAIL     6AA
AND_OUTER1          344A
AND_OUTER2          34C0
BCC1                3036
BCC10               3088
BCC11               3090
BCC12               309A
BCC13               30A2
BCC14               30AC
BCC2                3040
BCC3                3048
BCC4                3052
BCC5                305A
BCC6                3064
BCC7                306C
BCC8                3076
BCC9                307E
BCHG_FAIL           FEE
BSET_FAIL           183C
BSR_CLOSE1          1AB6
BSR_CLOSE2          1AEC
BSR_FAR1            55C
BSR_FAR2            3026
BTST_FAIL           B5C
CMPA_OUTER1         3628
CMPM_LOOP1          36BE
CMPM_LOOP2          36DC
CMPM_LOOP3          36FA
CMP_OUTER1          35B0
DBCC_LOOP1          30B6
DBCC_LOOP2          30C4
DIVS_OUTER1         3304
DIVU_OUTER1         32B2
EORI_TO_CCR_FAIL    602
EORI_TO_SR_FAIL     63A
EOR_OUTER2          3538
EXCEPTION_6         F010
EXCEPTION_7         F020
LEA1                24FA
MOVE1               2150
MOVE2               20D2
MOVE3               21D2
MOVE4               2334
MULS_OUTER1         3C40
MULU_OUTER1         3BF4
NBCD_LOOP           2F64
NBCD_LOOP1          2FAE
NBCD_NO_C           2F72
NBCD_NO_C1          2FC4
NBCD_NO_Z           2F78
NBCD_NO_Z1          2FCA
OP_ABCD             2D20
OP_ADD              3724
OP_ADDA             3900
OP_ADDQ             30FE
OP_ADDX             399C
OP_ADD_I            1CF6
OP_AND              3428
OP_ANDI_TO_CCR      63C
OP_ANDI_TO_SR       674
OP_BCC              302E
OP_BCHG             B5E
OP_BCLR             FF0
OP_BOOL_I           18D4
OP_BSET             13A2
OP_BSR              1ABE
OP_BTST             6AC
OP_BTST0            89E
OP_BTST1            8AC
OP_BTST10           906
OP_BTST11           910
OP_BTST12           916
OP_BTST2            8B6
OP_BTST20           AD8
OP_BTST21           AE4
OP_BTST22           AEC
OP_BTST23           AF4
OP_BTST24           AFC
OP_BTST25           B04
OP_BTST26           B0C
OP_BTST27           B14
OP_BTST28           B1C
OP_BTST29           B24
OP_BTST3            8C0
OP_BTST30           B2C
OP_BTST31           B34
OP_BTST32           B38
OP_BTST4            8CA
OP_BTST5            8D4
OP_BTST6            8DE
OP_BTST7            8E8
OP_BTST8            8F2
OP_BTST9            8FC
OP_CHK              25AC
OP_CMP              358E
OP_CMPA             3606
OP_CMPM             366E
OP_CMP_I            1AF4
OP_DBCC             30AE
OP_DIVS             32E8
OP_DIVU             3296
OP_EOR              3516
OP_EORI_TO_CCR      5CC
OP_EORI_TO_SR       604
OP_EXG              3C70
OP_EXT              2422
OP_LEAPEA           2462
OP_LINKS            2580
OP_MOVE             2002
OP_MOVEM            299C
OP_MOVEP            183E
OP_MOVEQ            3276
OP_MOVE_USP         259E
OP_MOVE_XXX_FLAGS   2214
OP_MULS             3C24
OP_MULU             3BD8
OP_NBCD             2F4C
OP_NEGS             25E6
OP_OR               333A
OP_ORI_TO_CCR       564
OP_ORI_TO_SR        598
OP_ROX              3CDE
OP_ROXX             3F1E
OP_RTR              300A
OP_SBCD             2E36
OP_SCC              30D4
OP_SHIFTS           415E
OP_SHIFTS2          43AA
OP_SUB              3812
OP_SUBA             394E
OP_SUBQ             31BA
OP_SUBX             3ABA
OP_SUB_I            1E7C
OP_SWAP             244C
OP_TAS              250E
OP_TRAPV            2FEA
OP_TST              2538
ORI_TO_CCR_FAIL     596
ORI_TO_SR_FAIL      5CA
OR_OUTER1           335C
OR_OUTER2           33D2
ROXX_FLAGS          3F12
ROXX_LOOP1          3F28
ROXX_LOOP2          3F4A
ROXX_LOOP3          3F6C
ROXX_LOOP4          3F8E
ROXX_LOOP5          3FB0
ROXX_LOOP6          3FD2
ROX_FLAGS           3CD2
ROX_LOOP1           3CE8
ROX_LOOP2           3D0A
ROX_LOOP3           3D2C
ROX_LOOP4           3D4E
ROX_LOOP5           3D70
ROX_LOOP6           3D92
RTR_DONE            3018
SBCD_INNER1         2E5C
SBCD_INNER2         2ED6
SBCD_NO_C1          2E7E
SBCD_NO_C2          2E88
SBCD_NO_C3          2EF8
SBCD_NO_C4          2F02
SBCD_OUTER1         2E5A
SBCD_OUTER2         2ED4
SHIFTS2_FLAGS       439E
SHIFTS2_LOOP1       43B4
SHIFTS2_LOOP2       43D6
SHIFTS2_LOOP3       43F8
SHIFTS2_LOOP4       441A
SHIFTS2_LOOP5       443C
SHIFTS2_LOOP6       445E
SHIFTS_FLAGS        4152
SHIFTS_LOOP1        4168
SHIFTS_LOOP2        418A
SHIFTS_LOOP3        41AC
SHIFTS_LOOP4        41CE
SHIFTS_LOOP5        41F0
SHIFTS_LOOP6        4212
START               400
SUBA_OUTER1         3976
SUBQ_LOOP1          31D2
SUBQ_LOOP2          320E
SUBQ_LOOP3          3244
SUBX_LOOP3          3B74
SUBX_LOOP4          3B94
SUBX_LOOP5          3BB4
SUBX_OUTER1         3ADC
SUB_OUTER1          3834
SUB_OUTER2          38AA
